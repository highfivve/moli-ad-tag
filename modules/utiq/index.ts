/**
 * # [Utiq](https://utiq.com/)
 *
 * ## Integration
 *
 * In your `index.ts` import confiant and register the module.
 *
 * ```js
 * import { Utiq } from '@highfivve/module-utiq';
 * moli.registerModule(new Utiq({
 *   assetUrl: 'https://utiq.example.com/utiqLoader.js'
 * }));
 * ```
 *
 * ## Resources
 *
 * - [Utiq docs](https://docs.utiq.com/docs)
 *
 * @module
 */
import {
  Moli,
  IModule,
  ModuleType,
  AssetLoadMethod,
  IAssetLoaderService,
  mkInitStep,
  AdPipelineContext
} from '@highfivve/ad-tag';
import { tcfapi } from '@highfivve/ad-tag/lib/types/tcfapi';

type ColorHexCode = `#${string}`;

export interface UtiqIntegrationOps {
  /**
   * Utiq SDK automatically sends adtechpass as Google Secure Signals to Google Ad Manager (GAM),
   * firing the below code. From integration perspective you donâ€™t have to do anything else.
   *
   * Your only pending action would be to enable the feature in Google Ad Manager UI.
   *
   * @see https://docs.utiq.com/docs/google-secure-signals
   */
  readonly disableGoogleSecureSignals?: boolean;
}

/**
 * The Utiq loader script can be configured using the Utiq.config object. The configuration object is a JavaScript
 * object that can be set up before the Utiq loader script is loaded. The configuration object is available under
 * the `Utiq.config` namespace.
 *
 * All the configuration options below are optional and can be omitted if not needed.
 *
 * ## Event Listeners
 *
 * Utiq made the design choice to add event listeners to the config object, which makes it impossible to configure them
 * server side. If a publisher wants to add event listeners, they have to do it in the client side code and make sure
 * that the ad tag or `requestAds` call is made after the event listener are added. Otherwise, the Utiq script might
 * already be available and not pick the listeners up.
 *
 * We merged the `Utiq.config
 *
 * ## Customization Options
 *
 * Those will be merged top level with any existing `customizationOptions` options.
 *
 * @see https://docs.utiq.com/docs/configuration-options
 * @see https://docs.utiq.com/docs/event-listeners
 */
export interface UtiqConfigOptions {
  /**
   * If you need not to show Utiq separate pop-up, you will need to add CMP: "none" in Utiq.config. Use cases would
   * be not showing pop-up on Manage Utiq page, on Privacy Policy page and/or if you want to run an A/B testing.
   *
   * @see https://docs.utiq.com/docs/configuration-options#ConfigurationOptions-CMP
   */
  readonly CMP?: 'none';

  /**
   * You can configure Utiq SDK for various integration options with other marketing solutions.
   * @see https://docs.utiq.com/docs/configuration-options#ConfigurationOptions-integrations
   */
  readonly integrations?: UtiqIntegrationOps;

  /**
   * The Utiq loader configuration automatically detects the currently accessed host for setting up connections and
   * managing data. However, you can use a custom host for staging environments that do not fall under the CNAME setups
   * created for existing Utiq domains. The customUtiqHost configuration entry allows the use of a host different from
   * the one accessed when visiting a specific website.
   *
   * @see https://docs.utiq.com/docs/configuration-options#ConfigurationOptions-customUtiqHost
   */
  readonly customUtiqHost?: string;

  /**
   * You can configure the following Utiq pop-up customized styling: buttons background color, buttons text colors,
   * buttons corners radius and pop-up text colors.
   * @see https://docs.utiq.com/docs/configuration-options#ConfigurationOptions-customizationOptions
   */
  readonly customizationOptions?: {
    /**
     * ## Configuration option for language
     *
     * You can use the below configuration option if you need to dynamically change the default language of the text
     * generated by the dynamic <div>, e.g. if users have a language drop-down option.
     *
     * @see https://docs.utiq.com/docs/manage-utiq-page#ManageUtiqPage-Configurationoptionforlanguage
     */
    readonly customizationOptions?: 'en' | 'de' | 'it' | 'fr' | 'es';

    /**
     * @example `https://www.example.com/images/logo.svg`
     */
    readonly websiteLogoUrl?: string;

    readonly buttons: {
      readonly bodyColor: ColorHexCode;
      readonly textColor: ColorHexCode;
      readonly radius: number;
    };

    readonly hyperlinks?: {
      /** color hex code */
      readonly color?: ColorHexCode;
      /** color hex code */
      readonly colorOnHover?: ColorHexCode;
      /** @default `false` */
      readonly isUnderlined?: boolean;
    };

    /**
     * Text color of the pop-up content. This should be a HEX color code, e.g. #000000.
     */
    readonly contentTextColor: ColorHexCode;

    /**
     * ## Optimize auto-scroll margin to domain list paragraph
     *
     * Users may land on Manage Utiq page from either the Integrated Model or Separate pop-up Model, with a relevant
     * hyperlink, and they will be automatically scrolled to the domains list paragraph.
     *
     * In case you have any overlaying top menu, remaining in view when users scroll lower, you can use the below
     * configuration, to optimize the margin of the auto scroll, so that the paragraph title is visible.
     *
     * @see https://docs.utiq.com/docs/manage-utiq-page#ManageUtiqPage-Optimizeauto-scrollmargintodomainlistparagraph
     */
    readonly domainListAnchorMargin?: number;
  };

  /**
   * This configuration option allows to specify a custom origin (string value) for the Utiq consent manager script.
   * This is useful when the consent manager is hosted on a different domain than the one where the Utiq loader script
   * is loaded from. The value must be a valid origin, e.g. `https://subdomain.other-utiq-enabled-source-domain.com`.
   *
   * @see https://docs.utiq.com/docs/configuration-options#ConfigurationOptions-consentManagerOrigin
   */
  readonly consentManagerOrigin?: string;

  /**
   * When using the [Utiq Consent Manager](https://docs.utiq.com/docs/1b-consent-experience-utiq-separate-pop-up-model-u)
   * you can enable event tracking for the pop-up actions by adding a consentManagerDataLayer configuration.
   *
   * @see https://docs.utiq.com/docs/configuration-options#ConfigurationOptions-consentManagerDataLayer
   */
  readonly consentManagerDataLayer?: boolean;
}

type UtiqCommand = () => void;

/**
 * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onConsentManagerStatusChanged
 */
type UtiqStatus = 'utiq_popup_shown' | 'utiq_popup_accepted' | 'utiq_popup_rejected';

/**
 * category will return 'mobile' or 'fixed', to differentiate if Utiq IDs are generated based the
 * mobile connection, or the fixed (household) connection.
 *
 * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onIdsAvailable
 */
interface UtiqIdsAvailableEvent {
  mtid: string;
  atid: string;
  attrid: string;
  category: 'mobile' | 'fixed';
  ttl: string;
  domain: string;
}

/**
 * @see https://docs.utiq.com/docs/event-listeners
 */
interface UtiqEventMap {
  /**
   * This event is dispatched when the Utiq is fully initialized on every page load or navigation.
   *
   * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onInitialised
   */
  onInitialised: () => void;

  /**
   * This event is dispatched when user eligibility check information is performed for the current client sending it
   * with the parameter. The check occurs on initial page load, when the eligibility is validated before the Utiq loads,
   * and on the consent acceptance.
   *
   * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onEligibilityChecked
   */
  onEligibilityChecked: (event: { isEligible: boolean }) => void;

  /**
   * This event is dispatched when the Utiq gets signal from the browser (or client) to change the consent status to
   * the one held with the parameter. The fact that the event is dispatched does not mean the consent will be changed -
   * only that the signal has been sent. Further flow execution can be stopped by e.g. feedback that the consent already
   * has the specified value
   *
   * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onConsentChanging
   */
  onConsentChanging: (event: { isConsentGranted: boolean }) => void;

  /**
   * This event is dispatched when Utiq consent status update has finished to the one held with the parameter.
   *
   * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onConsentUpdateFinished
   */
  onConsentUpdateFinished: (event: { isConsentGranted: boolean }) => void;

  /**
   * The event is dispatched each time the status of consent is changed. The possible values can be:
   *
   * - `utiq_popup_shown`
   * - `utiq_popup_accepted`
   * - `utiq_popup_rejected`
   *
   * The event is dispatched on the following situations:
   *
   * - when consent manager popup is shown to the user (utiq_popup_shown).
   * - when consent manager popup is accepted (utiq_popup_accepted).
   * - when consent manager popup is rejected (utiq_popup_rejected).
   *
   * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onConsentManagerStatusChanged
   */
  onConsentManagerStatusChanged: (event: { status: UtiqStatus }) => void;

  /**
   * This event is dispatched when Utiq's mtid and atid are available for use and provides them via its parameters.
   * It happens when the full Utiq flow is executed successfully and on the subsequent page loads when the IDs are
   * already set up.
   *
   * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onIdsAvailable
   */
  onIdsAvailable: (event: UtiqIdsAvailableEvent) => void;

  /**
   * This event is dispatched when Utiq has completed its flow, either user was eligible and accepted/rejected, user
   * had accepted/rejected on previous session, or user was not eligible.
   *
   * Use case would be to use this event listener if you want to call other solutions as soon as Utiq flow ends, e.g.
   * not calling Prebid after CMP but wait to call it when this event listener fires.
   *
   * @see https://docs.utiq.com/docs/event-listeners#EventListeners-onFlowCompleted
   */
  onFlowCompleted: () => void;
}

type UtiqEventType = keyof UtiqEventMap;
type UtiqEventListener<T extends UtiqEventType> = (event: UtiqEventMap[T]) => void;

/**
 * The Utiq API object.
 *
 * NOTE: Only the methods we require in this module are listed here. Checks the docs if you need more and add them accordingly.
 *
 * @see https://docs.utiq.com/docs/api-methods
 */
export interface UtiqAPI {
  /**
   * Displays the Utiq Consent Manager overlay popup. This method operates with the default Utiq consent management setup.
   * Find more details on the []Utiq dedicated consent popup page](https://docs.utiq.com/docs/1b-consent-experience-utiq-separate-pop-up-model-u).
   *
   * @see https://docs.utiq.com/docs/api-methods#APIMethods-showConsentManager
   */
  showConsentManager(): void;

  /**
   *
   * @param event
   * @param listener
   * @see https://docs.utiq.com/docs/event-listeners
   */
  addEventListener<T extends UtiqEventType>(event: T, listener: UtiqEventListener<T>): void;

  /**
   *
   * @param event
   * @param listener
   * @see https://docs.utiq.com/docs/event-listeners
   */
  removeEventListener<T extends UtiqEventType>(event: T, listener: UtiqEventListener<T>): void;

  /**
   * @param entryName - Name of the entry that should be extracted from the ID graph.
   *                  Accepted values are: `mtid`, `atid`, `attrid`, `category`, `ttl`, `domain`
   * @see https://docs.utiq.com/docs/api-methods#APIMethods-getIdGraphEntry
   */
  getIdGraphEntry(entryName: string): string;
}

export type UtiqWindow = {
  Utiq?: {
    queue: Pick<UtiqCommand[], 'push'>;
    /**
     * The Utiq loader script can be configured using the Utiq.config object. Will be set from the config options provided
     * in the module configuration.
     */
    config?: UtiqConfigOptions;

    /**
     * public API methods. Only available after the Utiq script is loaded.
     */
    API?: UtiqAPI;
  };
};

/**
 * ## Utiq Configuration
 *
 * The configuration for the utiq module. Contains all utiq configuration properties as well as moli ad tag modules, too.
 */
export type UtiqConfig = {
  readonly enabled: boolean;

  /**
   * Utiq loads a single javascript. It will only load if consent for **all** purposes is given.
   */
  readonly assetUrl: string;

  /**
   * The Utiq loader script can be configured using the Utiq.config object. The configuration object is a JavaScript
   * @see https://docs.utiq.com/docs/configuration-options
   */
  readonly options?: UtiqConfigOptions;
};

/**
 * ## Confiant Ad Fraud Protection
 *
 * Confiant blocks malicious ads.
 *
 */
export class Utiq implements IModule {
  public readonly name: string = 'utiq';
  public readonly description: string = 'user module';
  public readonly moduleType: ModuleType = 'identity';

  private readonly requiredPurposeIds = [
    tcfapi.responses.TCPurpose.STORE_INFORMATION_ON_DEVICE,
    tcfapi.responses.TCPurpose.SELECT_BASIC_ADS,
    tcfapi.responses.TCPurpose.CREATE_PERSONALISED_ADS_PROFILE,
    tcfapi.responses.TCPurpose.SELECT_PERSONALISED_ADS,
    tcfapi.responses.TCPurpose.CREATE_PERSONALISED_CONTENT_PROFILE,
    tcfapi.responses.TCPurpose.SELECT_PERSONALISED_CONTENT,
    tcfapi.responses.TCPurpose.MEASURE_AD_PERFORMANCE,
    tcfapi.responses.TCPurpose.MEASURE_CONTENT_PERFORMANCE,
    tcfapi.responses.TCPurpose.APPLY_MARKET_RESEARCH,
    tcfapi.responses.TCPurpose.DEVELOP_IMPROVE_PRODUCTS,
    tcfapi.responses.TCPurpose.USE_LIMITED_DATA_TO_SElECT_CONTENT
  ];

  constructor(private readonly utiqConfig: UtiqConfig) {}

  config(): Object | null {
    return this.utiqConfig;
  }

  init(config: Moli.MoliConfig, assetLoaderService: IAssetLoaderService): void {
    if (this.utiqConfig.enabled) {
      // init additional pipeline steps if not already defined
      config.pipeline = config.pipeline || {
        initSteps: [],
        configureSteps: [],
        prepareRequestAdsSteps: []
      };

      config.pipeline.initSteps.push(
        mkInitStep(this.name, ctx => this.loadUtiq(ctx, assetLoaderService))
      );
    }
  }

  loadUtiq(context: AdPipelineContext, assetLoaderService: IAssetLoaderService): Promise<void> {
    // test environment doesn't require confiant
    if (context.env === 'test') {
      return Promise.resolve();
    }

    const utiqWindow = context.window as unknown as UtiqWindow;
    // merge any existing object. Existing configurations take precedence.
    utiqWindow.Utiq = utiqWindow.Utiq
      ? { ...utiqWindow.Utiq, config: { ...utiqWindow.Utiq.config, ...this.utiqConfig.options } }
      : { queue: [], config: this.utiqConfig.options };

    // double check queue initialization as publishers might already have set options, but did not
    // properly initialize the queue
    utiqWindow.Utiq.queue = utiqWindow.Utiq.queue || [];

    // no consent if gdpr applies
    if (
      context.tcData.gdprApplies &&
      // this is only a safeguard to block confiant when checkGVLID is false
      this.requiredPurposeIds.some(
        purposeId => context.tcData.gdprApplies && !context.tcData.purpose.consents[purposeId]
      )
    ) {
      return Promise.resolve();
    }
    return assetLoaderService
      .loadScript({
        name: this.name,
        loadMethod: AssetLoadMethod.TAG,
        assetUrl: this.utiqConfig.assetUrl
      })
      .catch(error => context.logger.error('failed to load utiq', error));
  }
}
