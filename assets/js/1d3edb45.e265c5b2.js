"use strict";(self.webpackChunkthe_publisher_ad_tag=self.webpackChunkthe_publisher_ad_tag||[]).push([[9059],{8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var i=o(6540);const r={},l=i.createContext(r);function s(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}},8832:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>g,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"features/logger","title":"Logging","description":"Moli provides a logging system to help you monitor ad tag events and debug issues. The logger can be configured to output different levels of information and can be customized to integrate with external logging services.","source":"@site/docs/features/logger.md","sourceDirName":"features","slug":"/features/logger","permalink":"/moli-ad-tag/docs/features/logger","draft":false,"unlisted":false,"editUrl":"https://github.com/highfivve/moli-ad-tag/docs/features/logger.md","tags":[],"version":"current","frontMatter":{"title":"Logging"},"sidebar":"docs","previous":{"title":"Debugging","permalink":"/moli-ad-tag/docs/features/debugging"},"next":{"title":"Environments","permalink":"/moli-ad-tag/docs/features/environments"}}');var r=o(4848),l=o(8453);const s={title:"Logging"},a=void 0,g={},t=[{value:"Overview",id:"overview",level:2},{value:"Log Levels",id:"log-levels",level:2},{value:"Available Log Levels",id:"available-log-levels",level:3},{value:"Log Level Hierarchy",id:"log-level-hierarchy",level:3},{value:"Enabling Logging",id:"enabling-logging",level:2},{value:"Using Query Parameter",id:"using-query-parameter",level:3},{value:"Using Session Storage",id:"using-session-storage",level:3},{value:"Using Local Storage",id:"using-local-storage",level:3},{value:"Default Logger",id:"default-logger",level:2},{value:"Custom Logger",id:"custom-logger",level:2},{value:"Setting a Custom Logger",id:"setting-a-custom-logger",level:3},{value:"Custom Logger Implementation",id:"custom-logger-implementation",level:3},{value:"External Logging Integration",id:"external-logging-integration",level:3},{value:"Noop Logger",id:"noop-logger",level:3},{value:"Environment-Specific Logging",id:"environment-specific-logging",level:2},{value:"Development Logging",id:"development-logging",level:3},{value:"Production Logging",id:"production-logging",level:3},{value:"Log Sources",id:"log-sources",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Appropriate Log Levels",id:"appropriate-log-levels",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"MoliLogger Interface",id:"molilogger-interface",level:3},{value:"Available Methods",id:"available-methods",level:3},{value:"Debug Parameter",id:"debug-parameter",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Moli provides a logging system to help you monitor ad tag events and debug issues. The logger can be configured to output different levels of information and can be customized to integrate with external logging services."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The logging system helps you:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor ad loading and auction processes"}),"\n",(0,r.jsx)(n.li,{children:"Debug configuration and runtime issues"}),"\n",(0,r.jsx)(n.li,{children:"Integrate with external monitoring services"}),"\n",(0,r.jsx)(n.li,{children:"Maintain audit trails for compliance"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"log-levels",children:"Log Levels"}),"\n",(0,r.jsx)(n.h3,{id:"available-log-levels",children:"Available Log Levels"}),"\n",(0,r.jsx)(n.p,{children:"Moli supports standard log levels:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"error"})," - Critical errors that prevent functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"warn"})," - Warning messages about potential issues"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"info"})," - General information about ad tag operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"debug"})," - Detailed debugging information"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"log-level-hierarchy",children:"Log Level Hierarchy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Most verbose to least verbose\ndebug > info > warn > error\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enabling-logging",children:"Enabling Logging"}),"\n",(0,r.jsx)(n.h3,{id:"using-query-parameter",children:"Using Query Parameter"}),"\n",(0,r.jsxs)(n.p,{children:["Enable logging by adding the ",(0,r.jsx)(n.code,{children:"moliDebug"})," parameter to your URL:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://yoursite.com?moliDebug=true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-session-storage",children:"Using Session Storage"}),"\n",(0,r.jsx)(n.p,{children:"Enable logging for the current session:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Enable logging for current session\nsessionStorage.setItem('moliDebug', 'true');\n\n// Disable logging\nsessionStorage.removeItem('moliDebug');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-local-storage",children:"Using Local Storage"}),"\n",(0,r.jsx)(n.p,{children:"Enable logging persistently across sessions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Enable logging persistently\nlocalStorage.setItem('moliDebug', 'true');\n\n// Disable logging\nlocalStorage.removeItem('moliDebug');\n"})}),"\n",(0,r.jsx)(n.h2,{id:"default-logger",children:"Default Logger"}),"\n",(0,r.jsx)(n.p,{children:"When logging is enabled, Moli uses a default logger that writes to the console with colored labels:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Example of default logger output\n[DEBUG] AdPipeline Ad slot configured for content_1\n[INFO] GAM Ad request sent to /1234/content_1\n[WARN] Prebid Bid timeout for slot content_1\n[ERROR] AdPipeline Failed to load ad for content_1\n"})}),"\n",(0,r.jsx)(n.p,{children:"The default logger includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Colored labels for log levels and sources"}),"\n",(0,r.jsx)(n.li,{children:"Source identification (AdPipeline, GAM, Prebid, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"Full message details and optional parameters"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"custom-logger",children:"Custom Logger"}),"\n",(0,r.jsx)(n.h3,{id:"setting-a-custom-logger",children:"Setting a Custom Logger"}),"\n",(0,r.jsxs)(n.p,{children:["Implement your own logging logic using the ",(0,r.jsx)(n.code,{children:"setLogger"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"window.moli = window.moli || { que: [] };\nwindow.moli.que.push(function(moliAdTag) {\n  // Set custom logger\n  moliAdTag.setLogger(customLogger);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-logger-implementation",children:"Custom Logger Implementation"}),"\n",(0,r.jsxs)(n.p,{children:["Implement the ",(0,r.jsx)(n.code,{children:"MoliLogger"})," interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const customLogger = {\n  error(message?: any, ...optionalParams: any[]): void {\n    // Send to error tracking service\n    Sentry.captureException(new Error(message), { extra: optionalParams });\n    console.error(`[Moli Error] ${message}`, ...optionalParams);\n  },\n  \n  warn(message?: any, ...optionalParams: any[]): void {\n    // Log warnings\n    console.warn(`[Moli Warning] ${message}`, ...optionalParams);\n  },\n  \n  info(message?: any, ...optionalParams: any[]): void {\n    // Log info messages\n    console.info(`[Moli Info] ${message}`, ...optionalParams);\n  },\n  \n  debug(message?: any, ...optionalParams: any[]): void {\n    // Only log in development\n    if (process.env.NODE_ENV === 'development') {\n      console.debug(`[Moli Debug] ${message}`, ...optionalParams);\n    }\n  }\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"external-logging-integration",children:"External Logging Integration"}),"\n",(0,r.jsx)(n.p,{children:"Integrate with external logging services:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const externalLogger = {\n  error(message?: any, ...optionalParams: any[]): void {\n    // Send to external service\n    fetch('/api/logs', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        level: 'error',\n        message: String(message),\n        params: optionalParams,\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent\n      })\n    });\n  },\n  \n  info(message?: any, ...optionalParams: any[]): void {\n    // Send to analytics\n    analytics.track('ad_tag_log', {\n      level: 'info',\n      message: String(message),\n      params: optionalParams\n    });\n  },\n  \n  warn(message?: any, ...optionalParams: any[]): void {\n    // Log warnings\n    console.warn(`[Moli Warning] ${message}`, ...optionalParams);\n  },\n  \n  debug(message?: any, ...optionalParams: any[]): void {\n    // Debug logging\n    console.debug(`[Moli Debug] ${message}`, ...optionalParams);\n  }\n};\n\nwindow.moli = window.moli || { que: [] };\nwindow.moli.que.push(function(moliAdTag) {\n  moliAdTag.setLogger(externalLogger);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"noop-logger",children:"Noop Logger"}),"\n",(0,r.jsx)(n.p,{children:"Disable all logging except errors:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const noopLogger = {\n  debug: () => { return; },\n  info: () => { return; },\n  warn: () => { return; },\n  error: console.error // Still log errors to console\n};\n\nwindow.moli = window.moli || { que: [] };\nwindow.moli.que.push(function(moliAdTag) {\n  moliAdTag.setLogger(noopLogger);\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"environment-specific-logging",children:"Environment-Specific Logging"}),"\n",(0,r.jsx)(n.h3,{id:"development-logging",children:"Development Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Enable debug logging in development\nif (process.env.NODE_ENV === 'development') {\n  localStorage.setItem('moliDebug', 'true');\n}\n\n// Or use custom logger for development\nconst devLogger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.info,\n  debug: console.debug\n};\n\nwindow.moli = window.moli || { que: [] };\nwindow.moli.que.push(function(moliAdTag) {\n  moliAdTag.setLogger(devLogger);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"production-logging",children:"Production Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Use minimal logging in production\nconst prodLogger = {\n  error: (message, ...params) => {\n    // Send errors to monitoring service\n    errorTracking.captureError(message, params);\n  },\n  warn: () => { return; }, // Disable warnings\n  info: () => { return; }, // Disable info\n  debug: () => { return; } // Disable debug\n};\n\nwindow.moli = window.moli || { que: [] };\nwindow.moli.que.push(function(moliAdTag) {\n  moliAdTag.setLogger(prodLogger);\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"log-sources",children:"Log Sources"}),"\n",(0,r.jsx)(n.p,{children:"The default logger identifies different sources of log messages:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AdPipeline"})," - Ad loading and processing pipeline"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GAM"})," - Google Ad Manager operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prebid"})," - Header bidding operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MoliGlobal"})," - Global ad tag operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AdVisibilityService"})," - Ad visibility tracking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"UserActivityService"})," - User activity monitoring"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Adex DMP"})," - Data management platform"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"appropriate-log-levels",children:"Appropriate Log Levels"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// \u2705 Good - Use appropriate levels\nlogger.error('Ad failed to load', { slotId: 'content_1' });\nlogger.warn('Consent not available', { timeout: 5000 });\nlogger.info('Ad slot configured', { slotId: 'content_1' });\nlogger.debug('Network request details', { url: '/ad-request' });\n\n// \u274c Avoid - Don't use debug for important info\nlogger.debug('Ad failed to load', { slotId: 'content_1' });\n"})}),"\n",(0,r.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// \u2705 Good - Conditional logging\nif (process.env.NODE_ENV === 'development') {\n  logger.debug('Detailed debug info', context);\n}\n\n// \u274c Avoid - Always logging debug info\nlogger.debug('Detailed debug info', context); // Always executes\n"})}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const safeLogger = {\n  error: (message, ...params) => {\n    try {\n      // Send to error tracking\n      errorTracking.captureError(message, params);\n    } catch (e) {\n      // Fallback to console\n      console.error('[Moli Error]', message, ...params);\n    }\n  },\n  warn: console.warn,\n  info: console.info,\n  debug: console.debug\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"molilogger-interface",children:"MoliLogger Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface MoliLogger {\n  debug(message?: any, ...optionalParams: any[]): void;\n  info(message?: any, ...optionalParams: any[]): void;\n  warn(message?: any, ...optionalParams: any[]): void;\n  error(message?: any, ...optionalParams: any[]): void;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"available-methods",children:"Available Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"setLogger(logger)"})," - Set a custom logger implementation"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For detailed API documentation, see the ",(0,r.jsx)(n.a,{href:"/api/types/moliRuntime/namespaces/MoliRuntime/interfaces/MoliTag",children:"MoliTag API reference"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"debug-parameter",children:"Debug Parameter"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"moliDebug"})," parameter can be set via:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Query parameter: ",(0,r.jsx)(n.code,{children:"?moliDebug=true"})]}),"\n",(0,r.jsxs)(n.li,{children:["Session storage: ",(0,r.jsx)(n.code,{children:"sessionStorage.setItem('moliDebug', 'true')"})]}),"\n",(0,r.jsxs)(n.li,{children:["Local storage: ",(0,r.jsx)(n.code,{children:"localStorage.setItem('moliDebug', 'true')"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["When enabled, the default logger will be used unless a custom logger is set via ",(0,r.jsx)(n.code,{children:"setLogger()"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);