"use strict";(self.webpackChunkthe_publisher_ad_tag=self.webpackChunkthe_publisher_ad_tag||[]).push([[6607],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},9388:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/single-page-applications","title":"Single Page Applications","description":"This guide covers how to integrate Moli with single page applications (SPAs) built with frameworks like React, Vue, Angular, or vanilla JavaScript. SPAs require special handling because they don\'t trigger full page reloads when users navigate.","source":"@site/docs/guides/single-page-applications.md","sourceDirName":"guides","slug":"/guides/single-page-applications","permalink":"/moli-ad-tag/docs/guides/single-page-applications","draft":false,"unlisted":false,"editUrl":"https://github.com/highfivve/moli-ad-tag/docs/guides/single-page-applications.md","tags":[],"version":"current","frontMatter":{"title":"Single Page Applications"},"sidebar":"docs","previous":{"title":"Getting Started with highfivve","permalink":"/moli-ad-tag/docs/guides/getting-started"},"next":{"title":"Performance Optimization","permalink":"/moli-ad-tag/docs/guides/performance-optimization"}}');var s=i(4848),o=i(8453);const a={title:"Single Page Applications"},l=void 0,r={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic SPA Setup",id:"basic-spa-setup",level:2},{value:"1. Enable SPA Mode",id:"1-enable-spa-mode",level:3},{value:"2. Initialize Moli",id:"2-initialize-moli",level:3},{value:"3. Handle Route Changes",id:"3-handle-route-changes",level:3},{value:"Route Change Detection",id:"route-change-detection",level:2},{value:"validateLocation Options",id:"validatelocation-options",level:3},{value:"Manual Route Change Handling",id:"manual-route-change-handling",level:3},{value:"Framework-Specific Integration",id:"framework-specific-integration",level:2},{value:"React",id:"react",level:3},{value:"Basic React Integration",id:"basic-react-integration",level:4},{value:"Ad Slot Component",id:"ad-slot-component",level:4},{value:"Usage in Components",id:"usage-in-components",level:4},{value:"Vue.js",id:"vuejs",level:3},{value:"Vue 3 Composition API",id:"vue-3-composition-api",level:4},{value:"Ad Slot Component",id:"ad-slot-component-1",level:4},{value:"Angular",id:"angular",level:3},{value:"Angular Service",id:"angular-service",level:4},{value:"Ad Slot Component",id:"ad-slot-component-2",level:4},{value:"Dynamic Ad Slots",id:"dynamic-ad-slots",level:2},{value:"Lazy Loading Ad Slots",id:"lazy-loading-ad-slots",level:3},{value:"Conditional Ad Slots",id:"conditional-ad-slots",level:3},{value:"State Management",id:"state-management",level:2},{value:"Targeting Updates",id:"targeting-updates",level:3},{value:"User State Management",id:"user-state-management",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Debounced Route Changes",id:"debounced-route-changes",level:3},{value:"Ad Slot Caching",id:"ad-slot-caching",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Route Change Errors",id:"route-change-errors",level:3},{value:"Ad Loading Errors",id:"ad-loading-errors",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Initialize Once",id:"1-initialize-once",level:3},{value:"2. Clean Up Ad Slots",id:"2-clean-up-ad-slots",level:3},{value:"3. Handle Loading States",id:"3-handle-loading-states",level:3},{value:"4. Optimize Performance",id:"4-optimize-performance",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This guide covers how to integrate Moli with single page applications (SPAs) built with frameworks like React, Vue, Angular, or vanilla JavaScript. SPAs require special handling because they don't trigger full page reloads when users navigate."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"SPAs present unique challenges for ad tags:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No page reloads mean ads don't automatically refresh"}),"\n",(0,s.jsx)(n.li,{children:"Route changes need to trigger new ad requests"}),"\n",(0,s.jsx)(n.li,{children:"Ad slots may be dynamically created and destroyed"}),"\n",(0,s.jsx)(n.li,{children:"State management becomes more complex"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Moli provides built-in SPA support to handle these challenges."}),"\n",(0,s.jsx)(n.h2,{id:"basic-spa-setup",children:"Basic SPA Setup"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"A lot of the examples are generated with AI and have not been tested in production.\nTake extra care in handling state management and check that ad slots are rendered only once."})}),"\n",(0,s.jsx)(n.h3,{id:"1-enable-spa-mode",children:"1. Enable SPA Mode"}),"\n",(0,s.jsx)(n.p,{children:"Configure Moli for SPA mode in your configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const moliConfig = {\n  // ... other configuration\n  spa: {\n    enabled: true,\n    validateLocation: 'href' // or 'pathname' or 'none'\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-initialize-moli",children:"2. Initialize Moli"}),"\n",(0,s.jsx)(n.p,{children:"Set up Moli with SPA support:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Initialize Moli\nwindow.moli = window.moli || { que: [] };\nwindow.moli.que.push(function(moliAdTag) {\n  // Initial ad request\n  moliAdTag.requestAds();\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-handle-route-changes",children:"3. Handle Route Changes"}),"\n",(0,s.jsx)(n.p,{children:"Trigger new ad requests when routes change:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Example with React Router\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction App() {\n  const location = useLocation();\n\n  useEffect(() => {\n    // Request ads on route change\n    window.moli.que.push(function(moliAdTag) {\n      moliAdTag.requestAds();\n    });\n  }, [location]);\n\n  return (\n    <div>\n      {/* Your app content */}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"route-change-detection",children:"Route Change Detection"}),"\n",(0,s.jsx)(n.h3,{id:"validatelocation-options",children:"validateLocation Options"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"validateLocation"})," setting determines what constitutes a route change:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const moliConfig = {\n  spa: {\n    enabled: true,\n    validateLocation: 'href' // Options: 'href', 'pathname', 'none'\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"'href'"})})," (default) - Full URL changes trigger new ad requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"`'pathname'"})," - Only path changes trigger new ad requests (ignores query params and hash)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"`'none'"})," - No automatic detection (manual control only)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"manual-route-change-handling",children:"Manual Route Change Handling"}),"\n",(0,s.jsx)(n.p,{children:"For frameworks without built-in route change detection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Custom route change handler\nfunction handleRouteChange(newUrl) {\n  // Update browser history\n  window.history.pushState({}, '', newUrl);\n  \n  // Trigger ad request\n  window.moli.que.push(function(moliAdTag) {\n    moliAdTag.requestAds();\n  });\n}\n\n// Listen for browser back/forward\nwindow.addEventListener('popstate', () => {\n  window.moli.que.push(function(moliAdTag) {\n    moliAdTag.requestAds();\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"framework-specific-integration",children:"Framework-Specific Integration"}),"\n",(0,s.jsx)(n.h3,{id:"react",children:"React"}),"\n",(0,s.jsx)(n.h4,{id:"basic-react-integration",children:"Basic React Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction App() {\n  const location = useLocation();\n\n  useEffect(() => {\n    // Initialize Moli on first load\n    if (!window.moli) {\n      window.moli = { que: [] };\n      window.moli.que.push(function(moliAdTag) {\n        moliAdTag.requestAds();\n      });\n    } else {\n      // Request ads on route change\n      window.moli.que.push(function(moliAdTag) {\n        moliAdTag.requestAds();\n      });\n    }\n  }, [location]);\n\n  return (\n    <div>\n      <Header />\n      <main>\n        <Routes />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"ad-slot-component",children:"Ad Slot Component"}),"\n",(0,s.jsxs)(n.p,{children:["This is a minimal example of an ",(0,s.jsx)(n.code,{children:"AdSlot"})," component in React."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import React, { useEffect, useRef } from 'react';\n\ninterface AdSlotProps {\n  id: string;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nconst AdSlot: React.FC<AdSlotProps> = ({ id, className, style }) => {\n  const adRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Refresh ad slot when component mounts\n    window.moli.que.push(function(moliAdTag) {\n      moliAdTag.refreshAdSlot(id);\n    });\n\n    // Cleanup when component unmounts\n    return () => {\n      // Optional: Clean up ad slot. This is usually done by the ad tag itself on requestAds()\n      if (adRef.current) {\n        adRef.current.innerHTML = '';\n      }\n    };\n  }, [id]);\n\n  return (\n    <div\n      ref={adRef}\n      id={id}\n      className={className}\n      style={style}\n    />\n  );\n};\n\nexport default AdSlot;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"usage-in-components",children:"Usage in Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'function HomePage() {\n  return (\n    <div>\n      <h1>Welcome to Our Site</h1>\n      <AdSlot id="header-ad" className="ad-container" />\n      \n      <main>\n        <p>Content here...</p>\n        <AdSlot id="content-ad" className="ad-container" />\n        <p>More content...</p>\n      </main>\n      \n      <AdSlot id="sidebar-ad" className="ad-container" />\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"vuejs",children:"Vue.js"}),"\n",(0,s.jsx)(n.h4,{id:"vue-3-composition-api",children:"Vue 3 Composition API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<template>\n  <div>\n    <header>\n      <AdSlot id=\"header-ad\" />\n    </header>\n    \n    <main>\n      <router-view />\n    </main>\n    \n    <footer>\n      <AdSlot id=\"footer-ad\" />\n    </footer>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport AdSlot from './components/AdSlot.vue';\n\nconst route = useRoute();\n\n// Initialize Moli\nonMounted(() => {\n  window.moli = window.moli || { que: [] };\n  window.moli.que.push(function(moliAdTag) {\n    moliAdTag.requestAds();\n  });\n});\n\n// Handle route changes\nwatch(() => route.path, () => {\n  window.moli.que.push(function(moliAdTag) {\n    moliAdTag.requestAds();\n  });\n});\n<\/script>\n"})}),"\n",(0,s.jsx)(n.h4,{id:"ad-slot-component-1",children:"Ad Slot Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vue",children:"<template>\n  <div :id=\"id\" :class=\"className\" :style=\"style\"></div>\n</template>\n\n<script setup>\nimport { onMounted, onUnmounted } from 'vue';\n\nconst props = defineProps({\n  id: {\n    type: String,\n    required: true\n  },\n  className: {\n    type: String,\n    default: ''\n  },\n  style: {\n    type: Object,\n    default: () => ({})\n  }\n});\n\nonMounted(() => {\n  window.moli.que.push(function(moliAdTag) {\n    moliAdTag.refreshAdSlot(props.id);\n  });\n});\n\nonUnmounted(() => {\n  // Optional cleanup\n  const element = document.getElementById(props.id);\n  if (element) {\n    element.innerHTML = '';\n  }\n});\n<\/script>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"angular",children:"Angular"}),"\n",(0,s.jsx)(n.h4,{id:"angular-service",children:"Angular Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MoliService {\n  constructor(private router: Router) {\n    this.initializeMoli();\n    this.handleRouteChanges();\n  }\n\n  private initializeMoli(): void {\n    (window as any).moli = (window as any).moli || { que: [] };\n    (window as any).moli.que.push((moliAdTag: any) => {\n      moliAdTag.requestAds();\n    });\n  }\n\n  private handleRouteChanges(): void {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => {\n        (window as any).moli.que.push((moliAdTag: any) => {\n          moliAdTag.requestAds();\n        });\n      });\n  }\n\n  refreshAdSlot(id: string): void {\n    (window as any).moli.que.push((moliAdTag: any) => {\n      moliAdTag.refreshAdSlot(id);\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"ad-slot-component-2",children:"Ad Slot Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { MoliService } from '../services/moli.service';\n\n@Component({\n  selector: 'app-ad-slot',\n  template: '<div [id]=\"id\" [class]=\"className\" [style]=\"style\"></div>'\n})\nexport class AdSlotComponent implements OnInit, OnDestroy {\n  @Input() id!: string;\n  @Input() className: string = '';\n  @Input() style: any = {};\n\n  constructor(private moliService: MoliService) {}\n\n  ngOnInit(): void {\n    this.moliService.refreshAdSlot(this.id);\n  }\n\n  ngOnDestroy(): void {\n    // Optional cleanup\n    const element = document.getElementById(this.id);\n    if (element) {\n      element.innerHTML = '';\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-ad-slots",children:"Dynamic Ad Slots"}),"\n",(0,s.jsx)(n.h3,{id:"lazy-loading-ad-slots",children:"Lazy Loading Ad Slots"}),"\n",(0,s.jsx)(n.p,{children:"Load ad slots only when they're about to be visible:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import React, { useEffect, useRef, useState } from \'react\';\n\nconst LazyAdSlot = ({ id, className }) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !isLoaded) {\n          setIsVisible(true);\n          setIsLoaded(true);\n          \n          // Load the ad\n          window.moli.que.push(function(moliAdTag) {\n            moliAdTag.refreshAdSlot(id);\n          });\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => observer.disconnect();\n  }, [id, isLoaded]);\n\n  return (\n    <div ref={ref} className={className}>\n      {isVisible && <div id={id} />}\n      {!isVisible && (\n        <div className="ad-placeholder">\n          <div className="loading-spinner" />\n        </div>\n      )}\n    </div>\n  );\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"conditional-ad-slots",children:"Conditional Ad Slots"}),"\n",(0,s.jsx)(n.p,{children:"Show/hide ad slots based on conditions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'const ConditionalAdSlot = ({ id, show, className }) => {\n  useEffect(() => {\n    if (show) {\n      window.moli.que.push(function(moliAdTag) {\n        moliAdTag.refreshAdSlot(id);\n      });\n    }\n  }, [show, id]);\n\n  if (!show) return null;\n\n  return <div id={id} className={className} />;\n};\n\n// Usage\n<ConditionalAdSlot \n  id="premium-ad" \n  show={isPremiumUser()} \n  className="ad-container" \n/>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,s.jsx)(n.h3,{id:"targeting-updates",children:"Targeting Updates"}),"\n",(0,s.jsx)(n.p,{children:"Update targeting for each route:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction App() {\n  const location = useLocation();\n\n  useEffect(() => {\n    window.moli.que.push(function(moliAdTag) {\n      // Update targeting for new route\n      moliAdTag.setTargeting('page_url', location.pathname);\n      moliAdTag.setTargeting('page_title', document.title);\n      \n      // Add route-specific targeting\n      if (location.pathname.includes('/sports/')) {\n        moliAdTag.setTargeting('section', 'sports');\n        moliAdTag.addLabel('sports-content');\n      } else if (location.pathname.includes('/news/')) {\n        moliAdTag.setTargeting('section', 'news');\n        moliAdTag.addLabel('news-content');\n      }\n      \n      moliAdTag.requestAds();\n    });\n  }, [location]);\n\n  return <Routes />;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"user-state-management",children:"User State Management"}),"\n",(0,s.jsx)(n.p,{children:"Handle user state changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const useUserState = () => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Update targeting when user state changes\n    window.moli.que.push(function(moliAdTag) {\n      if (user) {\n        moliAdTag.setTargeting('user_type', user.type);\n        moliAdTag.setTargeting('user_id', user.id);\n        moliAdTag.addLabel('authenticated');\n        \n        if (user.isPremium) {\n          moliAdTag.addLabel('premium');\n        }\n      } else {\n        moliAdTag.setTargeting('user_type', 'anonymous');\n        moliAdTag.addLabel('anonymous');\n      }\n    });\n  }, [user]);\n\n  return { user, setUser };\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"debounced-route-changes",children:"Debounced Route Changes"}),"\n",(0,s.jsx)(n.p,{children:"Prevent excessive ad requests during rapid navigation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction App() {\n  const location = useLocation();\n  const timeoutRef = useRef(null);\n\n  useEffect(() => {\n    // Clear previous timeout\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    // Debounce ad requests\n    timeoutRef.current = setTimeout(() => {\n      window.moli.que.push(function(moliAdTag) {\n        moliAdTag.requestAds();\n      });\n    }, 100); // 100ms delay\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [location]);\n\n  return <Routes />;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ad-slot-caching",children:"Ad Slot Caching"}),"\n",(0,s.jsx)(n.p,{children:"Cache ad slots to avoid unnecessary refreshes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const AdSlotCache = new Set();\n\nconst CachedAdSlot = ({ id, className }) => {\n  useEffect(() => {\n    if (!AdSlotCache.has(id)) {\n      window.moli.que.push(function(moliAdTag) {\n        moliAdTag.refreshAdSlot(id);\n      });\n      AdSlotCache.add(id);\n    }\n  }, [id]);\n\n  return <div id={id} className={className} />;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"route-change-errors",children:"Route Change Errors"}),"\n",(0,s.jsx)(n.p,{children:"Handle errors during route changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"const handleRouteChange = async () => {\n  try {\n    window.moli.que.push(function(moliAdTag) {\n      moliAdTag.requestAds();\n    });\n  } catch (error) {\n    console.error('Failed to request ads on route change:', error);\n    // Fallback: retry after delay\n    setTimeout(() => {\n      window.moli.que.push(function(moliAdTag) {\n        moliAdTag.requestAds();\n      });\n    }, 1000);\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ad-loading-errors",children:"Ad Loading Errors"}),"\n",(0,s.jsx)(n.p,{children:"Handle ad loading failures:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  window.moli.que.push(function(moliAdTag) {\n    moliAdTag.addEventListener('afterRequestAds', (event) => {\n      if (event.state === 'error') {\n        console.error('Ad request failed on route change');\n        // Implement fallback behavior\n      }\n    });\n    \n    moliAdTag.requestAds();\n  });\n}, [location]);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.p,{children:"Test SPA integration with Jest:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { render, screen } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\n// Mock Moli\nconst mockMoliAdTag = {\n  requestAds: jest.fn(),\n  refreshAdSlot: jest.fn(),\n  setTargeting: jest.fn(),\n  addLabel: jest.fn()\n};\n\nglobal.window.moli = {\n  que: []\n};\n\nbeforeEach(() => {\n  global.window.moli.que = [];\n  jest.clearAllMocks();\n});\n\ntest('requests ads on route change', () => {\n  render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  );\n\n  // Simulate route change\n  window.history.pushState({}, '', '/new-route');\n  window.dispatchEvent(new PopStateEvent('popstate'));\n\n  // Check that ads were requested\n  expect(global.window.moli.que.length).toBeGreaterThan(0);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsx)(n.p,{children:"Test with Cypress:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// cypress/integration/spa.spec.js\ndescribe('SPA Integration', () => {\n  it('should load ads on route change', () => {\n    cy.visit('/');\n    \n    // Check initial ads\n    cy.get('#header-ad').should('be.visible');\n    \n    // Navigate to new route\n    cy.visit('/about');\n    \n    // Check that ads are refreshed\n    cy.get('#header-ad').should('be.visible');\n    \n    // Verify ad requests were made\n    cy.window().then((win) => {\n      expect(win.moli.que.length).to.be.greaterThan(0);\n    });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-initialize-once",children:"1. Initialize Once"}),"\n",(0,s.jsx)(n.p,{children:"Initialize Moli only once at app startup:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// App.tsx\nuseEffect(() => {\n  // Only initialize once\n  if (!window.moli) {\n    window.moli = { que: [] };\n    window.moli.que.push(function(moliAdTag) {\n      moliAdTag.requestAds();\n    });\n  }\n}, []); // Empty dependency array\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-clean-up-ad-slots",children:"2. Clean Up Ad Slots"}),"\n",(0,s.jsx)(n.p,{children:"Clean up ad slots when components unmount:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\n  return () => {\n    // Clean up ad slot\n    const element = document.getElementById(id);\n    if (element) {\n      element.innerHTML = '';\n    }\n  };\n}, [id]);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-handle-loading-states",children:"3. Handle Loading States"}),"\n",(0,s.jsx)(n.p,{children:"Show loading states during ad requests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'const [adsLoading, setAdsLoading] = useState(false);\n\nuseEffect(() => {\n  setAdsLoading(true);\n  \n  window.moli.que.push(function(moliAdTag) {\n    moliAdTag.addEventListener(\'afterRequestAds\', (event) => {\n      setAdsLoading(false);\n    });\n    \n    moliAdTag.requestAds();\n  });\n}, [location]);\n\nreturn (\n  <div>\n    {adsLoading && <div className="loading-indicator" />}\n    <AdSlot id="header-ad" />\n  </div>\n);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-optimize-performance",children:"4. Optimize Performance"}),"\n",(0,s.jsx)(n.p,{children:"Use performance optimizations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Debounce rapid route changes\nconst debouncedRequestAds = useMemo(\n  () => debounce(() => {\n    window.moli.que.push(function(moliAdTag) {\n      moliAdTag.requestAds();\n    });\n  }, 100),\n  []\n);\n\nuseEffect(() => {\n  debouncedRequestAds();\n}, [location, debouncedRequestAds]);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ads not refreshing on route change:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check that SPA mode is enabled in configuration"}),"\n",(0,s.jsx)(n.li,{children:"Verify route change detection is working"}),"\n",(0,s.jsxs)(n.li,{children:["Ensure ",(0,s.jsx)(n.code,{children:"requestAds()"})," is called on route changes"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Duplicate ad requests:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check for multiple route change listeners"}),"\n",(0,s.jsx)(n.li,{children:"Verify debouncing is working correctly"}),"\n",(0,s.jsx)(n.li,{children:"Ensure cleanup is happening properly"}),"\n",(0,s.jsx)(n.li,{children:"Use the frequency capping module to add frequency caps on ad slots to have a safe guard for double rendering"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ad slots not appearing:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check that ad slot IDs match configuration"}),"\n",(0,s.jsx)(n.li,{children:"Verify components are mounting correctly"}),"\n",(0,s.jsx)(n.li,{children:"Check for CSS conflicts"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you have SPA integration working, explore these advanced topics:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/features/hooks",children:"Hooks"})," - Use hooks for custom SPA behavior"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/features/events",children:"Events"})," - Listen to ad loading events"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/features/targeting",children:"Targeting"})," - Advanced targeting for SPAs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/features/debugging",children:"Debugging"})," - Debug SPA-specific issues"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);