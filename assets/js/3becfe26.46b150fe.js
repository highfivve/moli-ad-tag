"use strict";(self.webpackChunkthe_publisher_ad_tag=self.webpackChunkthe_publisher_ad_tag||[]).push([[5951],{3630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"features/events","title":"Events","description":"Moli provides an event system that allows you to listen to important events during the ad loading lifecycle. This system enables you to react to ad request events, track performance, and integrate with external systems.","source":"@site/docs/features/events.md","sourceDirName":"features","slug":"/features/events","permalink":"/moli-ad-tag/docs/features/events","draft":false,"unlisted":false,"editUrl":"https://github.com/highfivve/moli-ad-tag/docs/features/events.md","tags":[],"version":"current","frontMatter":{"title":"Events"},"sidebar":"docs","previous":{"title":"Ad Unit Path Variables","permalink":"/moli-ad-tag/docs/features/ad-unit-path-variables"},"next":{"title":"ad-reload","permalink":"/moli-ad-tag/docs/modules/ad-reload"}}');var i=t(4848),r=t(8453);const a={title:"Events"},l=void 0,o={},d=[{value:"Overview",id:"overview",level:2},{value:"Available Events",id:"available-events",level:2},{value:"beforeRequestAds",id:"beforerequestads",level:3},{value:"afterRequestAds",id:"afterrequestads",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Adding Event Listeners",id:"adding-event-listeners",level:3},{value:"Removing Event Listeners",id:"removing-event-listeners",level:3},{value:"One-Time Event Listeners",id:"one-time-event-listeners",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Performance Tracking",id:"performance-tracking",level:3},{value:"Error Monitoring",id:"error-monitoring",level:3},{value:"Analytics Integration",id:"analytics-integration",level:3},{value:"Page View Correlation",id:"page-view-correlation",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Event Timing",id:"event-timing",level:2},{value:"beforeRequestAds Timing",id:"beforerequestads-timing",level:3},{value:"afterRequestAds Timing",id:"afterrequestads-timing",level:3},{value:"State Values",id:"state-values",level:2},{value:"Multiple Listeners",id:"multiple-listeners",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Single Page Application Support",id:"single-page-application-support",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Listener Registration",id:"listener-registration",level:3},{value:"Listener Functions",id:"listener-functions",level:3},{value:"Error Handling",id:"error-handling-1",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Available Methods",id:"available-methods",level:3},{value:"Event Types",id:"event-types",level:3},{value:"Listener Options",id:"listener-options",level:3},{value:"Configuration Notes",id:"configuration-notes",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Moli provides an event system that allows you to listen to important events during the ad loading lifecycle. This system enables you to react to ad request events, track performance, and integrate with external systems."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The event system helps you:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Monitor ad request lifecycle events"}),"\n",(0,i.jsx)(n.li,{children:"Track performance and timing"}),"\n",(0,i.jsx)(n.li,{children:"Integrate with analytics systems"}),"\n",(0,i.jsx)(n.li,{children:"React to ad loading states"}),"\n",(0,i.jsx)(n.li,{children:"Debug ad loading issues"}),"\n",(0,i.jsx)(n.li,{children:"Correlate page views with ad requests"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"available-events",children:"Available Events"}),"\n",(0,i.jsx)(n.h3,{id:"beforerequestads",children:"beforeRequestAds"}),"\n",(0,i.jsx)(n.p,{children:"Fired before ads are requested. This event provides access to the runtime configuration that will be used for the ad requests."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Event Data:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"{\n  runtimeConfig: MoliRuntimeConfig\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"afterrequestads",children:"afterRequestAds"}),"\n",(0,i.jsx)(n.p,{children:"Fired after ads have been requested and the ad tag has reached a final state."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Event Data:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"{\n  state: 'finished' | 'error' | 'spa-finished'\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.h3,{id:"adding-event-listeners",children:"Adding Event Listeners"}),"\n",(0,i.jsxs)(n.p,{children:["You can add event listeners using the ",(0,i.jsx)(n.code,{children:"addEventListener"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"window.moli = window.moli || { que: [] };\nwindow.moli.que.push(function(moliAdTag) {\n  // Listen to beforeRequestAds events\n  moliAdTag.addEventListener('beforeRequestAds', (event) => {\n    console.log('About to request ads with config:', event.runtimeConfig);\n  });\n\n  // Listen to afterRequestAds events\n  moliAdTag.addEventListener('afterRequestAds', (event) => {\n    console.log('Ads requested, final state:', event.state);\n  });\n\n  // Request ads\n  moliAdTag.requestAds();\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"removing-event-listeners",children:"Removing Event Listeners"}),"\n",(0,i.jsxs)(n.p,{children:["You can remove event listeners using the ",(0,i.jsx)(n.code,{children:"removeEventListener"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const beforeListener = (event) => {\n  console.log('Before request ads:', event.runtimeConfig);\n};\n\nconst afterListener = (event) => {\n  console.log('After request ads:', event.state);\n};\n\n// Add listeners\nmoliAdTag.addEventListener('beforeRequestAds', beforeListener);\nmoliAdTag.addEventListener('afterRequestAds', afterListener);\n\n// Remove listeners\nmoliAdTag.removeEventListener('beforeRequestAds', beforeListener);\nmoliAdTag.removeEventListener('afterRequestAds', afterListener);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"one-time-event-listeners",children:"One-Time Event Listeners"}),"\n",(0,i.jsx)(n.p,{children:"You can create event listeners that automatically remove themselves after being called once:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"moliAdTag.addEventListener('afterRequestAds', (event) => {\n  console.log('First ad request completed:', event.state);\n}, { once: true });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"performance-tracking",children:"Performance Tracking"}),"\n",(0,i.jsx)(n.p,{children:"Track the timing of ad requests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"let requestStartTime: number;\n\nmoliAdTag.addEventListener('beforeRequestAds', (event) => {\n  requestStartTime = performance.now();\n  console.log('Starting ad request at:', requestStartTime);\n});\n\nmoliAdTag.addEventListener('afterRequestAds', (event) => {\n  const requestEndTime = performance.now();\n  const duration = requestEndTime - requestStartTime;\n  \n  console.log('Ad request completed in:', duration, 'ms');\n  console.log('Final state:', event.state);\n  \n  // Send to analytics\n  analytics.track('ad_request_duration', {\n    duration,\n    state: event.state,\n    timestamp: Date.now()\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-monitoring",children:"Error Monitoring"}),"\n",(0,i.jsx)(n.p,{children:"Monitor for ad loading errors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"moliAdTag.addEventListener('afterRequestAds', (event) => {\n  if (event.state === 'error') {\n    console.error('Ad request failed');\n    \n    // Send error to monitoring service\n    errorReporting.captureException(new Error('Ad request failed'), {\n      tags: {\n        component: 'moli-ad-tag',\n        event: 'afterRequestAds'\n      },\n      extra: {\n        state: event.state,\n        timestamp: Date.now()\n      }\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"analytics-integration",children:"Analytics Integration"}),"\n",(0,i.jsx)(n.p,{children:"Integrate with analytics systems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"moliAdTag.addEventListener('beforeRequestAds', (event) => {\n  // Track that ads are being requested\n  analytics.track('ads_requested', {\n    timestamp: Date.now(),\n    adSlots: event.runtimeConfig.labels.length,\n    targeting: event.runtimeConfig.keyValues\n  });\n});\n\nmoliAdTag.addEventListener('afterRequestAds', (event) => {\n  // Track ad request completion\n  analytics.track('ads_completed', {\n    timestamp: Date.now(),\n    state: event.state,\n    success: event.state !== 'error'\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"page-view-correlation",children:"Page View Correlation"}),"\n",(0,i.jsx)(n.p,{children:"Correlate page views with ad requests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"let pageViewId: string;\n\n// Generate page view ID\npageViewId = generatePageViewId();\n\nmoliAdTag.addEventListener('beforeRequestAds', (event) => {\n  // Add page view correlation to runtime config\n  moliAdTag.setTargeting('page_view_id', pageViewId);\n  \n  // Track correlation\n  analytics.track('page_view_ad_request_correlation', {\n    pageViewId,\n    timestamp: Date.now(),\n    adSlots: event.runtimeConfig.labels.length\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,i.jsx)(n.p,{children:"Use events for debugging ad loading issues:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"moliAdTag.addEventListener('beforeRequestAds', (event) => {\n  console.group('Ad Request Debug Info');\n  console.log('Runtime Config:', event.runtimeConfig);\n  console.log('Labels:', event.runtimeConfig.labels);\n  console.log('Targeting:', event.runtimeConfig.keyValues);\n  console.log('Timestamp:', new Date().toISOString());\n  console.groupEnd();\n});\n\nmoliAdTag.addEventListener('afterRequestAds', (event) => {\n  console.group('Ad Request Result');\n  console.log('Final State:', event.state);\n  console.log('Success:', event.state !== 'error');\n  console.log('Timestamp:', new Date().toISOString());\n  console.groupEnd();\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"event-timing",children:"Event Timing"}),"\n",(0,i.jsx)(n.h3,{id:"beforerequestads-timing",children:"beforeRequestAds Timing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fired after configuration is complete"}),"\n",(0,i.jsx)(n.li,{children:"Fired before ad requests are made"}),"\n",(0,i.jsx)(n.li,{children:"DOM is ready at this point"}),"\n",(0,i.jsx)(n.li,{children:"Perfect for setting up targeting and labels"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"afterrequestads-timing",children:"afterRequestAds Timing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fired after all ad requests are complete"}),"\n",(0,i.jsx)(n.li,{children:"Fired regardless of success or failure"}),"\n",(0,i.jsx)(n.li,{children:"Useful for cleanup and analytics"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"state-values",children:"State Values"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"afterRequestAds"})," event provides different state values:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"'finished'"})})," - All ads loaded successfully (non-SPA mode)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"'spa-finished'"})})," - All ads loaded successfully (SPA mode)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"'error'"})})," - An error occurred during ad loading"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"multiple-listeners",children:"Multiple Listeners"}),"\n",(0,i.jsx)(n.p,{children:"You can add multiple listeners for the same event:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// First listener\nmoliAdTag.addEventListener('afterRequestAds', (event) => {\n  console.log('Listener 1: Ads completed with state:', event.state);\n});\n\n// Second listener\nmoliAdTag.addEventListener('afterRequestAds', (event) => {\n  analytics.track('ads_completed', { state: event.state });\n});\n\n// Third listener\nmoliAdTag.addEventListener('afterRequestAds', (event) => {\n  if (event.state === 'error') {\n    errorReporting.captureException(new Error('Ad request failed'));\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The event system has built-in error handling. If a listener throws an error, it won't prevent other listeners from executing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"moliAdTag.addEventListener('beforeRequestAds', (event) => {\n  // This error won't prevent other listeners from running\n  throw new Error('Something went wrong');\n});\n\nmoliAdTag.addEventListener('beforeRequestAds', (event) => {\n  // This listener will still execute\n  console.log('This listener runs even if the previous one failed');\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"single-page-application-support",children:"Single Page Application Support"}),"\n",(0,i.jsx)(n.p,{children:"In SPAs, events are fired for each page navigation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"moliAdTag.addEventListener('beforeRequestAds', (event) => {\n  console.log('Page navigation detected, requesting ads');\n  console.log('Current URL:', window.location.href);\n});\n\nmoliAdTag.addEventListener('afterRequestAds', (event) => {\n  if (event.state === 'spa-finished') {\n    console.log('SPA page navigation completed');\n    // Trigger page view tracking\n    analytics.track('spa_page_view', {\n      url: window.location.href,\n      title: document.title\n    });\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"listener-registration",children:"Listener Registration"}),"\n",(0,i.jsx)(n.p,{children:"Register listeners early in your setup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// \u2705 Good - Register listeners before configuration\nwindow.moli.que.push(function(moliAdTag) {\n  moliAdTag.addEventListener('beforeRequestAds', trackPerformance);\n  moliAdTag.addEventListener('afterRequestAds', trackCompletion);\n  moliAdTag.requestAds();\n});\n\n// \u274c Avoid - Register listeners after configuration\nwindow.moli.que.push(function(moliAdTag) {\n  moliAdTag.requestAds();\n  moliAdTag.addEventListener('beforeRequestAds', trackPerformance); // Too late!\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"listener-functions",children:"Listener Functions"}),"\n",(0,i.jsx)(n.p,{children:"Keep listener functions focused and lightweight:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// \u2705 Good - Focused listener functions\nconst trackPerformance = (event) => {\n  analytics.track('ad_request_start', {\n    timestamp: Date.now(),\n    adSlots: event.runtimeConfig.labels.length\n  });\n};\n\nconst trackCompletion = (event) => {\n  analytics.track('ad_request_complete', {\n    state: event.state,\n    success: event.state !== 'error'\n  });\n};\n\n// \u274c Avoid - Complex logic in listeners\nconst complexListener = (event) => {\n  // Too much logic in one listener\n  const userData = fetchUserData();\n  const pageData = analyzePage();\n  const targeting = calculateTargeting(userData, pageData);\n  // ... many more operations\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling-1",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Handle errors gracefully in listeners:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"moliAdTag.addEventListener('beforeRequestAds', (event) => {\n  try {\n    const userSegment = getUserSegment();\n    moliAdTag.setTargeting('user_segment', userSegment);\n  } catch (error) {\n    console.warn('Failed to set user segment:', error);\n    // Continue with default targeting\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,i.jsx)(n.p,{children:"Remove listeners when they're no longer needed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const performanceListener = (event) => {\n  // Track performance\n};\n\n// Add listener\nmoliAdTag.addEventListener('beforeRequestAds', performanceListener);\n\n// Later, remove listener to prevent memory leaks\nmoliAdTag.removeEventListener('beforeRequestAds', performanceListener);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"available-methods",children:"Available Methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addEventListener(event, listener, options?)"})," - Add an event listener"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"removeEventListener(event, listener)"})," - Remove an event listener"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For detailed API documentation, see the ",(0,i.jsx)(n.a,{href:"/api/types/moliRuntime/namespaces/MoliRuntime/interfaces/MoliTag",children:"MoliTag API reference"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"event-types",children:"Event Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type EventMap = {\n  beforeRequestAds: { runtimeConfig: MoliRuntimeConfig };\n  afterRequestAds: { state: 'finished' | 'error' | 'spa-finished' };\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"listener-options",children:"Listener Options"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface EventListenerOptions {\n  /**\n   * When true, the event listener will automatically be removed after it is invoked for the first time.\n   * @default false\n   */\n  readonly once?: boolean;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-notes",children:"Configuration Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Listeners must be registered before calling ",(0,i.jsx)(n.code,{children:"configure()"})," or ",(0,i.jsx)(n.code,{children:"requestAds()"})]}),"\n",(0,i.jsx)(n.li,{children:"Multiple listeners for the same event are supported"}),"\n",(0,i.jsx)(n.li,{children:"Listeners are called in the order they were registered"}),"\n",(0,i.jsx)(n.li,{children:"Errors in listeners don't prevent other listeners from executing"}),"\n",(0,i.jsx)(n.li,{children:"In SPA mode, events are fired for each page navigation"}),"\n",(0,i.jsx)(n.li,{children:"One-time listeners are automatically removed after execution"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);