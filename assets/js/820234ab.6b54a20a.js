"use strict";(self.webpackChunkthe_publisher_ad_tag=self.webpackChunkthe_publisher_ad_tag||[]).push([[7971],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),p=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,l=u(t,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,o(o({ref:e},l),{},{components:n})):r.createElement(f,o({ref:e},l))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=m;var u={};for(var s in e)hasOwnProperty.call(e,s)&&(u[s]=e[s]);u.originalType=t,u.mdxType="string"==typeof t?t:a,o[1]=u;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4412:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],u={id:"tcfapi.status.CmpStatus",title:"Enumeration: CmpStatus",sidebar_label:"CmpStatus",custom_edit_url:null},s=void 0,p={unversionedId:"api/enums/tcfapi.status.CmpStatus",id:"api/enums/tcfapi.status.CmpStatus",isDocsHomePage:!1,title:"Enumeration: CmpStatus",description:"tcfapi.status.CmpStatus",source:"@site/docs/api/enums/tcfapi.status.CmpStatus.md",sourceDirName:"api/enums",slug:"/api/enums/tcfapi.status.CmpStatus",permalink:"/moli-ad-tag/docs/api/enums/tcfapi.status.CmpStatus",editUrl:null,tags:[],version:"current",frontMatter:{id:"tcfapi.status.CmpStatus",title:"Enumeration: CmpStatus",sidebar_label:"CmpStatus",custom_edit_url:null},sidebar:"API",previous:{title:"TCPurpose",permalink:"/moli-ad-tag/docs/api/enums/tcfapi.responses.TCPurpose"},next:{title:"DisplayStatus",permalink:"/moli-ad-tag/docs/api/enums/tcfapi.status.DisplayStatus"}},l=[{value:"Enumeration members",id:"enumeration-members",children:[{value:"ERROR",id:"error",children:[]},{value:"LOADED",id:"loaded",children:[]},{value:"LOADING",id:"loading",children:[]},{value:"STUB",id:"stub",children:[]}]}],c={toc:l};function m(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../namespaces/tcfapi"},"tcfapi"),".",(0,i.kt)("a",{parentName:"p",href:"../namespaces/tcfapi.status"},"status"),".CmpStatus"),(0,i.kt)("p",null,"An enum representing all the possible statuses for the cmpStatus returned\nthrough the CMP API"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"readonly"))),(0,i.kt)("h2",{id:"enumeration-members"},"Enumeration members"),(0,i.kt)("h3",{id:"error"},"ERROR"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"ERROR")," = ",(0,i.kt)("inlineCode",{parentName:"p"},'"error"')),(0,i.kt)("p",null,"CMP is in an error state. A CMP shall not respond to any other API requests if this cmpStatus is present.\nA CMP may set this status if, for any reason, it is unable to perform the operations in compliance with the TCF."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"loaded"},"LOADED"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"LOADED")," = ",(0,i.kt)("inlineCode",{parentName:"p"},'"loaded"')),(0,i.kt)("p",null,"CMP is finished loading"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"loading"},"LOADING"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"LOADING")," = ",(0,i.kt)("inlineCode",{parentName:"p"},'"loading"')),(0,i.kt)("p",null,"CMP is loading"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"stub"},"STUB"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"STUB")," = ",(0,i.kt)("inlineCode",{parentName:"p"},'"stub"')),(0,i.kt)("p",null,"CMP not yet loaded \u2013 stub still in place"))}m.isMDXComponent=!0}}]);