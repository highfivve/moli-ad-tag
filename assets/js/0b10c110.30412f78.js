"use strict";(self.webpackChunkthe_publisher_ad_tag=self.webpackChunkthe_publisher_ad_tag||[]).push([[4681],{8453:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>a});var n=t(6540);const l={},i=n.createContext(l);function c(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),n.createElement(i.Provider,{value:s},e.children)}},9874:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases/BlocklistEntry","title":"Type Alias: BlocklistEntry","description":"BlocklistEntry: object","source":"@site/docs/api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases/BlocklistEntry.md","sourceDirName":"api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases","slug":"/api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases/BlocklistEntry","permalink":"/moli-ad-tag/docs/api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases/BlocklistEntry","draft":false,"unlisted":false,"editUrl":"https://github.com/highfivve/moli-ad-tag/docs/api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases/BlocklistEntry.md","tags":[],"version":"current","frontMatter":{},"sidebar":"API","previous":{"title":"Type Alias: Blocklist","permalink":"/moli-ad-tag/docs/api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases/Blocklist"},"next":{"title":"Type Alias: BlocklistProvider","permalink":"/moli-ad-tag/docs/api/types/moliConfig/namespaces/modules/namespaces/blocklist/type-aliases/BlocklistProvider"}}');var l=t(4848),i=t(8453);const c={},a="Type Alias: BlocklistEntry",o={},r=[{value:"Type declaration",id:"type-declaration",level:2},{value:"matchType",id:"matchtype",level:3},{value:"pattern",id:"pattern",level:3}];function d(e){const s={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"type-alias-blocklistentry",children:"Type Alias: BlocklistEntry"})}),"\n",(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"BlocklistEntry"}),": ",(0,l.jsx)(s.code,{children:"object"})]}),"\n"]}),"\n",(0,l.jsx)(s.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,l.jsx)(s.h3,{id:"matchtype",children:"matchType"}),"\n",(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"readonly"})," ",(0,l.jsx)(s.strong,{children:"matchType"}),": ",(0,l.jsx)(s.code,{children:'"regex"'})," | ",(0,l.jsx)(s.code,{children:'"contains"'})," | ",(0,l.jsx)(s.code,{children:'"exact"'})]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"Defines how the pattern should be matched against the url"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"regex"})," - transform the pattern into a regex and runs ",(0,l.jsx)(s.code,{children:"regex.test(url)"})]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"contains"})," - checks if the url contains the given pattern string"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.code,{children:"exact"})," - checks if the url exactly matches the given pattern string"]}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"pattern",children:"pattern"}),"\n",(0,l.jsxs)(s.blockquote,{children:["\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.code,{children:"readonly"})," ",(0,l.jsx)(s.strong,{children:"pattern"}),": ",(0,l.jsx)(s.code,{children:"string"})]}),"\n"]}),"\n",(0,l.jsx)(s.p,{children:"A regex pattern for the complete href of the page"})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);