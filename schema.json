{
  "$ref": "#/definitions/MoliConfig",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AdServer": {
      "enum": [
        "gam",
        "prebidjs"
      ],
      "type": "string"
    },
    "AdSlot": {
      "additionalProperties": false,
      "properties": {
        "a9": {
          "$ref": "#/definitions/headerbidding.A9AdSlotConfig",
          "description": "optional a9 configuration if this ad slot can also be used by a9"
        },
        "adUnitPath": {
          "description": "dfp adUnit path for this slot",
          "type": "string"
        },
        "behaviour": {
          "$ref": "#/definitions/behaviour.SlotLoading",
          "description": "configure how and when the slot should be loaded"
        },
        "domId": {
          "description": "id for the ad slot element",
          "type": "string"
        },
        "gpt": {
          "$ref": "#/definitions/gpt.GptAdSlotConfig",
          "description": "Supplementary gpt configuration. Gpt is always configured, regardless of the existence of this configuration."
        },
        "labelAll": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Conditionally select the ad unit based on labels. Labels are supplied by the sizeConfig object in the top level moli configuration.\n\nThe API and behaviour matches the prebid API.\n- [Configure-Responsive-Ads](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads)\n- [Conditional Ad Units](https://prebid.org/dev-docs/conditional-ad-units.html)\n- [Size Mapping](https://prebid.org/dev-docs/examples/size-mapping.html)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "passbackSupport": {
          "description": "If true this ad slot will be refreshed if a window.postMessage event is being sent from a creative identifying the ad slot by domId. In additional key value `passback:true` will be set indicating this is a passback request. The rest of the key-values will be untouched keeping the prebid / a9 auction key-values.\n\n\n## Example creative snippet\n\nThis is an example of how a passback function could look like in a creative. Note that you can either use the `adUnitPath` or the `domId` of the slot.\n\n`adUnitPath` is not yet fully supported, when using variables in the ad unit path.\n\n``` var passbackCallback = function() {   var request = JSON.stringify({     type: 'passback',     adUnitPath: '%%ADUNIT%%' ,     passbackOrigin: '[ADVERTISER-NAME]'   });   try {     // first try to post a message on the top most window     window.top.postMessage(request, '*');   } catch (_) {     // best-effort postMessage     window.postMessage(request, '*');   } } ```\n\nDefault is `false`",
          "type": "boolean"
        },
        "position": {
          "$ref": "#/definitions/IPosition",
          "description": "Configure the ad slot position\n\n- `in-page` is the standard display ad\n- `out-of-page` uses the `defineOutOfPageSlot` API\n- `out-of-page-interstitial` - `googletag.enums.OutOfPageFormat.INTERSTITIAL`\n- `out-of-page-top-anchor` - `googletag.enums.OutOfPageFormat.TOP_ANCHOR`\n- `out-of-page-bottom-anchor` - `googletag.enums.OutOfPageFormat.BOTTOM_ANCHOR`"
        },
        "prebid": {
          "$ref": "#/definitions/headerbidding.PrebidAdSlotConfigProvider",
          "description": "an optional prebid configuration if this ad slot can also be used by prebid SSPs"
        },
        "sizeConfig": {
          "description": "Size configuration to support \"responsive\" ads.\n\nThe implementation matches the prebid.js specification for responsive ads. However, this information is not passed to prebid. The ad tag already takes care of filtering sizes.",
          "items": {
            "$ref": "#/definitions/SizeConfigEntry"
          },
          "type": "array"
        },
        "sizes": {
          "description": "the sizes for this ad slot",
          "items": {
            "$ref": "#/definitions/GoogleAdManagerSlotSize"
          },
          "type": "array"
        }
      },
      "required": [
        "domId",
        "adUnitPath",
        "sizes",
        "position",
        "behaviour",
        "sizeConfig"
      ],
      "type": "object"
    },
    "AdUnitPathVariables": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Add targeting information from the ad tag. Usually these are static values. Dynamic values should be added via the MoliTag API `setTargeting(key, value)` or `addLabel(label)`.",
      "type": "object"
    },
    "CSSDeletionMethod": {
      "additionalProperties": false,
      "description": "== Cleanup Module ==\n\nCleans up special formats if enabled (on user navigation and ad reload), especially useful for SPAs.\n\nThe configs can either provide CSS selectors of the html elements that are part of the special/out-of-page formats and should be deleted or JS as a string that will be evaluated by the module in order to remove these elements.",
      "properties": {
        "cssSelectors": {
          "description": "The CSS selectors of the html elements in the DOM that should be removed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "cssSelectors"
      ],
      "type": "object"
    },
    "CleanupConfig": {
      "additionalProperties": false,
      "properties": {
        "bidder": {
          "$ref": "#/definitions/prebidjs.BidderCode",
          "description": "The bidder that offers the special format."
        },
        "deleteMethod": {
          "anyOf": [
            {
              "$ref": "#/definitions/CSSDeletionMethod"
            },
            {
              "$ref": "#/definitions/JSDeletionMethod"
            }
          ],
          "description": "The method how the special format should be cleaned up."
        },
        "domId": {
          "description": "The domId of the slot on which the special format runs.",
          "type": "string"
        }
      },
      "required": [
        "bidder",
        "domId",
        "deleteMethod"
      ],
      "type": "object"
    },
    "GoogleAdManagerKeyValueMap": {
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          {
            "not": {}
          }
        ]
      },
      "description": "KeyValue map. Last insert wins.",
      "type": "object"
    },
    "GoogleAdManagerSlotSize": {
      "anyOf": [
        {
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        {
          "const": "fluid",
          "type": "string"
        }
      ]
    },
    "IPosition": {
      "enum": [
        "in-page",
        "out-of-page",
        "out-of-page-interstitial",
        "out-of-page-top-anchor",
        "out-of-page-bottom-anchor"
      ],
      "type": "string"
    },
    "JSDeletionMethod": {
      "additionalProperties": false,
      "properties": {
        "jsAsString": {
          "description": "JavaScript code as a string that will be executed as given (and most likely deletes the html elements of the special format).",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "jsAsString"
      ],
      "type": "object"
    },
    "LabelSizeConfigEntry": {
      "additionalProperties": false,
      "properties": {
        "labelsSupported": {
          "description": "labels that are available if the media query matches",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mediaQuery": {
          "description": "media query that must match if the labels are applicable",
          "type": "string"
        }
      },
      "required": [
        "mediaQuery",
        "labelsSupported"
      ],
      "type": "object"
    },
    "MoliConfig": {
      "additionalProperties": false,
      "description": "## Moli Configuration\n\nContains the configuration for the ad tag that is served from a backend.",
      "properties": {
        "a9": {
          "$ref": "#/definitions/headerbidding.A9Config",
          "description": "Amazon A9 headerbidding configuration"
        },
        "adServer": {
          "$ref": "#/definitions/AdServer",
          "description": "default is `gam`"
        },
        "buckets": {
          "$ref": "#/definitions/bucket.GlobalBucketConfig",
          "description": "Configure bucketing behaviour"
        },
        "consent": {
          "$ref": "#/definitions/consent.ConsentConfig"
        },
        "domain": {
          "description": "Set the domain on which this ad tag runs. This should be the \"top private domain\", which is the `subdomain` + `public prefix`. The notion \"top private domain\" comes from the Google Guava library.\n\nIn general, it's recommended to set the domain in the ad tag configuration. As a fallback, the ad tag tries to extract the top private domain, but with a very limited implementation. This also fails if the ad tag is called on other domains such as google.transl or in iframe integrations.\n\n## Ad Unit Path Variables\n\nThe `domain` will be used in the `adUnitPathVariables`. A domain set via `setAdUnitPathVariables` takes precedences over the ad tag config. If neither `domain` is set in the config, nor provided via `setAdUnitPathVariables`, we make a best effort guess via `window.location.hostname`.\n\n## Label\n\nIf set, the `domain` will also be added as a label.\n\n## Why ?\n\nThe `domain` is part of the ad unit path and used for targeting certain bidders that work on a per-domain basis.\n\n## Examples\n\n- `example.com` - the most common domain\n- `example.co.uk` - some country TLDs span the last two segments\n- `myblog.github.io` - github.io is a public suffix and subdomains are separate domains\n- `my-sub-domain.my-domain.com` - my domain is not in the publc_suffix_list.dat , but I still use subdomains for different sites",
          "type": "string"
        },
        "globalAuctionContext": {
          "$ref": "#/definitions/auction.GlobalAuctionContextConfig",
          "description": "Configure optimization through the global auction context"
        },
        "labelSizeConfig": {
          "description": "Label configuration to support \"responsive\" ads. This is an alternative solution to custom () => DfpSlotSize[] functions and is taken from prebid.js.\n\nhttps://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads",
          "items": {
            "$ref": "#/definitions/LabelSizeConfigEntry"
          },
          "type": "array"
        },
        "modules": {
          "$ref": "#/definitions/modules.ModulesConfig",
          "description": "## Module configuration\n\nOptional module configuration. Every module must be enabled individually and has its own configuration. A module may the access its configuration via the `moli` configuration. This is very similar to how prebid handles module configuration."
        },
        "prebid": {
          "$ref": "#/definitions/headerbidding.PrebidConfig",
          "description": "optional prebid configuration"
        },
        "schain": {
          "$ref": "#/definitions/schain.SupplyChainConfig",
          "description": "supply chain object"
        },
        "slots": {
          "description": "all possible ad slots",
          "items": {
            "$ref": "#/definitions/AdSlot"
          },
          "type": "array"
        },
        "spa": {
          "$ref": "#/definitions/SinglePageAppConfig",
          "description": "Optional configuration for single page"
        },
        "targeting": {
          "$ref": "#/definitions/Targeting",
          "description": "optional key-value targeting for DFP"
        },
        "version": {
          "description": "The version of the ad tag. This is used to identify the version of the ad tag that is served to the client. This is useful for debugging purposes.",
          "type": "string"
        }
      },
      "required": [
        "slots",
        "schain"
      ],
      "type": "object"
    },
    "MoliRuntime.yield_optimization.PriceRule": {
      "additionalProperties": false,
      "properties": {
        "floorprice": {
          "description": "The floor price CPM in EUR if available.",
          "type": "number"
        },
        "main": {
          "description": "`true` if this is the main group, which shouldn't be selected for testing.\n\nIf `false` as key-value can be applied to only select the test cohorts.",
          "type": "boolean"
        },
        "model": {
          "description": "The model used to determine the price rule\n\n- `static`: price rules cohorts in A/B test\n- `ml`: super clever machine learning\n- `fixed`: 100% of the traffic gets this fixed price rule\n\nIf none is provided `static` is used as a fallback",
          "enum": [
            "static",
            "ml",
            "fixed"
          ],
          "type": "string"
        },
        "priceRuleId": {
          "description": "Unique identifier for a pricing rule. This is will be sent as a key_value `upr_id` per ad unit and will trigger the matching unified pricing rule in Google Ad Manager.",
          "type": "number"
        }
      },
      "required": [
        "priceRuleId",
        "floorprice",
        "main"
      ],
      "type": "object"
    },
    "SinglePageAppConfig": {
      "additionalProperties": false,
      "description": "Additional configuration for single page application publishers.",
      "properties": {
        "destroyAllAdSlots": {
          "default": true,
          "description": "If set to `false`, `requestAds` will not destroy all existing ad slots, but only the ones being requested.\n\nUse with caution and test properly.\n\n## Use cases\n\nThis setting can be used for publishers that have more \"static\" ad slots, like mobile sticky, footer ad or skyscraper that should not be destroyed on every page navigation and that have users that navigation a lot on the page, e.g. swiping through images or profiles. With this setting the more persistent ad slots are refreshed through ad reload or timed by the publisher, while other content positions are refreshed on navigation.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Set to true if this publisher has a single page application.",
          "type": "boolean"
        },
        "validateLocation": {
          "default": true,
          "description": "If set to `href`\n- the ad tag will only allow one `requestAds` call per `href`\n- requires `moli.requestAds()` to be called once per page, otherwise `moli.refreshAdSlot` will queue calls\n\nAll available options are:\n- `href` - the ad tag will only allow one `requestAds` call per `href`\n- `path` - the ad tag will only allow one `requestAds` call per `path`\n- `none` - the ad tag will allow multiple `requestAds` calls\n\n## Use cases\n\nThe default is `true` to ensure that subsequent `refreshAdSlot` calls are queued and not executed, if the URL has already changed. This ensures that the `requestAds()` call has cleaned up all ad slots and state before loading new ones.\n\nHowever, there are publishers that change the URL, e.g. for putting filter settings into the query and do not call `moli.requestAds()`, because that's not a page change.",
          "enum": [
            "href",
            "path",
            "none"
          ],
          "type": "string"
        }
      },
      "required": [
        "enabled",
        "validateLocation"
      ],
      "type": "object"
    },
    "SizeConfigEntry": {
      "additionalProperties": false,
      "description": "## SizeConfig entry\n\nConfigure sizes based on media queries for a single `IAdSlot`.\n\nThis is the most complex part of a publisher ad tag setup. The size config defines\n\n- if an ad slot is loaded\n- what sizes are requested\n\nThis slot only supports the `mediaQuery` and `sizesSupported` property. `labels` can only be defined globally as these can and should always be unique, while the `sizesSupported` may overlap due to overlapping media queries.\n\nExample for overlapping configuration:\n\n```typescript [{   // mobile devices support a medium rectangle   mediaQuery: (max-width: 767px),   sizesSupported: [[300,250]] }, {   // desktop sidebar supports medium rectangle   mediaQuery: (min-width: 768px),   sizesSupported: [[300,250]] }] ```\n\nThis result in `[[300,250]]` being always supported, which may not be something you want.\n\n### Using labels\n\nIf you have the same slot on different page types with a different layout you can differentation size configs via two properites\n\n- `labelAll` - all labels need to be present if this size config should be applied\n- `labelNone` - none of the labels must be present if this size config should be applied\n\n```typescript [{   // mobile devices support a medium rectangle   mediaQuery: (max-width: 767px),   labelAll: ['homepage'],   sizesSupported: [[728,90]] }, {   // desktop sidebar supports medium rectangle   mediaQuery: (min-width: 768px)   labelNone: ['homepage']   sizesSupported: [[728,90], [900,250]] }] ```\n\n## Prebid API\n\nThe API is identical to the Prebid size config feature. However, we do not pass the size config down to prebid as we already apply the logic at a higher level. We only pass the `labels` to the`requestBids({ labels })` call. Sizes are already filtered.",
      "properties": {
        "labelAll": {
          "description": "optional array of labels. All labels must be present if the sizes should be applied",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelNone": {
          "description": "optional array of labels. All labels must **not** be present if the sizes should be applied",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mediaQuery": {
          "description": "media query that must match if the sizes are applicable",
          "type": "string"
        },
        "sizesSupported": {
          "description": "static sizes that are support if the media query matches",
          "items": {
            "$ref": "#/definitions/GoogleAdManagerSlotSize"
          },
          "type": "array"
        }
      },
      "required": [
        "mediaQuery",
        "sizesSupported"
      ],
      "type": "object"
    },
    "SupplyChainObject.ISupplyChainNode": {
      "additionalProperties": false,
      "properties": {
        "asi": {
          "description": "The canonical domain name of the SSP, Exchange, Header Wrapper, etc system that bidders connect to. This may be the operational domain of the system, if that is different than the parent corporate domain, to facilitate WHOIS and reverse IP lookups to establish clear ownership of the delegate system.\n\nThis should be the same value as used to identify sellers in an ads.txt file if one exists.",
          "type": "string"
        },
        "domain": {
          "description": "The business domain name of the entity represented by this node. This value is optional and should NOT be included if it exists in the advertising system’s sellers.json file.",
          "type": "string"
        },
        "ext": {
          "description": "Placeholder for advertising-system specific extensions to this object."
        },
        "hp": {
          "description": "Indicates whether this node will be involved in the flow of payment for the inventory. When set to 1, the advertising system in the asi field pays the seller in the sid field, who is responsible for paying the previous node in the chain. When set to 0, this node is not involved in the flow of payment for the inventory.\n\nFor version 1.0 of SupplyChain, this property should always be 1. It is explicitly required to be included as it is expected that future versions of the specification will introduce non-payment handling nodes. Implementers should ensure that they support this field and propagate it onwards when constructing SupplyChain objects in bid requests sent to a downstream advertising system.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        },
        "name": {
          "description": "The name of the company (the legal entity) that is paid for inventory transacted under the given seller_id. This value is optional and should NOT be included if it exists in the advertising system’s sellers.json file.",
          "type": "string"
        },
        "rid": {
          "description": "The OpenRTB RequestId of the request as issued by this seller.",
          "type": "string"
        },
        "sid": {
          "description": "The identifier associated with the seller or reseller account within the advertising system. This must contain the same value used in transactions (i.e. OpenRTB bid requests) in the field specified by the SSP/exchange. Typically, in OpenRTB, this is publisher.id. For OpenDirect it is typically the publisher’s organization ID.Should be limited to 64 characters in length.",
          "type": "string"
        }
      },
      "required": [
        "asi",
        "sid",
        "hp"
      ],
      "type": "object"
    },
    "SupplyChainObject.ISupplyChainObject": {
      "additionalProperties": false,
      "properties": {
        "complete": {
          "description": "Flag indicating whether the chain contains all nodes involved in the transaction leading back to the owner of the site, app or other medium of the inventory, where 0 = no, 1 = yes.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        },
        "ext": {
          "description": "Placeholder for advertising-system specific extensions to this object."
        },
        "nodes": {
          "description": "Array of SupplyChainNode objects in the order of the chain. In a complete supply chain, the first node represents the initial advertising system and seller ID involved in the transaction, i.e. the owner of the site, app, or other medium. In an incomplete supply chain, it represents the first known node. The last node represents the entity sending this bid request.",
          "items": {
            "$ref": "#/definitions/SupplyChainObject.ISupplyChainNode"
          },
          "type": "array"
        },
        "ver": {
          "const": "1.0",
          "description": "Version of the supply chain specification in use, in the format of “major.minor”. For example, for version 1.0 of the spec, use the string “1.0”.",
          "type": "string"
        }
      },
      "required": [
        "ver",
        "complete",
        "nodes"
      ],
      "type": "object"
    },
    "Targeting": {
      "additionalProperties": false,
      "properties": {
        "adManagerExcludes": {
          "description": "A list of key-value keys that should not be sent to the ad manager. This setting is not yet configurable via API as this should be static and defined in the ad tag.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "adUnitPathVariables": {
          "$ref": "#/definitions/AdUnitPathVariables",
          "description": "ad unit path variables"
        },
        "keyValues": {
          "$ref": "#/definitions/GoogleAdManagerKeyValueMap",
          "description": "static or supplied key-values"
        },
        "labels": {
          "description": "additional labels. Added in addition to the ones created by the sizeConfig.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "keyValues"
      ],
      "type": "object"
    },
    "apstag.Currency": {
      "enum": [
        "USD",
        "EUR"
      ],
      "type": "string"
    },
    "auction.AdRequestThrottlingConfig": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "enable or disable this feature",
          "type": "boolean"
        },
        "throttle": {
          "description": "the time in seconds that has to pass before a slot can be requested again",
          "type": "number"
        }
      },
      "required": [
        "enabled",
        "throttle"
      ],
      "type": "object"
    },
    "auction.BidderDisablingConfig": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "enable or disable this feature",
          "type": "boolean"
        },
        "minBidRequests": {
          "description": "define a minimum number of bid requests sent by a bidder before it can be deactivated",
          "type": "number"
        },
        "minRate": {
          "description": "minimum bid rate for a bidder to be disabled",
          "type": "number"
        },
        "reactivationPeriod": {
          "description": "milliseconds until a bidder becomes active again",
          "type": "number"
        }
      },
      "required": [
        "enabled",
        "minRate",
        "minBidRequests",
        "reactivationPeriod"
      ],
      "type": "object"
    },
    "auction.GlobalAuctionContextConfig": {
      "additionalProperties": false,
      "properties": {
        "adRequestThrottling": {
          "$ref": "#/definitions/auction.AdRequestThrottlingConfig",
          "description": "Throttle ad requests for a slot to avoid flooding the ad server. This is a general safeguard and should always be active. Mostly single page apps benefit from this, if a dev misuses `React.useEffect` or similar implementations that constantly re-render and thus trigger ad requests."
        },
        "biddersDisabling": {
          "$ref": "#/definitions/auction.BidderDisablingConfig",
          "description": "Disable bidders that lack auction participation"
        }
      },
      "type": "object"
    },
    "behaviour.Backfill": {
      "additionalProperties": false,
      "description": "This loading behaviour describes slots that are loaded through a backfill integration. A backfill slot is never loaded by default and needs to be refreshed manually along with the backfill option set. This is neccessary to differentiate between slots that are loaded manually and slots that are loaded through a backfill integration.",
      "properties": {
        "bucket": {
          "description": "Defines a bucket in which this slot should be loaded. This allows to publishers to configured a set of ad slots that should run in a separate auction. This can have positive revenue impacts on some prebid partners that bid poorly if too many placements are requested at once.\n\nEven though this property is available on all loading behaviours only `eager` have an effect as these are loaded immediately.\n\nAll lazy slots are loaded in a separate auction anyway.\n\nFor slots with a `manual` loading behaviour it's the publishers responsibility to load those in the proper buckets.",
          "type": "string"
        },
        "loaded": {
          "const": "backfill",
          "type": "string"
        }
      },
      "required": [
        "loaded"
      ],
      "type": "object"
    },
    "behaviour.Eager": {
      "additionalProperties": false,
      "description": "An ad slot which is requested during page load. This is the standard behaviour.",
      "properties": {
        "bucket": {
          "description": "Defines a bucket in which this slot should be loaded. This allows to publishers to configured a set of ad slots that should run in a separate auction. This can have positive revenue impacts on some prebid partners that bid poorly if too many placements are requested at once.\n\nEven though this property is available on all loading behaviours only `eager` have an effect as these are loaded immediately.\n\nAll lazy slots are loaded in a separate auction anyway.\n\nFor slots with a `manual` loading behaviour it's the publishers responsibility to load those in the proper buckets.",
          "type": "string"
        },
        "loaded": {
          "const": "eager",
          "type": "string"
        }
      },
      "required": [
        "loaded"
      ],
      "type": "object"
    },
    "behaviour.Infinite": {
      "additionalProperties": false,
      "description": "The one infinite ad slot whose configuration will be copied if the `moli.refreshInfiniteAdSlot` API is triggered.\n\nThis is mainly the case in combination with the lazy-loading module which needs a CSS selector to identify the ad slots that should be lazily loaded PLUS get an automatic sequential numbering.\n\nTherefore, the `selector` configured here needs to be used in the lazy-loading module configuration. The module looks for fitting HTML elements in the whole document of the browser window and refreshes them lazily using the configuration of the 'infinite' slot.\n\nAlso, it manages the moli debugger's display of how many infinite slots with the given selector are rendered at the moment.\n\nValid examples (every CSS selector can be used):\n\n```js {   loaded: 'infinite',   selector: '.ad-infinite' } ``` or\n\n```js {   loaded: 'infinite',   selector: '[data-js=\"ad-infinite\"]' } ````",
      "properties": {
        "bucket": {
          "description": "Defines a bucket in which this slot should be loaded. This allows to publishers to configured a set of ad slots that should run in a separate auction. This can have positive revenue impacts on some prebid partners that bid poorly if too many placements are requested at once.\n\nEven though this property is available on all loading behaviours only `eager` have an effect as these are loaded immediately.\n\nAll lazy slots are loaded in a separate auction anyway.\n\nFor slots with a `manual` loading behaviour it's the publishers responsibility to load those in the proper buckets.",
          "type": "string"
        },
        "loaded": {
          "const": "infinite",
          "type": "string"
        },
        "selector": {
          "type": "string"
        }
      },
      "required": [
        "loaded",
        "selector"
      ],
      "type": "object"
    },
    "behaviour.Manual": {
      "additionalProperties": false,
      "description": "An ad slot which must be triggered via the `moli.refreshAdSlot` API.",
      "properties": {
        "bucket": {
          "description": "Defines a bucket in which this slot should be loaded. This allows to publishers to configured a set of ad slots that should run in a separate auction. This can have positive revenue impacts on some prebid partners that bid poorly if too many placements are requested at once.\n\nEven though this property is available on all loading behaviours only `eager` have an effect as these are loaded immediately.\n\nAll lazy slots are loaded in a separate auction anyway.\n\nFor slots with a `manual` loading behaviour it's the publishers responsibility to load those in the proper buckets.",
          "type": "string"
        },
        "loaded": {
          "const": "manual",
          "type": "string"
        }
      },
      "required": [
        "loaded"
      ],
      "type": "object"
    },
    "behaviour.SlotLoading": {
      "anyOf": [
        {
          "$ref": "#/definitions/behaviour.Eager"
        },
        {
          "$ref": "#/definitions/behaviour.Manual"
        },
        {
          "$ref": "#/definitions/behaviour.Infinite"
        },
        {
          "$ref": "#/definitions/behaviour.Backfill"
        }
      ],
      "description": "all available slot loading behaviours."
    },
    "bucket.BucketConfig": {
      "additionalProperties": false,
      "properties": {
        "timeout": {
          "description": "timeout used for prebid / a9 requests in this bucket",
          "type": "number"
        }
      },
      "required": [
        "timeout"
      ],
      "type": "object"
    },
    "bucket.BucketConfigMap": {
      "additionalProperties": {
        "$ref": "#/definitions/bucket.BucketConfig"
      },
      "type": "object"
    },
    "bucket.GlobalBucketConfig": {
      "additionalProperties": false,
      "description": "## Bucket config\n\nGeneral settings for ad slot loading in buckets.\n\n## Bucket use cases\n\nThere are several use cases\n\n### Bidder performance\n\nThere are bidders (e.g. IndexExchange, Yieldlab) that have a better performance if a single request contains only a small amount of placement ids. Buckets allow the publisher to group ad slots together and run in a separate auction.\n\n### Above and below the fold\n\nIt's possible to bucket ad slots with higher priority. NOTE: there's no feature for delay or prioritization yet!",
      "properties": {
        "bucket": {
          "$ref": "#/definitions/bucket.BucketConfigMap",
          "description": "to customize the timeout per bucket, which overrides the Prebid's/A9 timeout."
        },
        "enabled": {
          "description": "if set to true, ad slots will be loaded in buckets as specified in the ad slot configuration.\n\nDefault: false",
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object"
    },
    "consent.ConsentConfig": {
      "additionalProperties": false,
      "description": "Configuration additional consent configuration",
      "properties": {
        "disableLegitimateInterest": {
          "description": "If set to `true` ad requests will be aborted when there's only legitimate interest established for at least one purpose.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Disables consent handling the ad tag. This has a handful of use cases\n\n1. Debugging and testing, when the CMP has issues 2. Disable for regions without data privacy legislation\n\nWhen disabled, moli will provide default values for\n\n* the `tcData` object in the ad request context. `gdprApplies` will be `0`",
          "type": "boolean"
        },
        "useLimitedAds": {
          "default": "`true`",
          "description": "If set to `false`, standard `gpt.js` will be loaded and not privacy configuration is set.\n\nFrom the google documentation examples\n\n> In order to manually control limited, you must load GPT from the limited ads URL. The version of GPT served > from this URL contains additional safeguards against accessing client-side storage by default. To accomplish > this, certain library operations are delayed until after the first call to display(), leading to a slight > decrease in performance compared to the standard version of GPT.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "gpt.GptAdSlotConfig": {
      "additionalProperties": false,
      "description": "## Gpt ad slot configuration",
      "properties": {
        "collapseEmptyDiv": {
          "description": "Sets whether the slot div should be hidden when there is no ad in the slot. Defaults to true.\n\nCorrelates directly to googletag.IAdSlot.setCollapseEmptyDiv().",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "headerbidding.A9AdSlotConfig": {
      "additionalProperties": false,
      "description": "## A9 ad slot configuration\n\nMost of the a9 configuration is derived from the [[IAdSlot]] definition that provides the configuration.\n\n- `slotID` - is defined by the slot `domId`\n- `slotName` - is defined by the slot `adUnitPath`\n- `sizes` - is defined by the slot `sizes`",
      "properties": {
        "labelAll": {
          "description": "Filter ad slot based on the given labels",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Filter ad slot based on the given labels",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mediaType": {
          "description": "Optional media type (default to display)",
          "enum": [
            "display",
            "video"
          ],
          "type": "string"
        },
        "slotNamePathDepth": {
          "$ref": "#/definitions/headerbidding.A9SlotNamePathDepth",
          "description": "Optional configuration of the maximum depth for the slotName path of this adSlot. (overrides the value in the global a9 config)"
        }
      },
      "type": "object"
    },
    "headerbidding.A9Config": {
      "additionalProperties": false,
      "properties": {
        "cmpTimeout": {
          "description": "timeout for the cmp provider to return a consent string",
          "type": "number"
        },
        "enableFloorPrices": {
          "description": "If set to true the yield optimization floor price will be sent to amazon.\n\ndefault: false",
          "type": "boolean"
        },
        "floorPriceCurrency": {
          "$ref": "#/definitions/apstag.Currency",
          "description": "Configure the floor price currency. Will be mandatory once the feature is out of beta."
        },
        "pubID": {
          "description": "publisher ID",
          "type": "string"
        },
        "publisherAudience": {
          "$ref": "#/definitions/headerbidding.A9PublisherAudienceConfig",
          "description": "Configure the Amazon _Publisher Audiences_ feature."
        },
        "schainNode": {
          "$ref": "#/definitions/SupplyChainObject.ISupplyChainNode",
          "description": "Supply Chain Object for Amazon TAM"
        },
        "scriptUrl": {
          "description": "Defaults to //c.amazon-adsystem.com/aax2/apstag.js",
          "type": "string"
        },
        "slotNamePathDepth": {
          "$ref": "#/definitions/headerbidding.A9SlotNamePathDepth",
          "description": "Configure the maximum depth for all slotName paths in a9 requests."
        },
        "supportedSizes": {
          "description": "all sizes that requests will be made for and are supported by a9.\n\ndefault: requesting all sizes that are defined in the adSlot configuration.",
          "items": {
            "$ref": "#/definitions/GoogleAdManagerSlotSize"
          },
          "type": "array"
        },
        "timeout": {
          "description": "bids timeout for a9",
          "type": "number"
        }
      },
      "required": [
        "pubID",
        "timeout",
        "cmpTimeout",
        "schainNode"
      ],
      "type": "object"
    },
    "headerbidding.A9PublisherAudienceConfig": {
      "additionalProperties": false,
      "description": "## Amazon Publisher Audience\n\nAllow Amazon to target on hashed user email addresses when consent is given.",
      "properties": {
        "enabled": {
          "description": "enabled or disable",
          "type": "boolean"
        },
        "sha256Email": {
          "description": "user email address hashed with SHA256",
          "type": "string"
        }
      },
      "required": [
        "enabled",
        "sha256Email"
      ],
      "type": "object"
    },
    "headerbidding.A9SlotNamePathDepth": {
      "description": "The maximum depth of the adUnitPath for a9 bid requests.",
      "enum": [
        3,
        4,
        5
      ],
      "type": "number"
    },
    "headerbidding.BidderSupplyChainNode": {
      "additionalProperties": false,
      "properties": {
        "appendNode": {
          "description": "if true the `node` will be added to the supply chain configuration.",
          "type": "boolean"
        },
        "bidder": {
          "$ref": "#/definitions/prebidjs.BidderCode"
        },
        "node": {
          "$ref": "#/definitions/SupplyChainObject.ISupplyChainNode",
          "description": "The bidder specific supply chain node"
        }
      },
      "required": [
        "bidder",
        "node",
        "appendNode"
      ],
      "type": "object"
    },
    "headerbidding.PrebidAdSlotConfig": {
      "additionalProperties": false,
      "description": "Configuration for a prebid enabled ad slot",
      "properties": {
        "adUnit": {
          "$ref": "#/definitions/prebidjs.IAdUnit",
          "description": "bids configuration\n\nhttps://prebid.org/dev-docs/publisher-api-reference.html#addAdUnits-AdUnitProperties"
        }
      },
      "required": [
        "adUnit"
      ],
      "type": "object"
    },
    "headerbidding.PrebidAdSlotConfigProvider": {
      "anyOf": [
        {
          "$ref": "#/definitions/headerbidding.PrebidAdSlotConfig"
        },
        {
          "items": {
            "$ref": "#/definitions/headerbidding.PrebidAdSlotConfig"
          },
          "type": "array"
        }
      ],
      "description": "A `PrebidAdSlotConfig` can either be created\n\n- as a static value\n- from a function which takes a `PrebidAdSlotContext`\n\nAn ad slot config can either be a single value or an array of values. Prebid merges those multiple definitions back into one. This allows size configuration hacks, e.g. for the xaxis prebid integration."
    },
    "headerbidding.PrebidConfig": {
      "additionalProperties": false,
      "properties": {
        "bidderSettings": {
          "$ref": "#/definitions/prebidjs.IBidderSettings",
          "description": "optional bidder settings"
        },
        "config": {
          "$ref": "#/definitions/prebidjs.IPrebidJsConfig",
          "description": "https://prebid.org/dev-docs/publisher-api-reference.html#module_pbjs.setConfig"
        },
        "ephemeralAdUnits": {
          "default": "is false",
          "description": "if set to true the ad units will not be added via `pbjs.addAdUnits`, but created as ephemeral ad units each time an auction is triggered.",
          "type": "boolean"
        },
        "failsafeTimeout": {
          "default": "auction timeout + 2000ms",
          "description": "A timeout in milliseconds for the prebid auction. If for whatever reason never calls the bidsBackHandler, this timeout will be used to continue anyway to minimize the revenue impact.\n\nNote that the max of the auction timeout or failsafeTimeout will be used to avoid misconfiguration.\n\nThe default is chosen to be 2000ms longer than the auction timeout to give the auction a chance to finish. Usually auction timeouts range from 500ms to 3000ms, which makes 2000ms extra for a failsafe a fair guess.",
          "type": "number"
        },
        "schain": {
          "additionalProperties": false,
          "description": "prebid bidder supply chain configuration",
          "properties": {
            "nodes": {
              "description": "supply chain node for each bidder",
              "items": {
                "$ref": "#/definitions/headerbidding.BidderSupplyChainNode"
              },
              "type": "array"
            }
          },
          "required": [
            "nodes"
          ],
          "type": "object"
        }
      },
      "required": [
        "config",
        "schain"
      ],
      "type": "object"
    },
    "modules.ModulesConfig": {
      "additionalProperties": false,
      "properties": {
        "adReload": {
          "$ref": "#/definitions/modules.adreload.AdReloadModuleConfig"
        },
        "adex": {
          "$ref": "#/definitions/modules.adex.AdexConfig"
        },
        "blocklist": {
          "anyOf": [
            {
              "$ref": "#/definitions/modules.blocklist.BlocklistUrlsBlockingConfig"
            },
            {
              "$ref": "#/definitions/modules.blocklist.BlocklistUrlsKeyValueConfig"
            }
          ]
        },
        "cleanup": {
          "$ref": "#/definitions/modules.cleanup.CleanupModuleConfig"
        },
        "confiant": {
          "$ref": "#/definitions/modules.confiant.ConfiantConfig"
        },
        "prebidFirstPartyData": {
          "$ref": "#/definitions/modules.prebid_first_party_data.PrebidFirstPartyDataModuleConfig"
        },
        "pubstack": {
          "$ref": "#/definitions/modules.pubstack.PubstackConfig"
        },
        "skin": {
          "$ref": "#/definitions/modules.skin.SkinModuleConfig"
        },
        "yieldOptimization": {
          "$ref": "#/definitions/modules.yield_optimization.YieldOptimizationConfig"
        }
      },
      "type": "object"
    },
    "modules.adex.AdexAppConfig": {
      "additionalProperties": false,
      "properties": {
        "adexMobileTagId": {
          "description": "extra tag id for the mobile endpoint data if distinction is wanted/necessary",
          "type": "string"
        },
        "advertiserIdKey": {
          "description": "key within the moli config keyValues in which the advertising id can be found",
          "type": "string"
        },
        "clientTypeKey": {
          "description": "key within the moli config keyValues in which the client type is defined",
          "type": "string"
        }
      },
      "required": [
        "clientTypeKey",
        "advertiserIdKey"
      ],
      "type": "object"
    },
    "modules.adex.AdexConfig": {
      "additionalProperties": false,
      "properties": {
        "adexCustomerId": {
          "description": "Provided by your ADEX account manager.",
          "type": "string"
        },
        "adexTagId": {
          "description": "Provided by your ADEX account manager.",
          "type": "string"
        },
        "appConfig": {
          "$ref": "#/definitions/modules.adex.AdexAppConfig",
          "description": "If there's an app version of the site, add the appConfig in order to make sure mobile data is sent to the Adex"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "mappingDefinitions": {
          "description": "extraction and conversion rules to produce Adex compatible data from key/value targeting.",
          "items": {
            "$ref": "#/definitions/modules.adex.MappingDefinition"
          },
          "type": "array"
        },
        "spaMode": {
          "description": "For single page apps, enable spaMode. Tracking is then executed once per configuration cycle. In regular mode, tracking is only executed once.",
          "type": "boolean"
        }
      },
      "required": [
        "adexCustomerId",
        "adexTagId",
        "enabled",
        "mappingDefinitions",
        "spaMode"
      ],
      "type": "object"
    },
    "modules.adex.MappingDefinition": {
      "anyOf": [
        {
          "$ref": "#/definitions/modules.adex.MappingDefinitionToAdexString"
        },
        {
          "$ref": "#/definitions/modules.adex.MappingDefinitionToAdexNumber"
        },
        {
          "$ref": "#/definitions/modules.adex.MappingDefinitionToAdexMap"
        },
        {
          "$ref": "#/definitions/modules.adex.MappingDefinitionToAdexList"
        }
      ]
    },
    "modules.adex.MappingDefinitionToAdexList": {
      "additionalProperties": false,
      "properties": {
        "adexValueType": {
          "const": "list",
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "defaultValue": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "adexValueType",
        "attribute",
        "key"
      ],
      "type": "object"
    },
    "modules.adex.MappingDefinitionToAdexMap": {
      "additionalProperties": false,
      "properties": {
        "adexValueType": {
          "const": "map",
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "defaultValue": {
          "type": [
            "number",
            "string"
          ]
        },
        "key": {
          "type": "string"
        },
        "valueKey": {
          "type": "string"
        },
        "valueType": {
          "enum": [
            "number",
            "string"
          ],
          "type": "string"
        }
      },
      "required": [
        "adexValueType",
        "attribute",
        "key",
        "valueKey",
        "valueType"
      ],
      "type": "object"
    },
    "modules.adex.MappingDefinitionToAdexNumber": {
      "additionalProperties": false,
      "properties": {
        "adexValueType": {
          "const": "number",
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "defaultValue": {
          "type": "number"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "adexValueType",
        "attribute",
        "key"
      ],
      "type": "object"
    },
    "modules.adex.MappingDefinitionToAdexString": {
      "additionalProperties": false,
      "properties": {
        "adexValueType": {
          "const": "string",
          "type": "string"
        },
        "attribute": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      },
      "required": [
        "adexValueType",
        "attribute",
        "key"
      ],
      "type": "object"
    },
    "modules.adreload.AdReloadModuleConfig": {
      "additionalProperties": false,
      "properties": {
        "disableAdVisibilityChecks": {
          "description": "Enable reloading ads that are not in viewport. It is not advised to use this option. Impressions are usually only counted on ads that have been 50% visible and it's generally not very user-centric to load stuff that is out of viewport.",
          "type": "boolean"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "excludeAdSlotDomIds": {
          "description": "Ad slots that should never be reloaded",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "excludeOrderIds": {
          "description": "Exclude list for orders that are eligible to be reloaded.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "includeAdvertiserIds": {
          "description": "Include list for advertisers that are eligible to be reloaded. The id can be obtained from your google ad manager in the admin/company section.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "includeOrderIds": {
          "description": "Include list for orders that are eligible to be reloaded.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "includeYieldGroupIds": {
          "description": "Include list for yield group ids that are eligible to be reloaded. The id can be obtained from your google ad manager in the yield_group/list section.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "optimizeClsScoreDomIds": {
          "description": "Ad slots that have an influence on content positioning should be included here. The ad reload module will make sure that reloading these slots will not negatively impact CLS scores.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "refreshIntervalMs": {
          "description": "Time an ad must be visible before it can be reloaded.",
          "type": "number"
        },
        "refreshIntervalMsOverrides": {
          "$ref": "#/definitions/modules.adreload.RefreshIntervalOverrides",
          "description": "Configures an override for the default refresh interval configured in `refreshIntervalMs` per ad slot."
        },
        "userActivityLevelControl": {
          "$ref": "#/definitions/modules.adreload.UserActivityLevelControl",
          "description": "Configure what defines a user as active / inactive."
        }
      },
      "required": [
        "enabled",
        "excludeAdSlotDomIds",
        "excludeOrderIds",
        "includeAdvertiserIds",
        "includeOrderIds",
        "includeYieldGroupIds",
        "optimizeClsScoreDomIds"
      ],
      "type": "object"
    },
    "modules.adreload.RefreshIntervalOverrides": {
      "additionalProperties": {
        "type": "number"
      },
      "type": "object"
    },
    "modules.adreload.UserActivityLevelControl": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "level": {
              "const": "strict",
              "type": "string"
            }
          },
          "required": [
            "level"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "level": {
              "const": "moderate",
              "type": "string"
            }
          },
          "required": [
            "level"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "level": {
              "const": "lax",
              "type": "string"
            }
          },
          "required": [
            "level"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "level": {
              "const": "custom",
              "type": "string"
            },
            "userActivityDuration": {
              "description": "The duration in milliseconds the page is considered to be \"actively used\" after the last user action. Changes to page visibility always directly set the state to inactive.",
              "type": "number"
            },
            "userBecomingInactiveDuration": {
              "description": "The duration in milliseconds after that we start listening for new user actions to keep the \"active\" state. This was introduced such that we don't keep up expensive listeners on all user actions all the time.\n\nMust be smaller than userActivityDuration.",
              "type": "number"
            }
          },
          "required": [
            "level",
            "userActivityDuration",
            "userBecomingInactiveDuration"
          ],
          "type": "object"
        }
      ],
      "description": "Used to configure the strictness of user activity checks."
    },
    "modules.blocklist.Blocklist": {
      "additionalProperties": false,
      "properties": {
        "urls": {
          "items": {
            "$ref": "#/definitions/modules.blocklist.BlocklistEntry"
          },
          "type": "array"
        }
      },
      "required": [
        "urls"
      ],
      "type": "object"
    },
    "modules.blocklist.BlocklistEntry": {
      "additionalProperties": false,
      "properties": {
        "matchType": {
          "description": "Defines how the pattern should be matched against the url\n\n- `regex` - transform the pattern into a regex and runs `regex.test(url)`\n- `contains` - checks if the url contains the given pattern string\n- `exact` - checks if the url exactly matches the given pattern string",
          "enum": [
            "regex",
            "contains",
            "exact"
          ],
          "type": "string"
        },
        "pattern": {
          "description": "A regex pattern for the complete href of the page",
          "type": "string"
        }
      },
      "required": [
        "pattern",
        "matchType"
      ],
      "type": "object"
    },
    "modules.blocklist.BlocklistProvider": {
      "anyOf": [
        {
          "$ref": "#/definitions/modules.blocklist.StaticBlocklistProvider"
        },
        {
          "$ref": "#/definitions/modules.blocklist.DynamicBlocklistProvider"
        }
      ]
    },
    "modules.blocklist.BlocklistUrlsBlockingConfig": {
      "additionalProperties": false,
      "properties": {
        "blocklist": {
          "$ref": "#/definitions/modules.blocklist.BlocklistProvider",
          "description": "blocklist content"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "mode": {
          "const": "block",
          "description": "`block` - this mode blocks ad requests entirely `key-value` - sets a specified key value",
          "type": "string"
        }
      },
      "required": [
        "blocklist",
        "enabled",
        "mode"
      ],
      "type": "object"
    },
    "modules.blocklist.BlocklistUrlsKeyValueConfig": {
      "additionalProperties": false,
      "properties": {
        "blocklist": {
          "$ref": "#/definitions/modules.blocklist.BlocklistProvider"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "isBlocklistedValue": {
          "description": "The value that is sent when a URL is listed.\n\ndefault is `true`",
          "type": "string"
        },
        "key": {
          "description": "The key that is used for the key value",
          "type": "string"
        },
        "mode": {
          "const": "key-value",
          "description": "`block` - this mode blocks ad requests entirely `key-value` - sets a specified key value",
          "type": "string"
        }
      },
      "required": [
        "blocklist",
        "enabled",
        "key",
        "mode"
      ],
      "type": "object"
    },
    "modules.blocklist.DynamicBlocklistProvider": {
      "additionalProperties": false,
      "description": "The dynamic configuration provider that lets you update entries without updating the ad tag",
      "properties": {
        "endpoint": {
          "description": "Fetch the blocklist json from the specified endpoint",
          "type": "string"
        },
        "provider": {
          "const": "dynamic",
          "type": "string"
        }
      },
      "required": [
        "provider",
        "endpoint"
      ],
      "type": "object"
    },
    "modules.blocklist.StaticBlocklistProvider": {
      "additionalProperties": false,
      "description": "A fixed set of blocklisted urls. Requires an ad tag update if new entries should be added",
      "properties": {
        "blocklist": {
          "$ref": "#/definitions/modules.blocklist.Blocklist"
        },
        "provider": {
          "const": "static",
          "type": "string"
        }
      },
      "required": [
        "provider",
        "blocklist"
      ],
      "type": "object"
    },
    "modules.cleanup.CleanupModuleConfig": {
      "additionalProperties": false,
      "properties": {
        "configs": {
          "description": "A list of configurations.",
          "items": {
            "$ref": "#/definitions/CleanupConfig"
          },
          "type": "array"
        },
        "enabled": {
          "description": "Information about whether the cleanup module is enabled or not.",
          "type": "boolean"
        }
      },
      "required": [
        "configs",
        "enabled"
      ],
      "type": "object"
    },
    "modules.confiant.ConfiantConfig": {
      "additionalProperties": false,
      "properties": {
        "assetUrl": {
          "description": "Confiant loads a single javascript file that contains all the configuration properties",
          "type": "string"
        },
        "checkGVLID": {
          "default": false,
          "description": "Confiant has no defined purposes (state 2023-05-08) and some CMPs (Sourcepoint) exclude it from TC String. This makes it impossible to check if consent is given or not.\n\nIf Confiant decides to add a purpose, we can use this flag to immediately turn on the check again. As a safeguard purpose-1 is mandatory to load confiant.",
          "type": "boolean"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        }
      },
      "required": [
        "assetUrl",
        "enabled"
      ],
      "type": "object"
    },
    "modules.prebid_first_party_data.GptTargetingMapping": {
      "additionalProperties": false,
      "properties": {
        "cat": {
          "description": "The `key` in the targeting map that contains the `cat` values.\n\nThe targeting values should be an array of IAB content categories of the site.",
          "type": "string"
        },
        "iabV2": {
          "description": "The `key` in the targeting map that contains the `iabV2` segment values.\n\nThe targeting values should be an array of IABV2 content category ids that describe the current page or view of the site. if not defined, we'll not set the data object.",
          "type": "string"
        },
        "iabV3": {
          "description": "The `key` in the targeting map that contains the `iabV3` segment values.\n\nThe targeting values should be an array of IABV3 content category ids that describe the current page or view of the site. if not defined, we'll not set the data object.",
          "type": "string"
        },
        "pageCat": {
          "description": "The `key` in the targeting map that contains the `pageCat` values.\n\nThe targeting values should be an array of IAB content categories that describe the current page or view of the site. if not defined, `cat` will be used as a fallback",
          "type": "string"
        },
        "sectionCat": {
          "description": "The `key` in the targeting map that contains the `sectionCat` values.\n\nThe targeting values should be an array of IAB content categories that describe the current section of the site. If not defined, `cat` will be used as a fallback",
          "type": "string"
        }
      },
      "type": "object"
    },
    "modules.prebid_first_party_data.PrebidFirstPartyDataModuleConfig": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "gptTargetingMappings": {
          "$ref": "#/definitions/modules.prebid_first_party_data.GptTargetingMapping",
          "description": "static mapping definitions for relevant OpenRTB 2.5 properties from gpt targetings.\n\nUse this to extract dynamic values set via `moli.setTargeting()`."
        },
        "iabDataProviderName": {
          "description": "Name of the provider that is used in the site.content.data segments as provider name. Usually, this is the name/domain of the publisher.\n\nhttps://docs.prebid.org/features/firstPartyData.html#segments-and-taxonomy",
          "type": "string"
        },
        "staticPrebidFirstPartyData": {
          "$ref": "#/definitions/prebidjs.firstpartydata.PrebidFirstPartyData",
          "description": "A static OpenRTB2 config that is merged with the dynamic settings from the key value targetings"
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object"
    },
    "modules.pubstack.PubstackConfig": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "tagId": {
          "description": "TagID from pubstack",
          "type": "string"
        }
      },
      "required": [
        "enabled",
        "tagId"
      ],
      "type": "object"
    },
    "modules.skin.AllFormatFilter": {
      "additionalProperties": false,
      "description": "If this filter is added to the list of filters, then it will always apply. This filter is useful for \"orchestration ad units\" that don't serve ads, but orchestrate a format. Examples are\n\n- `wallpaper_pixel`",
      "properties": {
        "bidder": {
          "const": "*",
          "type": "string"
        }
      },
      "required": [
        "bidder"
      ],
      "type": "object"
    },
    "modules.skin.AzerionFormatFilter": {
      "additionalProperties": false,
      "description": "Azerion (fka Improve Digital) format filter",
      "properties": {
        "bidder": {
          "const": "improvedigital",
          "type": "string"
        }
      },
      "required": [
        "bidder"
      ],
      "type": "object"
    },
    "modules.skin.DSPXFormatFilter": {
      "additionalProperties": false,
      "properties": {
        "bidder": {
          "const": "dspx",
          "type": "string"
        }
      },
      "required": [
        "bidder"
      ],
      "type": "object"
    },
    "modules.skin.FormatFilter": {
      "anyOf": [
        {
          "$ref": "#/definitions/modules.skin.AllFormatFilter"
        },
        {
          "$ref": "#/definitions/modules.skin.AzerionFormatFilter"
        },
        {
          "$ref": "#/definitions/modules.skin.GumGumFormatFilter"
        },
        {
          "$ref": "#/definitions/modules.skin.DSPXFormatFilter"
        },
        {
          "$ref": "#/definitions/modules.skin.VisxFormatFilter"
        },
        {
          "$ref": "#/definitions/modules.skin.YieldlabFormatFilter"
        },
        {
          "$ref": "#/definitions/modules.skin.XandrFormatFilter"
        }
      ]
    },
    "modules.skin.GumGumFormatFilter": {
      "additionalProperties": false,
      "properties": {
        "auid": {
          "description": "Stands for _ad id_ and contains the format delivered.\n\n- `59` = in-screen cascade (former mobile skin)\n- `39` = in-screen expandable (mobile expandable)\n\nIf not set, then the `auid` will not be considered for filtering.",
          "type": "number"
        },
        "bidder": {
          "const": "gumgum",
          "type": "string"
        }
      },
      "required": [
        "bidder"
      ],
      "type": "object"
    },
    "modules.skin.SkinConfig": {
      "additionalProperties": false,
      "properties": {
        "adReload": {
          "additionalProperties": false,
          "description": "If set, the skin of the configured bidder reloads after the given interval (in ms).",
          "properties": {
            "allowed": {
              "items": {
                "$ref": "#/definitions/prebidjs.BidderCode"
              },
              "type": "array"
            },
            "intervalMs": {
              "type": "number"
            }
          },
          "required": [
            "intervalMs",
            "allowed"
          ],
          "type": "object"
        },
        "blockedAdSlotDomIds": {
          "description": "dom ids of the ad slots that should not be requested when a just premium skin appears in the bid responses.\n\nDepending on the wallpaperAdSlot these are usually skyscrapers left and right and if there's a specific wallpaper ad slot the header as well.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "destroySkinSlot": {
          "default": false,
          "description": "If set to true the ad slot that would load the skin is being destroyed. This is useful only for ad slots that serve as a special \"skin ad slot\" and have otherwise no other function.",
          "type": "boolean"
        },
        "enableCpmComparison": {
          "description": "If the skin cpm comparison should be active, i.e. not only logging, but also preventing a skin render if the other slots have a higher combined cpm.",
          "type": "boolean"
        },
        "formatFilter": {
          "description": "A list of filters. If one of the filter applies then this configuration will be executed.",
          "items": {
            "$ref": "#/definitions/modules.skin.FormatFilter"
          },
          "type": "array"
        },
        "hideBlockedSlots": {
          "description": "if true, the blocked ad slots will be set to display: none",
          "type": "boolean"
        },
        "hideBlockedSlotsSelector": {
          "description": "Selector for an (additional) ad slot container that should be set to display: none\n\ne.g. mobile-sticky ads have another container wrapped around the ad slot container itself which can be hidden like this: hideBlockedSlotsSelector: '[data-ref=\"sticky-ad\"]'",
          "type": "string"
        },
        "hideSkinAdSlot": {
          "description": "if true, the ad slot will be set to display none",
          "type": "boolean"
        },
        "skinAdSlotDomId": {
          "description": "This is usually the dom id of the header ad slot.\n\nSome setups may have an ad slot only for the just premium skin. This is the case if there are direct campaign formats for wallpapers that require a DFP road block.",
          "type": "string"
        }
      },
      "required": [
        "formatFilter",
        "skinAdSlotDomId",
        "blockedAdSlotDomIds",
        "hideSkinAdSlot",
        "hideBlockedSlots",
        "enableCpmComparison"
      ],
      "type": "object"
    },
    "modules.skin.SkinModuleConfig": {
      "additionalProperties": false,
      "properties": {
        "configs": {
          "description": "A list of configurations. The first configuration with matching format filters will be used.",
          "items": {
            "$ref": "#/definitions/modules.skin.SkinConfig"
          },
          "type": "array"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "trackSkinCpmLow": {
          "$comment": "(\n        cpms: { skin: number; combinedNonSkinSlots: number },\n        skinConfig: SkinConfig,\n        skinBid: prebidjs.IBidResponse) => void",
          "description": "Function to track when the skin cpm is lower than the combined cpm of the ad slots that would be removed in its favour.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "cpms": {
                  "additionalProperties": false,
                  "properties": {
                    "combinedNonSkinSlots": {
                      "type": "number"
                    },
                    "skin": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "skin",
                    "combinedNonSkinSlots"
                  ],
                  "type": "object"
                },
                "skinBid": {
                  "$ref": "#/definitions/prebidjs.IBidResponse"
                },
                "skinConfig": {
                  "$ref": "#/definitions/modules.skin.SkinConfig"
                }
              },
              "required": [
                "cpms",
                "skinConfig",
                "skinBid"
              ],
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "configs",
        "enabled"
      ],
      "type": "object"
    },
    "modules.skin.VisxFormatFilter": {
      "additionalProperties": false,
      "properties": {
        "bidder": {
          "const": "visx",
          "type": "string"
        }
      },
      "required": [
        "bidder"
      ],
      "type": "object"
    },
    "modules.skin.XandrFormatFilter": {
      "additionalProperties": false,
      "description": "Partners buying skin demand via the Xandr platform",
      "properties": {
        "bidder": {
          "enum": [
            "appnexusAst",
            "appnexus"
          ],
          "type": "string"
        }
      },
      "required": [
        "bidder"
      ],
      "type": "object"
    },
    "modules.skin.YieldlabFormatFilter": {
      "additionalProperties": false,
      "description": "Partners buying skin demand via the Yieldlab platform",
      "properties": {
        "bidder": {
          "const": "yieldlab",
          "type": "string"
        }
      },
      "required": [
        "bidder"
      ],
      "type": "object"
    },
    "modules.yield_optimization.AdunitPriceRulesResponse": {
      "additionalProperties": false,
      "description": "Response from the yield optimization server",
      "properties": {
        "browser": {
          "description": "the browser that was detected on the backend.",
          "type": "string"
        },
        "rules": {
          "$ref": "#/definitions/modules.yield_optimization.PriceRules"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "modules.yield_optimization.DynamicYieldOptimizationConfig": {
      "additionalProperties": false,
      "description": "A dynamic configuration",
      "properties": {
        "configEndpoint": {
          "description": "URL to a json config file that contains a list of AdUnitPriceRules.",
          "type": "string"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "excludedAdUnitPaths": {
          "description": "AdUnitPaths that don't need the yield optimization. Add all adUnits that are not configured in the server.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "provider": {
          "$ref": "#/definitions/modules.yield_optimization.YieldOptimizationConfigProvider"
        }
      },
      "required": [
        "configEndpoint",
        "enabled",
        "excludedAdUnitPaths",
        "provider"
      ],
      "type": "object"
    },
    "modules.yield_optimization.NoYieldOptimizationConfig": {
      "additionalProperties": false,
      "description": "No key values will be applied. The system is inactive.",
      "properties": {
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "provider": {
          "$ref": "#/definitions/modules.yield_optimization.YieldOptimizationConfigProvider"
        }
      },
      "required": [
        "enabled",
        "provider"
      ],
      "type": "object"
    },
    "modules.yield_optimization.PriceRules": {
      "additionalProperties": {
        "$ref": "#/definitions/MoliRuntime.yield_optimization.PriceRule",
        "description": "The ad unit that is being configured along with a price that was selected from the server"
      },
      "type": "object"
    },
    "modules.yield_optimization.StaticYieldOptimizationConfig": {
      "additionalProperties": false,
      "description": "A static configuration for all ad units. This is to emulate server requests",
      "properties": {
        "config": {
          "$ref": "#/definitions/modules.yield_optimization.AdunitPriceRulesResponse"
        },
        "enabled": {
          "description": "If set to true the module will be enabled.",
          "type": "boolean"
        },
        "provider": {
          "$ref": "#/definitions/modules.yield_optimization.YieldOptimizationConfigProvider"
        }
      },
      "required": [
        "config",
        "enabled",
        "provider"
      ],
      "type": "object"
    },
    "modules.yield_optimization.YieldOptimizationConfig": {
      "anyOf": [
        {
          "$ref": "#/definitions/modules.yield_optimization.NoYieldOptimizationConfig"
        },
        {
          "$ref": "#/definitions/modules.yield_optimization.StaticYieldOptimizationConfig"
        },
        {
          "$ref": "#/definitions/modules.yield_optimization.DynamicYieldOptimizationConfig"
        }
      ],
      "description": "Available options to configure yield optimization"
    },
    "modules.yield_optimization.YieldOptimizationConfigProvider": {
      "enum": [
        "none",
        "static",
        "dynamic"
      ],
      "type": "string"
    },
    "prebidjs.BidderCode": {
      "description": "The bidder code is used to identify the different SSPs.",
      "enum": [
        "adagio",
        "amx",
        "aduptech",
        "adf",
        "connectad",
        "criteo",
        "appnexusAst",
        "appnexus",
        "gumgum",
        "improvedigital",
        "ix",
        "invibes",
        "nanointeractive",
        "pubmatic",
        "ogury",
        "onetag",
        "openx",
        "smartadserver",
        "smartx",
        "unruly",
        "teads",
        "triplelift",
        "yieldlab",
        "seedtag",
        "spotx",
        "showheroesBs",
        "stroeerCore",
        "xhb",
        "dspx",
        "rubicon",
        "rads",
        "visx",
        "vlyby",
        "orbidder"
      ],
      "type": "string"
    },
    "prebidjs.IAdServerTargeting": {
      "additionalProperties": false,
      "description": "For each bidder's bid, Prebid.js will set 4 keys (hb_bidder, hb_adid, hb_pb, hb_size) with their corresponding values. The key value pair targeting is applied to the bid's corresponding ad unit. Your ad ops team will have the ad server's line items target these keys.\n\n If you'd like to customize the key value pairs, you can overwrite the settings as the below example shows.  Note that once you updated the settings, let your ad ops team know about the change, so they can update the line  item targeting accordingly. See the Ad Ops documentation for more information.\n\n There's no need to include this code if you choose to use the below default setting.",
      "properties": {
        "key": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "prebidjs.IAdUnit": {
      "additionalProperties": false,
      "description": "## Ad unit / ad unit object\n\nThe ad unit object is where you configure what kinds of ads you will show in a given ad slot on your page, including:\n\n- Allowed sizes\n- Allowed media types (e.g., banner, native, and/or video)\n\nIt's also where you will configure bidders, e.g.:\n\n- Which bidders are allowed to bid for that ad slot\n- What information is passed to those bidders via their parameters\n\nRelates directly to the `Moli.IAdSlot`.",
      "properties": {
        "bids": {
          "description": "An array of bid objects.",
          "items": {
            "$ref": "#/definitions/prebidjs.IBid"
          },
          "type": "array"
        },
        "code": {
          "description": "A unique identifier that you create and assign to this ad unit. This identifier will be used to set query string targeting on the ad. If you're using GPT, we recommend setting this to the slot element ID.\n\nMoli allows to omit the `code` and will use the `domId` of the slot",
          "type": "string"
        },
        "floors": {
          "$ref": "#/definitions/prebidjs.floors.IFloorsData",
          "description": "Floors configuration over prebid priceFloor module."
        },
        "mediaTypes": {
          "$ref": "#/definitions/prebidjs.IMediaTypes",
          "description": "Defines one or multiple media types the ad unit supports. Media Types can be \"banner\", \"native\" or \"video"
        },
        "ortb2Imp": {
          "$ref": "#/definitions/prebidjs.IOrtb2Imp",
          "description": "Configure additional information per ad unit that should be send along with a prebid server auction call."
        },
        "pubstack": {
          "$ref": "#/definitions/prebidjs.IPubstackConfig",
          "description": "This is an optional configuration for publishers that have a pubstack.io integration."
        },
        "renderer": {
          "$ref": "#/definitions/prebidjs.IRenderer",
          "description": "The renderer associated to the ad-unit. Only for mediaType = video."
        }
      },
      "required": [
        "mediaTypes",
        "bids"
      ],
      "type": "object"
    },
    "prebidjs.IAdUpBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "aduptech",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IAdUpParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IAdUpParams": {
      "additionalProperties": false,
      "description": "AdUp Technology bid params",
      "properties": {
        "adtest": {
          "description": "Impressions and clicks will not be tracked if enabled",
          "type": "boolean"
        },
        "placement": {
          "description": "Unique placement id per publisher",
          "examples": [
            "5678"
          ],
          "type": "string"
        },
        "publisher": {
          "description": "Unique publisher id",
          "examples": [
            "1234"
          ],
          "type": "string"
        },
        "query": {
          "description": "Semicolon separated list of keywords",
          "examples": [
            "urlaub;ibiza;mallorca"
          ],
          "type": "string"
        }
      },
      "required": [
        "publisher",
        "placement"
      ],
      "type": "object"
    },
    "prebidjs.IAdagioBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "adagio",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IAdagioParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IAdagioParams": {
      "additionalProperties": false,
      "description": "Adagio bid params",
      "properties": {
        "adUnitElementId": {
          "description": "Refers to the adunit html attribute id in a page.",
          "type": "string"
        },
        "category": {
          "description": "Category of the content displayed in the page.\n- max length: 30\n- max distinctives values: 50",
          "type": "string"
        },
        "native": {
          "description": "Partial OpenRTB Native 1.2 request object. Supported fields are:\n- context\n-plcmttype"
        },
        "organizationId": {
          "description": "Id of the Organization. Handed out by Adagio.",
          "type": "string"
        },
        "pagetype": {
          "description": "Describes what kind of content will be present in the page.\n- max length: 30\n- max distinctives values: 50",
          "type": "string"
        },
        "placement": {
          "description": "Refers to the placement of an adunit in a page. Must not contain any information about the type of device.\n- max length: 30\n- max distinctives values: 10",
          "type": "string"
        },
        "site": {
          "description": "Name of the site. Handed out by Adagio.\n- max length: 50",
          "type": "string"
        },
        "splitKeyword": {
          "description": "The splitKeyword parameter lets Adagio know that the traffic is eligible to be sent to a Direct Seat using the Optimised Prebid Server offering. When it’s not included in the configuration, Adagio will only send the traffic to its resellers set up through the Demand Library.\n\nYou can pick any value for splitKeyword (30 alphabetic-numeric string with dash and underscore), e.g. ss-pubmatic (standing for server-side pubmatic). Once communicated to our team, any change made to its value needs to be communicated again (otw. traffic won’t be recognised as eligible for the Optimised Prebid Server offering)",
          "type": "string"
        },
        "useAdUnitCodeAsAdUnitElementId": {
          "description": "If true, \"adUnitElementId\" must be removed. (Since Prebid.js@4.19)",
          "type": "boolean"
        }
      },
      "required": [
        "organizationId",
        "site",
        "placement"
      ],
      "type": "object"
    },
    "prebidjs.IAdaptMxBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "amx",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IAdaptMxParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IAdaptMxParams": {
      "additionalProperties": false,
      "description": "Adapt.mx bid params",
      "properties": {
        "adUnitId": {
          "description": "Ad Unit ID used in reporting. Will default to bid.adUnitCode",
          "type": "string"
        },
        "tagId": {
          "examples": [
            "cHJlYmlkLm9yZw"
          ],
          "type": "string"
        },
        "testMode": {
          "description": "Activate 100% fill ads",
          "type": "boolean"
        }
      },
      "required": [
        "tagId"
      ],
      "type": "object"
    },
    "prebidjs.IAdformBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "adf",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IAdformParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IAdformParams": {
      "additionalProperties": false,
      "description": "Adform bid params",
      "properties": {
        "adxDomain": {
          "description": "The Adform domain",
          "examples": [
            "adx.adform.net"
          ],
          "type": "string"
        },
        "cdims": {
          "description": "Comma-separated creative dimentions",
          "examples": [
            "300x250"
          ],
          "type": "string"
        },
        "mid": {
          "examples": [
            12345
          ],
          "type": "number"
        },
        "minp": {
          "description": "Minimum CPM price",
          "examples": [
            2.55
          ],
          "type": "number"
        },
        "mkv": {
          "description": "Comma-separated key-value pairs",
          "examples": [
            "city:NY"
          ],
          "type": "string"
        },
        "mkw": {
          "description": "Comma-separated keywords",
          "examples": [
            "news,sport"
          ],
          "type": "string"
        },
        "priceType": {
          "description": "An expected price type (net or gross) of bids",
          "enum": [
            "net",
            "gross"
          ],
          "examples": [
            "net"
          ],
          "type": "string"
        },
        "url": {
          "description": "Custom targeting URL",
          "examples": [
            "https://some.app/?home"
          ],
          "type": "string"
        }
      },
      "required": [
        "mid"
      ],
      "type": "object"
    },
    "prebidjs.IAppNexusASTApp": {
      "additionalProperties": false,
      "properties": {
        "device_id": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "idfa": {
                  "type": "string"
                }
              },
              "required": [
                "idfa"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "aaid": {
                  "type": "string"
                }
              },
              "required": [
                "aaid"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "md5udid": {
                  "type": "string"
                }
              },
              "required": [
                "md5udid"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "shad1udid": {
                  "type": "string"
                }
              },
              "required": [
                "shad1udid"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "windowsadid": {
                  "type": "string"
                }
              },
              "required": [
                "windowsadid"
              ],
              "type": "object"
            }
          ],
          "description": "Object that contains the advertising identifiers of the user (idfa, aaid, md5udid, sha1udid, or windowsadid)."
        },
        "geo": {
          "additionalProperties": false,
          "description": "Object that contains the latitude (lat) and longitude (lng) of the user.",
          "properties": {
            "lat": {
              "type": "number"
            },
            "lng": {
              "type": "number"
            }
          },
          "required": [
            "lat",
            "lng"
          ],
          "type": "object"
        },
        "id": {
          "description": "The App ID.",
          "examples": [
            "B1O2W3M4AN.com.prebid.webview"
          ],
          "type": "string"
        }
      },
      "required": [
        "device_id"
      ],
      "type": "object"
    },
    "prebidjs.IAppNexusASTBid": {
      "additionalProperties": false,
      "description": "AppNexus bid object.",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "enum": [
            "appnexusAst",
            "appnexus"
          ],
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IAppNexusASTParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IAppNexusASTKeyword": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": "object"
    },
    "prebidjs.IAppNexusASTParams": {
      "additionalProperties": false,
      "description": "AppNexusAST bid parameters.\n\nThe type definition may not be complete as only the actually used (or tested) fields are being modelled in this definition.",
      "properties": {
        "allowSmallerSizes": {
          "description": "If true, ads smaller than the values in your ad unit's sizes array will be allowed to serve. Defaults to false.",
          "type": "boolean"
        },
        "app": {
          "$ref": "#/definitions/prebidjs.IAppNexusASTApp",
          "description": "AppNexus supports using prebid within a mobile app’s webview. If you are interested in using an SDK, please see Prebid Mobile instead."
        },
        "keywords": {
          "anyOf": [
            {
              "$ref": "#/definitions/prebidjs.IAppNexusASTKeyword"
            },
            {
              "items": {
                "$ref": "#/definitions/prebidjs.IAppNexusASTPrebidServerKeyword"
              },
              "type": "array"
            }
          ],
          "description": "A set of key-value pairs applied to all ad slots on the page. Mapped to query string segments for buy-side targeting.\n\n**Example:**\n\n```js keywords: { genre: ['rock', 'pop'] } ```\n\nfor prebid server: keywords: ```js [ { key: 'genre', value: ['rock', 'pop'] } ] ``"
        },
        "placementId": {
          "description": "The placement ID from AppNexus. You may identify a placement using the `invCode` and `member` instead of a placement ID.",
          "type": [
            "string",
            "number"
          ]
        },
        "reserve": {
          "description": "Sets a floor price for the bid that is returned.",
          "type": "number"
        },
        "supplyType": {
          "description": "Indicates the type of supply for this placement. Possible values are web, mobile_web, mobile_app",
          "enum": [
            "web",
            "mobile_web",
            "mobile_app"
          ],
          "type": "string"
        },
        "video": {
          "additionalProperties": false,
          "description": "Optional configuration for video placements",
          "properties": {
            "frameworks": {
              "description": "Array of integers listing API frameworks supported by the publisher. Allowed values:   0: None   1: VPAID 1.0   2: VPAID 2.0   3: MRAID 1.0:   4: ORMMA   5: MRAID 2.0",
              "items": {
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "type": "number"
              },
              "type": "array"
            },
            "maxduration": {
              "description": "Integer that defines the maximum video ad duration in seconds.",
              "type": "number"
            },
            "mimes": {
              "description": "Array of strings listing the content MIME types supported",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "minduration": {
              "description": "Integer that defines the minimum video ad duration in seconds.",
              "type": "number"
            },
            "playback_method": {
              "description": "playback_method  Array of strings listing playback methods supported by the publisher.",
              "items": {
                "enum": [
                  "auto_play_sound_on",
                  "auto_play_sound_off",
                  "click_to_play",
                  "mouseover",
                  "auto_play_sound_unknown"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "skippable": {
              "description": "Boolean which, if true, means the user can click a button to skip the video ad. Defaults to false.",
              "type": "boolean"
            },
            "startdelay": {
              "description": "Integer that determines whether to show the ad before, during, or after video content. If > 0, position is mid-roll and value indicates start delay, in seconds. Allowed values: Pre-roll: 0 (default); Mid-roll: -1 ; Post-roll: -2.",
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "placementId"
      ],
      "type": "object"
    },
    "prebidjs.IAppNexusASTPrebidServerKeyword": {
      "additionalProperties": false,
      "description": "AppNexus prebid server keyword object.",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "prebidjs.IBid": {
      "anyOf": [
        {
          "$ref": "#/definitions/prebidjs.IAdagioBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IAdaptMxBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IAdformBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IAdUpBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IConnectAdBid"
        },
        {
          "$ref": "#/definitions/prebidjs.ICriteoBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IAppNexusASTBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IGumGumBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IImproveDigitalBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IIndexExchangeBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IInvibesBid"
        },
        {
          "$ref": "#/definitions/prebidjs.INanoInteractiveBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IPrebidServerBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IPubMaticBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IOguryBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IOneTagBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IOpenxBid"
        },
        {
          "$ref": "#/definitions/prebidjs.ISmartAdServerBid"
        },
        {
          "$ref": "#/definitions/prebidjs.ISmartxBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IUnrulyBid"
        },
        {
          "$ref": "#/definitions/prebidjs.ITeadsBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IYieldlabBid"
        },
        {
          "$ref": "#/definitions/prebidjs.ISeedtagBid"
        },
        {
          "$ref": "#/definitions/prebidjs.ISpotXBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IShowHeroesBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IStroeerCoreBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IXaxisBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IDSPXBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IRubiconBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IRecognifiedBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IVlybyBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IVisxBid"
        },
        {
          "$ref": "#/definitions/prebidjs.IOrbidderBid"
        }
      ],
      "description": "Supported bid object types."
    },
    "prebidjs.IBidResponse": {
      "additionalProperties": false,
      "description": "Bid response object.\n\n## Concrete BidResponse types\n\nYou can add specific response types for every header bid if necessary by\n\n1. Creating a new interface that extends IBidResponse 2. Narrow the `bidder` property to the header bidder, e.g.    readonly bidder: typeof GumGum 3. Add the interface to the `BidResponse` union type 4. Match on the `bidder` (acts as the union discriminator) to get the specific response you want.",
      "properties": {
        "ad": {
          "anyOf": [
            {
              "type": "string"
            },
            {}
          ],
          "description": "the actual creative Most of the time this a string containing the markup, but in some cases it's an object with more information."
        },
        "adId": {
          "description": "The unique identifier of a bid creative.",
          "type": "string"
        },
        "adUnitCode": {
          "description": "The `code` property in the adUnit object. This is usually the `domId` of the ad unit.",
          "type": "string"
        },
        "adserverTargeting": {
          "additionalProperties": false,
          "description": "Contains all the adserver targeting parameters",
          "properties": {
            "hb_adid": {
              "type": "string"
            },
            "hb_adomain": {
              "type": "string"
            },
            "hb_bidder": {
              "type": "string"
            },
            "hb_format": {
              "type": "string"
            },
            "hb_pb": {
              "type": "string"
            },
            "hb_size": {
              "type": "string"
            },
            "hb_source": {
              "type": "string"
            }
          },
          "required": [
            "hb_bidder",
            "hb_adid",
            "hb_pb",
            "hb_size",
            "hb_source",
            "hb_format",
            "hb_adomain"
          ],
          "type": "object"
        },
        "auctionId": {
          "description": "the unique prebid auction ID in which this bid response was created",
          "type": "string"
        },
        "bidder": {
          "$ref": "#/definitions/prebidjs.BidderCode",
          "description": "The bidder code."
        },
        "cpm": {
          "description": "The exact bid price from the bidder.",
          "type": "number"
        },
        "creativeId": {
          "type": "number"
        },
        "currency": {
          "description": "The currency of the bid",
          "type": "string"
        },
        "dealId": {
          "description": "If the bid is associated with a Deal, this field contains the deal ID.",
          "type": "string"
        },
        "height": {
          "description": "The height of the returned creative size. can be undefined for native / outstream media types",
          "type": "number"
        },
        "mediaType": {
          "description": "The media type of the bid response",
          "enum": [
            "banner",
            "video",
            "display"
          ],
          "type": "string"
        },
        "meta": {
          "additionalProperties": false,
          "description": "Additional meta data for this bid response",
          "properties": {
            "advertiserDomains": {
              "description": "A list of advertiser domains this bid is for. This field is populated by at least some bidders.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "brandId": {
              "description": "Seen on IX bids",
              "type": "number"
            },
            "brandName": {
              "description": "Seen on IX bids",
              "type": "string"
            },
            "networkId": {
              "description": "Seen on IX bids",
              "type": "string"
            },
            "networkName": {
              "description": "Seen on Criteo bids",
              "type": "string"
            }
          },
          "type": "object"
        },
        "native": {
          "additionalProperties": false,
          "description": "Contains native key value pairs.",
          "properties": {
            "address": {
              "type": "string"
            },
            "body": {
              "type": "string"
            },
            "body2": {
              "type": "string"
            },
            "clickTrackers": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "clickUrl": {
              "type": "string"
            },
            "cta": {
              "type": "string"
            },
            "displayUrl": {
              "type": "string"
            },
            "downloads": {
              "type": "string"
            },
            "image": {
              "additionalProperties": false,
              "properties": {
                "height": {
                  "type": "number"
                },
                "url": {
                  "type": "string"
                },
                "width": {
                  "type": "number"
                }
              },
              "required": [
                "url",
                "height",
                "width"
              ],
              "type": "object"
            },
            "impressionTrackers": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "javascriptTrackers": {
              "type": "string"
            },
            "likes": {},
            "phone": {
              "type": "string"
            },
            "price": {
              "type": "string"
            },
            "privacyLink": {
              "type": "string"
            },
            "rating": {
              "type": "string"
            },
            "salePrice": {
              "type": "string"
            },
            "sponsoredBy": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "netRevenue": {
          "description": "True if the CPM is the one this bidder will pay",
          "type": "boolean"
        },
        "originalCpm": {
          "type": "number"
        },
        "originalCurrency": {
          "description": "If currencyModule performed any currency conversion, this is the original currency.",
          "type": "string"
        },
        "pbAg": {
          "description": "price bucket: 'auto granularity'",
          "type": "string"
        },
        "pbCg": {
          "description": "price bucket: 'custom granularity'",
          "type": "string"
        },
        "pbDg": {
          "description": "price bucket: 'dense granularity'",
          "type": "string"
        },
        "pbHg": {
          "description": "price bucket: 'high granularity'",
          "type": "string"
        },
        "pbLg": {
          "description": "price bucket: 'low granularity'",
          "type": "string"
        },
        "pbMg": {
          "description": "price bucket: 'medium granularity'",
          "type": "string"
        },
        "requestId": {
          "description": "The unique identifier of a bid creative. It’s used by the line item’s creative",
          "type": "string"
        },
        "requestTimestamp": {
          "type": "number"
        },
        "responseTimestamp": {
          "type": "number"
        },
        "size": {
          "type": "string"
        },
        "source": {
          "description": "Origin of the bid",
          "enum": [
            "client",
            "s2s"
          ],
          "type": "string"
        },
        "status": {
          "description": "Status of the bid. Possible values: targetingSet, rendered",
          "enum": [
            "rendered",
            "targetingSet"
          ],
          "type": "string"
        },
        "statusMessage": {
          "description": "The bid’s status message",
          "enum": [
            "Bid returned empty or error response",
            "Bid available"
          ],
          "type": "string"
        },
        "timeToRespond": {
          "type": "number"
        },
        "ttl": {
          "description": "(propably optional) - the time to live for this bid response in seconds",
          "type": "number"
        },
        "vastImpUrl": {
          "type": "string"
        },
        "vastXml": {
          "type": "string"
        },
        "width": {
          "description": "The width of the returned creative size. can be undefined for native / outstream media types",
          "type": "number"
        }
      },
      "required": [
        "requestId",
        "bidder",
        "ad",
        "auctionId",
        "adUnitCode",
        "cpm",
        "adId",
        "size",
        "mediaType",
        "source",
        "currency",
        "originalCurrency",
        "netRevenue",
        "status",
        "statusMessage",
        "native",
        "adserverTargeting",
        "responseTimestamp",
        "requestTimestamp",
        "timeToRespond",
        "pbLg",
        "pbMg",
        "pbHg",
        "pbAg",
        "pbDg",
        "pbCg"
      ],
      "type": "object"
    },
    "prebidjs.IBidderSetting": {
      "additionalProperties": false,
      "properties": {
        "adserverTargeting": {
          "description": "Define which key/value pairs are sent to the ad server.",
          "items": {
            "$ref": "#/definitions/prebidjs.IAdServerTargeting"
          },
          "type": "array"
        },
        "allowAlternateBidderCodes": {
          "default": "false (since prebid 7)",
          "description": "Allow adapters to bid with alternate bidder codes.",
          "type": "boolean"
        },
        "allowZeroCpmBids": {
          "default": false,
          "description": "Would allow bids with a 0 CPM to be accepted by Prebid.js and could be passed to the ad server.",
          "type": "boolean"
        },
        "allowedAlternateBidderCodes": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/definitions/prebidjs.BidderCode"
              },
              "type": "array"
            },
            {
              "items": {
                "const": "*",
                "type": "string"
              },
              "maxItems": 1,
              "minItems": 1,
              "type": "array"
            }
          ],
          "description": "Array of bidder codes for which an adapter can bid. undefined or ['*'] will allow adapter to bid with any bidder code."
        },
        "bidCpmAdjustment": {
          "$comment": "(bidCpm: number, bid: IBidResponse) => number",
          "description": "Some bidders return gross prices instead of the net prices (what the publisher will actually get paid). For example, a publisher's net price might be 15% below the returned gross price. In this case, the publisher may want to adjust the bidder's returned price to run a true header bidding auction. Otherwise, this bidder's gross price will unfairly win over your other demand sources who report the real price.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "bid": {
                  "$ref": "#/definitions/prebidjs.IBidResponse"
                },
                "bidCpm": {
                  "type": "number"
                }
              },
              "required": [
                "bidCpm",
                "bid"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "sendStandardTargeting": {
          "default": true,
          "description": "If adapter-specific targeting is specified, can be used to suppress the standard targeting for that adapter.",
          "type": "boolean"
        },
        "storageAllowed": {
          "default": "false (since prebid 7)",
          "description": "Allow use of cookies and local storage.",
          "type": "boolean"
        },
        "suppressEmptyKeys": {
          "default": false,
          "description": "If custom adserverTargeting functions are specified that may generate empty keys, this can be used to suppress them.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "prebidjs.IBidderSettings": {
      "additionalProperties": {
        "$ref": "#/definitions/prebidjs.IBidderSetting"
      },
      "description": "The bidderSettings object provides a way to define some behaviors for the platform and specific adapters. The basic structure is a 'standard' section with defaults for all adapters, and then one or more adapter-specific sections that override behavior for that bidder.\n\nDefining bidderSettings is optional; the platform has default values for all of the options. Adapters may specify their own default settings, though this isn't common. Some sample scenarios where publishers may wish to alter the default settings:\n\n- using bidder-specific ad server targeting instead of Prebid-standard targeting\n- passing additional information to the ad server\n- adjusting the bid CPM sent to the ad server",
      "properties": {
        "adagio": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "adf": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "aduptech": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "amx": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "appnexus": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "appnexusAst": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "connectad": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "criteo": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "dspx": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "gumgum": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "improvedigital": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "invibes": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "ix": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "nanointeractive": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "ogury": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "onetag": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "openx": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "orbidder": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "pubmatic": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "rads": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "rubicon": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "seedtag": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "showheroesBs": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "smartadserver": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "smartx": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "spotx": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "standard": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "stroeerCore": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "teads": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "triplelift": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "unruly": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "visx": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "vlyby": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "xhb": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        },
        "yieldlab": {
          "$ref": "#/definitions/prebidjs.IBidderSetting"
        }
      },
      "type": "object"
    },
    "prebidjs.IConnectAdBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "connectad",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IConnectAdParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IConnectAdParams": {
      "additionalProperties": false,
      "properties": {
        "networkId": {
          "description": "The network ID from ConnectAd.",
          "type": "number"
        },
        "siteId": {
          "description": "The site ID from ConnectAd.",
          "type": "number"
        }
      },
      "required": [
        "siteId",
        "networkId"
      ],
      "type": "object"
    },
    "prebidjs.ICriteoBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "criteo",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.ICriteoParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.ICriteoParams": {
      "additionalProperties": false,
      "description": "Criteo bid parameters. There is no public available documentation. All information was gathered from the prebid.js criteo adapter implementation.",
      "properties": {
        "networkId": {
          "description": "Required for all new criteo implementations",
          "type": "number"
        },
        "publisherSubId": {
          "description": "Used for reporting: we use de div-id here.",
          "type": "string"
        },
        "zoneId": {
          "description": "Included for legacy integrations that require a zone id.",
          "type": "number"
        }
      },
      "required": [
        "networkId"
      ],
      "type": "object"
    },
    "prebidjs.IDSPXBid": {
      "additionalProperties": false,
      "description": "DSPX (Screen on Demand)\n\nRequest are being made to `https://buyer.dspx.tv/request/`. In dev mode requrest are being made to `https://dcbuyer.dspx.tv/request/`",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "dspx",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IDSPXParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IDSPXParams": {
      "additionalProperties": false,
      "properties": {
        "devMode": {
          "description": "enables local development mode",
          "type": "boolean"
        },
        "pfilter": {
          "additionalProperties": false,
          "description": "Selection filter",
          "properties": {
            "floorprice": {
              "description": "floor price in EUR * 1.000.000",
              "type": "number"
            },
            "injTagId": {
              "description": "configure the DOM ID of the ad slots where the creative should be injected",
              "type": "string"
            },
            "private_auction": {
              "description": "Is private auction?  0  - no, 1 - yes",
              "enum": [
                0,
                1
              ],
              "type": "number"
            }
          },
          "type": "object"
        },
        "placement": {
          "description": "placement id",
          "type": "string"
        }
      },
      "required": [
        "placement"
      ],
      "type": "object"
    },
    "prebidjs.IDataAssetParams": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "Based on the `type` (which stands for a specific field) bidders will respond with the appropriate data (check link for list of types).",
          "type": "number"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "prebidjs.IGumGumBid": {
      "additionalProperties": false,
      "description": "## GumGum Bid params\n\nGumGum has a few special fields to determine the actual \"product\" being requested.\n\n`data.pi`:\n- `2` : inscreen\n- `3` : inslot\n- `5` : native (ICV)\n- `6` : invideo\n- `7` : video\n- `8` : skins",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "gumgum",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IGumGumParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IGumGumParams": {
      "additionalProperties": false,
      "properties": {
        "iriscat": {
          "description": "Iris.tv segments",
          "type": "string"
        },
        "irisid": {
          "description": "Iris.tv ID",
          "type": "string"
        },
        "product": {
          "const": "skins",
          "description": "Product Type required for new supported products like ‘skins’",
          "type": "string"
        },
        "pubId": {
          "description": "PublisherId required for all bid requests tracking multiple domains or sites",
          "type": "number"
        },
        "slot": {
          "description": "Slot ID required for slot placement only",
          "type": [
            "number",
            "string"
          ]
        },
        "zone": {
          "description": "TrackingID. required for all bid requests tracking a single domain or site",
          "type": "string"
        }
      },
      "required": [
        "zone"
      ],
      "type": "object"
    },
    "prebidjs.IImageAssetParams": {
      "additionalProperties": false,
      "properties": {
        "h": {
          "description": "Exact height of the image in pixels. Either `h` or `hmin` should be transmitted.",
          "type": "number"
        },
        "hmin": {
          "description": "Minimum requested height of the image in pixels (recommended!). This option should be used for any rescaling of images by the client. Either `h` or `hmin` should be transmitted.",
          "type": "number"
        },
        "type": {
          "description": "`type` can be either 1 (icon) or 3 (main image).",
          "enum": [
            1,
            3
          ],
          "type": "number"
        },
        "w": {
          "description": "Exact width of\tthe\timage\tin pixels. Either `w` or `wmin` should be transmitted.",
          "type": "number"
        },
        "wmin": {
          "description": "Minimum requested width of the image in pixels (recommended!). This option should be used for any rescaling of images by the client. Either `w` or `wmin` should be transmitted.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.IImproveDigitalBid": {
      "additionalProperties": false,
      "description": "ImproveDigital bid object.",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "improvedigital",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IImproveDigitalParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IImproveDigitalParams": {
      "additionalProperties": false,
      "description": "ImproveDigital bid parameters.",
      "properties": {
        "bidFloor": {
          "description": "Bid floor price",
          "examples": [
            0.01
          ],
          "type": "number"
        },
        "bidFloorCur": {
          "const": "EUR",
          "description": "Bid floor price currency. Supported values: USD (default), EUR, GBP, AUD, DKK, SEK, CZK, CHF, NOK",
          "type": "string"
        },
        "keyValues": {
          "additionalProperties": {
            "description": "key value map",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Optional field to add additional targeting values. Arbitrary keys can be added. The value is always a string array.",
          "type": "object"
        },
        "placementId": {
          "type": "number"
        }
      },
      "required": [
        "placementId"
      ],
      "type": "object"
    },
    "prebidjs.IIndexExchangeBid": {
      "additionalProperties": false,
      "description": "IndexExchange bid object.",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "ix",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IIndexExchangeParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IIndexExchangeParams": {
      "additionalProperties": false,
      "description": "IndexExchange bid parameters.",
      "properties": {
        "bidFloor": {
          "description": "Taken from source code:",
          "type": "number"
        },
        "bidFloorCur": {
          "const": "EUR",
          "description": "only required if the `bidFloor` parameter is set",
          "type": "string"
        },
        "siteId": {
          "description": "An IX-specific identifier that is associated with a specific size on this ad unit. This is similar to a placement ID or an ad unit ID that some other modules have.",
          "type": [
            "string",
            "number"
          ]
        },
        "size": {
          "description": "The single size associated with the site ID. It should be one of the sizes listed in the ad unit under `adUnits[].sizes` or `adUnits[].mediaTypes.banner.sizes`.\n\nNote that the 'ix' Prebid Server bid adapter ignores this parameter.",
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        }
      },
      "required": [
        "siteId"
      ],
      "type": "object"
    },
    "prebidjs.IInvibesBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "invibes",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IInvibesParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IInvibesParams": {
      "additionalProperties": false,
      "description": "Invibes bid parameters.",
      "properties": {
        "customEndpoint": {
          "description": "Custom test domain",
          "type": "number"
        },
        "domainId": {
          "description": "Id of domain",
          "type": "number"
        },
        "placementId": {
          "description": "The Invibes placement ID",
          "type": "string"
        }
      },
      "required": [
        "placementId"
      ],
      "type": "object"
    },
    "prebidjs.IMediaTypeBanner": {
      "additionalProperties": false,
      "description": "For AdUnits with MediaType: banner",
      "properties": {
        "sizes": {
          "description": "All the sizes that this ad unit can accept. Hint: Some SSPs handles only the first size, so keep that in mind.",
          "items": {
            "items": {
              "type": "number"
            },
            "maxItems": 2,
            "minItems": 2,
            "type": "array"
          },
          "type": "array"
        }
      },
      "required": [
        "sizes"
      ],
      "type": "object"
    },
    "prebidjs.IMediaTypeNative": {
      "additionalProperties": false,
      "properties": {
        "adTemplate": {
          "description": "Used in the ‘AdUnit-Defined Creative Scenario’, this value controls the Native template right in the page.",
          "type": "string"
        },
        "address": {
          "additionalProperties": false,
          "description": "Address of the Buyer/Store. e.g, “123 Main Street, Anywhere USA”\n\nad server key-value: `hb_native_address`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "body": {
          "additionalProperties": false,
          "description": "Text of the ad copy.\n\nad server key-value: `hb_native_body`",
          "properties": {
            "len": {
              "description": "Maximum length of text, in characters.",
              "type": "number"
            },
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "body2": {
          "additionalProperties": false,
          "description": "Additional Text of the ad copy.\n\nad server key-value: `hb_native_body2`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "clickUrl": {
          "additionalProperties": false,
          "description": "Where the user will end up if they click the ad.\n\nad server key-value: `hb_native_linkurl`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "cta": {
          "additionalProperties": false,
          "description": "Call to Action text, e.g., “Click here for more information”.\n\nad server key-value: `hb_native_cta`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "displayUrl": {
          "additionalProperties": false,
          "description": "Text that can be displayed instead of the raw click URL. e.g, “Example.com/Specials”\n\nad server key-value: `hb_native_displayUrl`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "downloads": {
          "additionalProperties": false,
          "description": "The total downloads of the advertised application/product\n\nad server key-value: `hb_native_downloads`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "icon": {
          "additionalProperties": false,
          "description": "The brand icon that will appear with the ad.\n\nad server key-value: `hb_native_icon`",
          "properties": {
            "aspect_ratios": {
              "description": "Alongside sizes, you can define allowed aspect ratios",
              "items": {
                "additionalProperties": false,
                "description": "NOTE: If you're using aspect_ratios in a native request sent to Prebid Server, the min_width and min_height fields become required instead of optional. If these fields are not included, that native request will be rejected.",
                "properties": {
                  "min_height": {
                    "description": "The minimum height required for an image to serve (in pixels)",
                    "type": "number"
                  },
                  "min_width": {
                    "description": "The minimum width required for an image to serve (in pixels).",
                    "type": "number"
                  },
                  "ratio_height": {
                    "description": "This, combined with `ratio_width`, determines the required aspect ratio for an image that can serve.",
                    "type": "number"
                  },
                  "ratio_width": {
                    "description": "This, combined with `ratio_height`, determines the required aspect ratio for an image that can serve.",
                    "type": "number"
                  }
                },
                "required": [
                  "ratio_width",
                  "ratio_height"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            },
            "sizes": {
              "anyOf": [
                {
                  "items": {
                    "type": "number"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                {
                  "items": {
                    "items": {
                      "type": "number"
                    },
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                  },
                  "type": "array"
                }
              ],
              "description": "All sizes this ad unit can accept."
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "image": {
          "additionalProperties": false,
          "description": "A picture that is associated with the brand, or grabs the user's attention.\n\nad server key-value: `hb_native_image`",
          "properties": {
            "aspect_ratios": {
              "description": "Alongside sizes, you can define allowed aspect ratios",
              "items": {
                "additionalProperties": false,
                "description": "NOTE: If you're using aspect_ratios in a native request sent to Prebid Server, the min_width and min_height fields become required instead of optional. If these fields are not included, that native request will be rejected.",
                "properties": {
                  "min_height": {
                    "description": "The minimum height required for an image to serve (in pixels)",
                    "type": "number"
                  },
                  "min_width": {
                    "description": "The minimum width required for an image to serve (in pixels).",
                    "type": "number"
                  },
                  "ratio_height": {
                    "description": "This, combined with `ratio_width`, determines the required aspect ratio for an image that can serve.",
                    "type": "number"
                  },
                  "ratio_width": {
                    "description": "This, combined with `ratio_height`, determines the required aspect ratio for an image that can serve.",
                    "type": "number"
                  }
                },
                "required": [
                  "ratio_width",
                  "ratio_height"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            },
            "sizes": {
              "anyOf": [
                {
                  "items": {
                    "type": "number"
                  },
                  "maxItems": 2,
                  "minItems": 2,
                  "type": "array"
                },
                {
                  "items": {
                    "items": {
                      "type": "number"
                    },
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array"
                  },
                  "type": "array"
                }
              ],
              "description": "All sizes this ad unit can accept."
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "likes": {
          "additionalProperties": false,
          "description": "The total number of individuals who like the advertised application/product\n\nad server key-value: `hb_native_likes`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "phone": {
          "additionalProperties": false,
          "description": "Phone Number of the Buyer/Store. e.g, “(123) 456-7890”\n\nad server key-value: `hb_native_phone`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "price": {
          "additionalProperties": false,
          "description": "The non-sale price of the advertised application/product\n\nad server key-value: `hb_native_likes`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "privacyIcon": {
          "additionalProperties": false,
          "description": "Icon to display for the privacy link, e.g. http://example.com/privacy_icon.png\n\nad server key-value: `hb_native_privicon`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "privacyLink": {
          "additionalProperties": false,
          "description": "Link to the Privacy Policy of the Buyer, e.g. http://example.com/privacy\n\nad server key-value: `hb_native_privacy`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "rating": {
          "additionalProperties": false,
          "description": "Rating information, e.g., “4” out of 5.\n\nad server key-value: `hb_native_rating`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "rendererUrl": {
          "description": "Used in the ‘Custom Renderer Scenario’, this points to javascript code that will produce the Native template.",
          "type": "string"
        },
        "salePrice": {
          "additionalProperties": false,
          "description": "The sale price of the advertised application/product\n\nad server key-value: `hb_native_saleprice`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "sendTargetingKeys": {
          "description": "Defines whether or not to send the hb_native_ASSET targeting keys to the ad server. Defaults to `true` for now, though we recommend setting this to `false` and utilizing one of the ways to define a native template.",
          "type": "boolean"
        },
        "sponsoredBy": {
          "additionalProperties": false,
          "description": "The name of the brand associated with the ad.\n\nad server key-value: `hb_native_brand`",
          "properties": {
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "title": {
          "additionalProperties": false,
          "description": "The title of the ad, usually a call to action or a brand name.\n\nad server key-value: `hb_native_title`",
          "properties": {
            "len": {
              "description": "Maximum length of text, in characters.",
              "type": "number"
            },
            "required": {
              "description": "true if the field is required for the native ad",
              "type": "boolean"
            },
            "sendId": {
              "description": "Prebid.js sends received asset values to a native template defined in your ad server using key-value targeting. The key-value targeting pairs are passed to the ad server as query string parameters. In some cases, sending native asset values as query string parameters may cause errors. For example, a long clickUrl value can exceed an ad request URL limit, or special characters within a body can get mangled by URL encoding. In these cases, you can opt to send URL-safe placeholder values to the ad server, and then in the native template, replace the placeholder values with the actual native values through a non-URL request to and response from Prebid.js.\n\nWithin mediaTypes.native, add sendId: true to any asset object you wish to send as a placeholder. For example, to send body and clickUrl as placeholders\n\n``` mediaTypes: {   native: {     body: {       sendId: true     },     clickUrl: {       sendId: true     },   }, }, ```\n\nNote: The creative designs must have the universal-prebid-creative included ``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@1.7.0/dist/native-trk.js\"></script> ```\n\nor for the latest version\n\n``` <script src=\"https://cdn.jsdelivr.net/npm/prebid-universal-creative@latest/dist/native-trk.js\"></script> ```",
              "type": "boolean"
            }
          },
          "required": [
            "required"
          ],
          "type": "object"
        },
        "type": {
          "const": "image",
          "description": "Prebid.js defines “types” of native ad for you as a convenience. This way you have less code to maintain, that is hopefully more descriptive of your intent.\n\nFor now there is only the image type, but more will be added.\n\nThe image native ad type implies the following required fields:\n\n- image\n- title\n- sponsoredBy\n- clickUrl\n\nAnd the following optional fields:\n\n- body\n- icon\n- cta",
          "type": "string"
        }
      },
      "type": "object"
    },
    "prebidjs.IMediaTypeNativeOrtb": {
      "additionalProperties": false,
      "properties": {
        "adTemplate": {
          "description": "Used in the ‘AdUnit-Defined Creative Scenario’, this value controls the Native template right in the page.",
          "type": "string"
        },
        "ortb": {
          "$ref": "#/definitions/prebidjs.IOrtbNativeSpecs",
          "description": "OpenRTB configuration of the Native assets in the 1.2 native specs."
        },
        "rendererUrl": {
          "description": "Used in the ‘Custom Renderer Scenario’, this points to javascript code that will produce the Native template.",
          "type": "string"
        },
        "sendTargetingKeys": {
          "description": "DEPRECATED Defines whether or not to send the hb_native_ASSET targeting keys to the ad server. Defaults to `false`.",
          "type": "boolean"
        }
      },
      "required": [
        "ortb"
      ],
      "type": "object"
    },
    "prebidjs.IMediaTypeVideo": {
      "additionalProperties": false,
      "description": "For AdUnits with MediaType: video",
      "properties": {
        "api": {
          "description": "API frameworks supported\n\nValues:   1: VPAID 1.0   2: VPAID 2.0   3: MRAID-1   4: ORMMA   5: MRAID-2   6: MRAID-3\n\n*Recommended*",
          "items": {
            "$ref": "#/definitions/prebidjs.video.Api"
          },
          "type": "array"
        },
        "battr": {
          "description": "Blocked creative attributes,",
          "items": {
            "$ref": "#/definitions/prebidjs.video.CreativeAttributes"
          },
          "type": "array"
        },
        "context": {
          "description": "The video context, either `'instream'`, `'outstream'`, or `'adpod'` (for long-form videos).\n\nDefaults to ‘instream’",
          "enum": [
            "outstream",
            "instream",
            "adpod"
          ],
          "type": "string"
        },
        "h": {
          "description": "Height of the video player in device independent pixels (DIPS) - *Recommended*",
          "type": "number"
        },
        "linearity": {
          "$ref": "#/definitions/prebidjs.video.Linearity",
          "description": "Indicates if the impression is linear or nonlinear Values:   1: Linear/In-Stream   2: Non-Linear/Overlay."
        },
        "maxbitrate": {
          "description": "Maximum bit rate in Kbps.",
          "type": "number"
        },
        "maxduration": {
          "description": "Maximum ad duration in seconds",
          "type": "number"
        },
        "mimes": {
          "description": "Content MIME types supported.\n\n*Require by OpenRTB when using [Prebid Server](https://docs.prebid.org/prebid-server/overview/prebid-server-overview.html).*",
          "items": {
            "$ref": "#/definitions/prebidjs.video.MimeType"
          },
          "type": "array"
        },
        "minbitrate": {
          "description": "Minimum bit rate in Kbps.",
          "type": "number"
        },
        "minduration": {
          "description": "Minimum ad duration in seconds",
          "type": "number"
        },
        "placement": {
          "$ref": "#/definitions/prebidjs.video.Placement",
          "description": "Video placement type.\n\n  1: In-Stream      Played before, during or after the streaming video content that the consumer has requested      (e.g., Pre-roll, Mid-roll, Post-roll).   2: In-Banner      Exists within a web banner that leverages the banner space to deliver a video experience as      opposed to another static or rich media format. The format relies on the existence of display      ad inventory on the page for its deliver   3: In-Article      Loads and plays dynamically between paragraphs of editorial content; existing as a standalone      branded message   4: In-Feed      Found in content, social, or product feeds   5: Interstitial/Slider/Floating\n\n *Highly recommended* because some bidders require more than context=outstream."
        },
        "playbackmethod": {
          "description": "Allowed playback methods.. Defines whether inventory is user-initiated or autoplay sound on/off If none specified, all are allowed. For list, see [OpenRTB spec|https://www.iab.com/wp-content/uploads/2016/03/OpenRTB-API-Specification-Version-2-5-FINAL.pdf].\n\n*Required by OpenRTB when using [Prebid Server](https://docs.prebid.org/prebid-server/overview/prebid-server-overview.html).*\n\nValues:  1: Auto-play, sound on  2: Auto-play, sound off  3: Click-to-play  4: mouse-over  5: Initiates on Entering Viewport with Sound On  6: Initiates on Entering Viewport with Sound Off by Default",
          "items": {
            "$ref": "#/definitions/prebidjs.video.PlaybackMethod"
          },
          "type": "array"
        },
        "playerSize": {
          "anyOf": [
            {
              "items": {
                "items": {
                  "type": "number"
                },
                "maxItems": 2,
                "minItems": 2,
                "type": "array"
              },
              "type": "array"
            },
            {
              "items": {
                "type": "number"
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          ],
          "description": "Player size(s) that this ad unit can accept (width, height)."
        },
        "plcmt": {
          "$ref": "#/definitions/prebidjs.video.Plcmt"
        },
        "protocols": {
          "description": "Array of supported video protocols. For list, see [OpenRTB spec|https://www.iab.com/wp-content/uploads/2016/03/OpenRTB-API-Specification-Version-2-5-FINAL.pdf].\n\n*Required by OpenRTB when using [Prebid Server](https://docs.prebid.org/prebid-server/overview/prebid-server-overview.html).*\n\nSupported video bid response protocols Values   1: VAST 1.0   2: VAST 2.0   3: VAST 3.0   4: VAST 1.0 Wrapper   5: VAST 2.0 Wrapper   6: VAST 3.0 Wrapper   7: VAST 4.0   8: VAST 4.0 Wrapper   9: DAAST 1.0  10: DAAST 1.0 Wrapper",
          "items": {
            "$ref": "#/definitions/prebidjs.video.Protocol"
          },
          "type": "array"
        },
        "renderer": {
          "$ref": "#/definitions/prebidjs.IRenderer",
          "description": "The renderer associated to the ad-unit. Only for mediaType = video."
        },
        "skip": {
          "$ref": "#/definitions/prebidjs.video.Skip",
          "description": "Indicates if the player will allow the video to be skipped, where `0` = no, `1` = yes.\n\nIf a bidder sends markup/creative that is itself skippable, the Bid object should include the attr array with an element of 16 indicating skippable video"
        },
        "startdelay": {
          "description": "Indicates the start delay in seconds for pre-roll, mid-roll, or post-roll ad placements.\n\nPossible values: > 0 Mid-Roll (value indicates start delay in second)   0 Pre-Roll  -1 Generic Mid-Roll  -2, Generic Post-Roll",
          "type": "number"
        },
        "w": {
          "description": "Width of the video player in device independent pixels (DIPS) - *Recommended*",
          "type": "number"
        }
      },
      "required": [
        "context",
        "api",
        "mimes",
        "protocols",
        "playbackmethod",
        "minduration",
        "maxduration",
        "startdelay",
        "skip",
        "placement",
        "plcmt"
      ],
      "type": "object"
    },
    "prebidjs.IMediaTypes": {
      "additionalProperties": false,
      "description": "Defines one or multiple media types the ad unit supports. Media Types can be \"banner\", \"native\" or \"video.",
      "properties": {
        "banner": {
          "$ref": "#/definitions/prebidjs.IMediaTypeBanner",
          "description": "optional. If no other properties are specified, this is the default."
        },
        "native": {
          "anyOf": [
            {
              "$ref": "#/definitions/prebidjs.IMediaTypeNative"
            },
            {
              "$ref": "#/definitions/prebidjs.IMediaTypeNativeOrtb"
            }
          ],
          "description": "Defines properties of a native ad."
        },
        "video": {
          "$ref": "#/definitions/prebidjs.IMediaTypeVideo",
          "description": "Defines properties of a video ad."
        }
      },
      "type": "object"
    },
    "prebidjs.INanoInteractiveBid": {
      "additionalProperties": false,
      "description": "NanoInteractive bid object.",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "nanointeractive",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.INanoInteractiveParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.INanoInteractiveParams": {
      "additionalProperties": false,
      "description": "NanoInteractive bid parameters.",
      "properties": {
        "category": {
          "type": "string"
        },
        "dpid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nq": {
          "type": "string"
        },
        "pid": {
          "type": "string"
        },
        "sec": {
          "type": "string"
        }
      },
      "required": [
        "sec",
        "dpid",
        "pid",
        "category"
      ],
      "type": "object"
    },
    "prebidjs.INativeDataAssetOrtb": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/prebidjs.IDataAssetParams",
          "description": "Misc component like “sponsored by”, “rating”, likes”, or other fields that have been standardized in OpenRTB 1.2. Based on the type (which stands for a specific field) bidders will respond with the appropriate data (check link for more info)."
        },
        "id": {
          "description": "Unique asset ID, assigned by exchange. Typically a counter for the\tarray.",
          "type": "number"
        },
        "required": {
          "description": "Set to 1 if asset is required. Defaults to 0.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        }
      },
      "required": [
        "data",
        "id"
      ],
      "type": "object"
    },
    "prebidjs.INativeEventtrackers": {
      "additionalProperties": false,
      "properties": {
        "event": {
          "description": "Type of event available for tracking. 1 for impression",
          "type": "number"
        },
        "methods": {
          "description": "Array of the types of tracking available for the given event. 1 for image-pixel tracking; 2 for javascript-based tracking; 500+ for exchange-specific.",
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "event",
        "methods"
      ],
      "type": "object"
    },
    "prebidjs.INativeImgAssetOrtb": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "Unique asset ID, assigned by exchange. Typically a counter for the\tarray.",
          "type": "number"
        },
        "img": {
          "$ref": "#/definitions/prebidjs.IImageAssetParams",
          "description": "Image request."
        },
        "required": {
          "description": "Set to 1 if asset is required. Defaults to 0.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        }
      },
      "required": [
        "id",
        "img"
      ],
      "type": "object"
    },
    "prebidjs.INativeTitleAssetOrtb": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "Unique asset ID, assigned by exchange. Typically a counter for the\tarray.",
          "type": "number"
        },
        "required": {
          "description": "Set to 1 if asset is required. Defaults to 0.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        },
        "title": {
          "$ref": "#/definitions/prebidjs.ITitleAssetParams",
          "description": "Title of the ad."
        }
      },
      "required": [
        "id",
        "title"
      ],
      "type": "object"
    },
    "prebidjs.IOguryBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "ogury",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IOguryParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IOguryParams": {
      "additionalProperties": false,
      "properties": {
        "adSlotSelector": {
          "description": "You may choose to initially embed the header ad inside a predefined ad slot",
          "type": "string"
        },
        "adUnitId": {
          "description": "Your ad unit id configured with Ogury",
          "examples": [
            "2c4d61d0-90aa-0139-0cda-0242ac120004"
          ],
          "type": "string"
        },
        "assetKey": {
          "description": "The asset key provided by Ogury",
          "examples": [
            "OGY-CA41D116484F"
          ],
          "type": "string"
        },
        "gravity": {
          "default": "`BOTTOM_CENTER`",
          "description": "The area based on which the thumbnail will be positioned.\n\nThis value is ignored if the gravity is set to `CENTER`, `TOP_CENTER` or `BOTTOM_CENTER`",
          "enum": [
            "TOP_LEFT",
            "TOP_RIGHT",
            "TOP_CENTER",
            "BOTTOM_LEFT",
            "BOTTOM_RIGHT",
            "BOTTOM_CENTER",
            "CENTER"
          ],
          "type": "string"
        },
        "headerSelector": {
          "description": "The headerSelector param has to be set with the identifier of your page's header. For example, if your header is defined by\n\n```html <header id=\"page-header-id\" class=\"page-header-class\">My Home page</header> ```",
          "examples": [
            "#page-header-id"
          ],
          "type": "string"
        },
        "headerStickiness": {
          "default": "`STICKY`",
          "description": "The headerStickiness param has to be set with the header type of your page. For the moment we supported only two types of header `STICKY` or `NON_STICKY`.",
          "enum": [
            "STICKY",
            "NON_STICKY"
          ],
          "type": "string"
        },
        "skipSizeCheck": {
          "default": false,
          "description": "Undocumented parameter",
          "type": "boolean"
        },
        "xMargin": {
          "default": 20,
          "description": "distance on the x axis from the gravity area to thumbnail. Value must be in px.",
          "type": "number"
        },
        "yMargin": {
          "default": 20,
          "description": "distance on the y axis from the gravity corner to thumbnail. Value must be in px.\n\nThis value is ignored if the gravity is set to `CENTER`",
          "type": "number"
        }
      },
      "required": [
        "assetKey",
        "adUnitId"
      ],
      "type": "object"
    },
    "prebidjs.IOneTagBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "onetag",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IOneTagParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IOneTagParams": {
      "additionalProperties": false,
      "properties": {
        "ext": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "not": {}
              }
            ],
            "description": "Other arbitrary key-values"
          },
          "description": "A set of custom key-value pairs",
          "properties": {
            "placement_name": {
              "description": "OneTag automatically maps placements using the `code` parameter of the Prebid ad unit. You can override this, with this parameter",
              "type": "string"
            }
          },
          "type": "object"
        },
        "publisherId": {
          "description": "The publisher’s ID provided by OneTag",
          "type": "string"
        }
      },
      "required": [
        "publisherId",
        "ext"
      ],
      "type": "object"
    },
    "prebidjs.IOpenxBid": {
      "additionalProperties": false,
      "description": "OpenX bid object",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "openx",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IOpenxParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IOpenxParams": {
      "additionalProperties": false,
      "description": "OpenX bid parameters",
      "properties": {
        "customFloor": {
          "description": "Minimum price in `USD`. customFloor applies to a specific unit. For example, use the following value to set a $1.50 floor: 1.50\n\n*WARNING:* Misuse of this parameter can impact revenue",
          "type": "number"
        },
        "delDomain": {
          "description": "OpenX delivery domain provided by your OpenX representative. example: \"PUBLISHER-d.openx.net\"",
          "type": "string"
        },
        "unit": {
          "description": "OpenX ad unit ID provided by your OpenX representative. example: \"1611023122\"",
          "type": "string"
        }
      },
      "required": [
        "delDomain",
        "unit"
      ],
      "type": "object"
    },
    "prebidjs.IOrbidderBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "orbidder",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IOrbidderParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IOrbidderParams": {
      "additionalProperties": false,
      "description": "orbidder bid params",
      "properties": {
        "accountId": {
          "description": "Orbidder Account ID.",
          "type": "string"
        },
        "bidfloor": {
          "description": "Placement floor price.",
          "type": "number"
        },
        "keyValues": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Custom key/value object",
          "type": "object"
        },
        "placementId": {
          "description": "Placement Id.",
          "type": "string"
        }
      },
      "required": [
        "accountId",
        "placementId"
      ],
      "type": "object"
    },
    "prebidjs.IOrtb2Imp": {
      "additionalProperties": false,
      "description": "Values passed by prebid during a prebid server auction call.",
      "properties": {
        "ext": {
          "additionalProperties": false,
          "properties": {
            "data": {},
            "prebid": {
              "$ref": "#/definitions/prebidjs.IOrtb2ImpPrebid",
              "description": "custom prebid extensions"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "prebidjs.IOrtb2ImpPrebid": {
      "additionalProperties": false,
      "description": "custom prebid ortb2 extension. Mainly used for prebid server communication",
      "properties": {
        "bidder": {
          "additionalProperties": false,
          "properties": {
            "adagio": {},
            "adf": {},
            "aduptech": {},
            "amx": {},
            "appnexus": {},
            "appnexusAst": {},
            "connectad": {},
            "criteo": {},
            "dspx": {},
            "gumgum": {},
            "improvedigital": {},
            "invibes": {},
            "ix": {},
            "nanointeractive": {},
            "ogury": {},
            "onetag": {},
            "openx": {},
            "orbidder": {},
            "pubmatic": {},
            "rads": {},
            "rubicon": {},
            "seedtag": {},
            "showheroesBs": {},
            "smartadserver": {},
            "smartx": {},
            "spotx": {},
            "stroeerCore": {},
            "teads": {},
            "triplelift": {},
            "unruly": {},
            "visx": {},
            "vlyby": {},
            "xhb": {},
            "yieldlab": {}
          },
          "required": [
            "adagio",
            "amx",
            "aduptech",
            "adf",
            "connectad",
            "criteo",
            "appnexusAst",
            "appnexus",
            "gumgum",
            "improvedigital",
            "ix",
            "invibes",
            "nanointeractive",
            "pubmatic",
            "ogury",
            "onetag",
            "openx",
            "smartadserver",
            "smartx",
            "unruly",
            "teads",
            "triplelift",
            "yieldlab",
            "seedtag",
            "spotx",
            "showheroesBs",
            "stroeerCore",
            "xhb",
            "dspx",
            "rubicon",
            "rads",
            "visx",
            "vlyby",
            "orbidder"
          ],
          "type": "object"
        },
        "storedrequest": {
          "$ref": "#/definitions/prebidjs.IOrtb2ImpStoredRequest"
        }
      },
      "type": "object"
    },
    "prebidjs.IOrtb2ImpStoredRequest": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "description": "Specify a stored request id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "prebidjs.IOrtbNativeSpecs": {
      "additionalProperties": false,
      "properties": {
        "assets": {
          "description": "Components of the ad that will assembled using the template. An asset must have an id, used for matching the request with the response. Each asset should additionally have one of the following properties (but may only contain one): title, img, data",
          "items": {
            "$ref": "#/definitions/prebidjs.NativeAssetOrtb"
          },
          "type": "array"
        },
        "eventtrackers": {
          "description": "Specifies the types of events the bidder can request to be tracked in the bid response, and which types of tracking are available for each event type, and is included as an array in the request.",
          "items": {
            "$ref": "#/definitions/prebidjs.INativeEventtrackers"
          },
          "type": "array"
        },
        "privacy": {
          "description": "Set  to  1  when  the  native  ad supports  buyer-specific  privacy notice.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        },
        "ver": {
          "description": "Version of the Native Markup version in use. Defaults to '1.2'",
          "type": "string"
        }
      },
      "required": [
        "assets"
      ],
      "type": "object"
    },
    "prebidjs.IPrebidJsConfig": {
      "additionalProperties": false,
      "description": "## Global Prebid Configuration\n\nContains various configuration options for prebid. The type is not complete. Only the necessary configuration options are listed here.\n\nNOTE: modules can extend this configuration as well, so you may find the information in various prebid       documentation pages. One example is the consentModule.",
      "properties": {
        "adagio": {
          "additionalProperties": false,
          "description": "Global Adagio property",
          "properties": {
            "siteId": {
              "description": "a global `siteId` is a shortcut to facilitate the integration for publisher.",
              "type": "string"
            },
            "useAdUnitCodeAsPlacement": {
              "description": "Edge case. Useful when Prebid Manager cannot handle properly params setting",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "allowActivities": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IAllowActivities"
        },
        "bidCacheFilterFunction": {
          "$comment": "(bid: any) => boolean",
          "description": "When Bid Caching is turned on, a custom Filter Function can be defined to gain more granular control over which “cached” bids can be used. This function will only be called for “cached” bids from previous auctions, not “current” bids from the most recent auction. The function should take a single bid object argument, and return true to use the cached bid, or false to not use the cached bid. For Example, to turn on Bid Caching, but exclude cached video bids, you could do this:",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "bid": {}
              },
              "required": [
                "bid"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "bidderSequence": {
          "default": "`'random'`",
          "description": "Set the order in which bidders are called.",
          "enum": [
            "random",
            "fixed"
          ],
          "type": "string"
        },
        "bidderTimeout": {
          "description": "global bidder timeout",
          "type": "number"
        },
        "consentManagement": {
          "$ref": "#/definitions/prebidjs.consent.IConsentManagementConfig",
          "description": "'Consent Management' module configuration"
        },
        "currency": {
          "$ref": "#/definitions/prebidjs.currency.ICurrencyConfig",
          "description": "The configuration for the currency module\n\nhttps://prebid.org/dev-docs/modules/currency.html"
        },
        "debug": {
          "description": "Turn on debugging",
          "type": "boolean"
        },
        "deviceAccess": {
          "description": "You can prevent Prebid.js from reading or writing cookies or HTML localstorage by setting this flag:\n\n```js pbjs.setConfig({ deviceAccess: false }); ```\n\nThis can be useful in GDPR, CCPA, COPPA or other privacy scenarios where a publisher has determined that header bidding should not read from or write the user’s device.",
          "type": "boolean"
        },
        "disableAjaxTimeout": {
          "description": "Prebid core adds a timeout on XMLHttpRequest request to terminate the request once auction is timedout. Since Prebid is ignoring all the bids after timeout it does not make sense to continue the request after timeout. However, you have the option to disable this by using",
          "type": "boolean"
        },
        "enableSendAllBids": {
          "description": "After this method is called, Prebid.js will generate bid keywords for all bids, instead of the default behavior of only sending the top winning bid to the ad server.\n\nWith the sendAllBids mode enabled, your page can send all bid keywords to your ad server. Your ad server will see all the bids, then make the ultimate decision on which one will win. Some ad servers, such as DFP, can then generate reporting on historical bid prices from all bidders.\n\nNote that this config option must be called before pbjs.setTargetingForGPTAsync() or pbjs.getAdserverTargeting().\n\nAfter this option is set, pbjs.getAdserverTargeting() will give you the below JSON (example). pbjs.setTargetingForGPTAsync() will apply the below keywords in the JSON to GPT (example below)\n\nDefault: true",
          "type": "boolean"
        },
        "enableTIDs": {
          "description": "These identifiers are extremely powerful for discrepancy reconciliation, ad quality investigations, consent audits, and a huge range of other applications. They also allow data appended to different requests (e.g. dealIds) to be commingled downstream. For this reason, our publisher committee and Prebid.org counsel have decided to require publisher opt-in to their inclusion in the bid stream. This means Prebid engineering changed every openrtb request in the project to potentially transmit a null in these fields. Comments were added to bid adapters not using OpenRTB that send them over the wire to confirm they can accept null values.",
          "type": "boolean"
        },
        "eventHistoryTTL": {
          "description": "By default, Prebid keeps in memory a log of every event since the initial page load, and makes it available to analytics adapters and getEvents(). This can cause high memory usage on long-running single-page apps; you can set a limit on how long events are preserved with eventHistoryTTL",
          "type": "number"
        },
        "floors": {
          "$ref": "#/definitions/prebidjs.floors.IFloorConfig",
          "description": "Floor price configuration\n\nRequires the prebid floor price module to be enabled"
        },
        "gptPreAuction": {
          "$ref": "#/definitions/prebidjs.gptPreAuction.GptPreAuctionConfig",
          "description": "_GPT Pre-Auction Module_ must be enabled."
        },
        "improvedigital": {
          "additionalProperties": false,
          "description": "Global Improve Digital property",
          "properties": {
            "singleRequest": {
              "description": "Enable the single request mode, which will send all bids in one request.\n\nAvailable since prebid 1.37.0",
              "type": "boolean"
            },
            "usePrebidSizes": {
              "description": "By default, the adapter doesn't send Prebid ad unit sizes to Improve Digital's ad server and the sizes defined for each placement in the Polaris platform will be used.\n\nThis configuration makes improve use the prebid sizes parameter.\n\nAvailable since prebid 2.8.0",
              "type": "boolean"
            }
          },
          "required": [
            "singleRequest",
            "usePrebidSizes"
          ],
          "type": "object"
        },
        "maxNestedIframes": {
          "default": "`10`",
          "description": "Prebid.js will loop upward through nested iframes to find the top-most referrer. This setting limits how many iterations it will attempt before giving up and not setting referrer.",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "type": "number"
        },
        "maxRequestsPerOrigin": {
          "description": "Since browsers have a limit of how many requests they will allow to a specific domain before they block, Prebid.js will queue auctions that would cause requests to a specific origin to exceed that limit. The limit is different for each browser. Prebid.js defaults to a max of *4* requests per origin.",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          "type": "number"
        },
        "mediaTypePriceGranularity": {
          "$ref": "#/definitions/prebidjs.priceGranularity.IMediaTypePriceGranularityConfig",
          "description": "The default Prebid price granularities cap out at $20, which isn't always convenient for video ads, which can command more than $20. One solution is to just set up a custom price granularity as described above. Another approach is mediaTypePriceGranularity config that may be set to define granularities for each of five media types: banner, video, video-instream, video-outstream, and native. e.g."
        },
        "ortb2": {
          "$ref": "#/definitions/prebidjs.firstpartydata.PrebidFirstPartyData",
          "description": "Publishers supply First Party Data (FPD) by specifying attributes as configuration.\n\nNote that supplying first party *user* data may require special consent in certain regions. Prebid.js does *not* police the passing of user data as part of its GDPR or CCPA modules."
        },
        "pageUrl": {
          "description": "Override the Prebid.js page referrer for some bidders.",
          "type": "string"
        },
        "priceGranularity": {
          "$ref": "#/definitions/prebidjs.priceGranularity.PriceGranularityConfig",
          "description": "This configuration defines the price bucket granularity setting that will be used for the hb_pb keyword."
        },
        "publisherDomain": {
          "deprecated": "This API is deprecated. Please use ‘pageUrl’ instead.",
          "description": "Set the publisher's domain where Prebid is running, for cross-domain iframe communication",
          "type": "string"
        },
        "realTimeData": {
          "$ref": "#/definitions/prebidjs.realtimedata.IRealTimeDataConfig"
        },
        "rubicon": {
          "additionalProperties": false,
          "description": "Global Rubicon property",
          "properties": {
            "singleRequest": {
              "description": "Enable the single request mode, which will send all bids in one request.\n\nAvailable since prebid 1.12.0",
              "type": "boolean"
            }
          },
          "required": [
            "singleRequest"
          ],
          "type": "object"
        },
        "s2sConfig": {
          "anyOf": [
            {
              "$ref": "#/definitions/prebidjs.server.S2SConfig"
            },
            {
              "items": {
                "$ref": "#/definitions/prebidjs.server.S2SConfig"
              },
              "type": "array"
            }
          ]
        },
        "schain": {
          "$ref": "#/definitions/prebidjs.schain.ISupplyChainConfig",
          "description": "## Supply Chain Object Module Config"
        },
        "targetingControls": {
          "$ref": "#/definitions/prebidjs.targetingcontrols.ITargetingControls",
          "description": "The `targetingControls` object passed to pbjs.setConfig provides some options to influence how an auction's targeting keys are generated and managed."
        },
        "timeoutBuffer": {
          "default": "`400` ms",
          "description": "Prebid core adds a timeout buffer to extend the time that bidders have to return a bid after the auction closes. This buffer is used to offset the “time slippage” of the setTimeout behavior in browsers. Prebid.js sets the default value to *400ms*.\n\nYou can change this value by setting `timeoutBuffer` to the amount of time you want to use. The following example sets the buffer to 300ms.\n\n```js pbjs.setConfig({ timeoutBuffer: 300 }); ```",
          "type": "number"
        },
        "useBidCache": {
          "default": false,
          "description": "Prebid.js currently allows for caching and reusing bids in  [a very narrowly defined scope](https://docs.prebid.org/dev-docs/faq.html#does-prebidjs-cache-bids).\n\nHowever, if you’d like, you can disable this feature and prevent Prebid.js from using anything but the latest bids for a given auction.",
          "type": "boolean"
        },
        "userSync": {
          "$ref": "#/definitions/prebidjs.userSync.IUserSyncConfig"
        }
      },
      "required": [
        "currency"
      ],
      "type": "object"
    },
    "prebidjs.IPrebidServerBid": {
      "additionalProperties": false,
      "description": "The prebid server bid object is special as it doesn't user the `bidder` property, but rather a `module` property.",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "module": {
          "const": "pbsBidAdapter",
          "type": "string"
        },
        "ortb2Imp": {
          "additionalProperties": false,
          "properties": {
            "ext": {
              "additionalProperties": false,
              "properties": {
                "data": {},
                "prebid": {
                  "$ref": "#/definitions/prebidjs.IOrtb2ImpPrebid",
                  "description": "custom prebid extensions"
                }
              },
              "type": "object"
            },
            "prebid": {
              "additionalProperties": false,
              "properties": {
                "bidder": {
                  "additionalProperties": false,
                  "properties": {
                    "adagio": {},
                    "adf": {},
                    "aduptech": {},
                    "amx": {},
                    "appnexus": {},
                    "appnexusAst": {},
                    "connectad": {},
                    "criteo": {},
                    "dspx": {},
                    "gumgum": {},
                    "improvedigital": {},
                    "invibes": {},
                    "ix": {},
                    "nanointeractive": {},
                    "ogury": {},
                    "onetag": {},
                    "openx": {},
                    "orbidder": {},
                    "pubmatic": {},
                    "rads": {},
                    "rubicon": {},
                    "seedtag": {},
                    "showheroesBs": {},
                    "smartadserver": {},
                    "smartx": {},
                    "spotx": {},
                    "stroeerCore": {},
                    "teads": {},
                    "triplelift": {},
                    "unruly": {},
                    "visx": {},
                    "vlyby": {},
                    "xhb": {},
                    "yieldlab": {}
                  },
                  "required": [
                    "adagio",
                    "amx",
                    "aduptech",
                    "adf",
                    "connectad",
                    "criteo",
                    "appnexusAst",
                    "appnexus",
                    "gumgum",
                    "improvedigital",
                    "ix",
                    "invibes",
                    "nanointeractive",
                    "pubmatic",
                    "ogury",
                    "onetag",
                    "openx",
                    "smartadserver",
                    "smartx",
                    "unruly",
                    "teads",
                    "triplelift",
                    "yieldlab",
                    "seedtag",
                    "spotx",
                    "showheroesBs",
                    "stroeerCore",
                    "xhb",
                    "dspx",
                    "rubicon",
                    "rads",
                    "visx",
                    "vlyby",
                    "orbidder"
                  ],
                  "type": "object"
                },
                "storedrequest": {
                  "$ref": "#/definitions/prebidjs.IOrtb2ImpStoredRequest"
                }
              },
              "required": [
                "storedrequest"
              ],
              "type": "object"
            }
          },
          "required": [
            "prebid"
          ],
          "type": "object"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IPrebidServerBidParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "module",
        "ortb2Imp",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IPrebidServerBidParams": {
      "additionalProperties": false,
      "properties": {
        "configName": {
          "description": "this must reference the `name` of an `s2sConfig` object",
          "type": "string"
        }
      },
      "required": [
        "configName"
      ],
      "type": "object"
    },
    "prebidjs.IPubMaticBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "pubmatic",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IPubMaticParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IPubMaticParams": {
      "additionalProperties": false,
      "properties": {
        "adSlot": {
          "description": "The adslot definition encodes the ad slot name and size.\n\nFormat : [adSlot name| adSlot id]@[width]x[height] Example: pubmatic_test@300x250 Example: 123456@300x250",
          "type": "string"
        },
        "currency": {
          "description": "Bid currency Value configured only in the 1st adunit will be passed on. Values if present in subsequent adunits, will be ignored.",
          "enum": [
            "EUR",
            "USD"
          ],
          "type": "string"
        },
        "kadfloor": {
          "description": "Bid Floor",
          "examples": [
            "1.75"
          ],
          "type": "string"
        },
        "outstreamAU": {
          "description": "Oustream AdUnit described in Blue BillyWig UI. This field is mandatory if mimeType is described as video and context is outstream (i.e., for outstream videos).\n\nThe code calls this 'rendererCode'.",
          "examples": [
            "renderer_test_pubmatic"
          ],
          "type": "string"
        },
        "publisherId": {
          "type": "string"
        },
        "video": {
          "additionalProperties": false,
          "description": "Vide parameters. Required if mediaType contains `video`.",
          "properties": {
            "api": {
              "description": "API frameworks supported Values:   1: VPAID 1.0   2: VPAID 2.0   3: MRAID-1   4: ORMMA   5: MRAID-2",
              "items": {
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "type": "number"
              },
              "type": "array"
            },
            "battr": {
              "description": "Blocked creative attributes,",
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "linearity": {
              "description": "Indicates if the impression is linear or nonlinear Values:   1: Linear/In-Stream   2: Non-Linear/Overlay.",
              "enum": [
                1,
                2
              ],
              "type": "number"
            },
            "maxbitrate": {
              "description": "Maximum bit rate in Kbps.",
              "type": "number"
            },
            "maxduration": {
              "description": "Maximum ad duration in seconds",
              "type": "number"
            },
            "mimes": {
              "items": {
                "enum": [
                  "video/mp4",
                  "video/webm",
                  "video/flv",
                  "video/H264",
                  "video/ogg",
                  "video/MPV"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "minbitrate": {
              "description": "Minimum bit rate in Kbps.",
              "type": "number"
            },
            "minduration": {
              "description": "Minimum ad duration in seconds",
              "type": "number"
            },
            "placement": {
              "description": "Video placement type.\n\n  1: In-Stream   2: In-Banner   3: In-Article   4: In-Feed   5: Interstitial/Slider/Floating",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ],
              "type": "number"
            },
            "playbackmethod": {
              "description": "Defines whether inventory is user-initiated or autoplay sound on/off Values:  1: Auto-play, sound on  2: Auto-play, sound off  3: Click-to-play  4: mouse-over",
              "enum": [
                1,
                2,
                3,
                4
              ],
              "type": "number"
            },
            "protocols": {
              "description": "Supported video bid response protocols Values   1: VAST 1.0   2: VAST 2.0   3: VAST 3.0   4: VAST 1.0 Wrapper   5: VAST 2.0 Wrapper   6: VAST 3.0 Wrapper",
              "items": {
                "enum": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6
                ],
                "type": "number"
              },
              "type": "array"
            },
            "skippable": {
              "description": "If ‘true’, user can skip ad",
              "type": "boolean"
            }
          },
          "required": [
            "mimes"
          ],
          "type": "object"
        }
      },
      "required": [
        "publisherId",
        "adSlot"
      ],
      "type": "object"
    },
    "prebidjs.IPubstackConfig": {
      "additionalProperties": false,
      "properties": {
        "adUnitName": {
          "description": "By default, the integration uses the adUnitCode defined in the Ad Unit. If you want Pubstack to use another name, you just have to provide the desired value through the `pubstack.adUnitName` property.\n\nThis feature is very useful when a site implements a lazy-loading or a refresh strategy. The following example shows you how to set a custom name, whatever the ad unit code is.",
          "type": "string"
        },
        "adUnitPath": {
          "description": "This is required for Google Ad Manager integration.\n\nWithin the Prebid configuration (client-side), every prebid adUnit must be matched with a GAM adUnit, so that we can display the corresponding AdX revenue in Pubstack. In order to do that, you need to add the field \"pubstack\".\"adUnitPath\" to all ad units. This adUnitPath must be constructed* as such:\n\n  `/networkId/top_level1/level2/level3` (same as the DFP adUnitPath)",
          "type": "string"
        },
        "tags": {
          "description": "Allows the publisher to push arbitrary dimensions to pubstack. Can only be used with coordination of pubstack so the data can actually be used.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "prebidjs.IRecognifiedBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "rads",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IRecognifiedParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IRecognifiedParams": {
      "additionalProperties": false,
      "properties": {
        "placement": {
          "description": "Placement ID from Rads.",
          "type": "string"
        }
      },
      "required": [
        "placement"
      ],
      "type": "object"
    },
    "prebidjs.IRenderer": {
      "additionalProperties": false,
      "description": "Prebid.js will select the renderer used to display the outstream video in the following way:\n\n1. If a renderer is associated with the Prebid adUnit, it will be used to display any outstream demand    associated with that adUnit. Below, we will provide an example of an adUnit with an associated renderer. 2. If no renderer is specified on the Prebid adUnit, Prebid will invoke the renderer    associated with the winning (or selected) demand partner video bid.\n\nSince not all demand partners return a renderer with their video bid responses, we recommend that publishers associate a renderer with their Prebid video adUnits, if possible.",
      "properties": {
        "backupOnly": {
          "description": "Optional field, if set to true, buyer or adapter renderer will be preferred. Default is true.",
          "type": "boolean"
        },
        "options": {
          "description": "NOTE: we only want publishers that offer us url and renderer, but we want to keep this possibility open\n\nFor demand partners that return a renderer with their video bid responses. This configuration is bidder specific and may include options for e.g. skippability, player size and ad text."
        },
        "render": {
          "$comment": "(bid: any) => void",
          "description": "A function that tells Prebid.js how to invoke the renderer script.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "bid": {}
              },
              "required": [
                "bid"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "url": {
          "description": "Points to a file containing the renderer script.",
          "type": "string"
        }
      },
      "required": [
        "url",
        "render"
      ],
      "type": "object"
    },
    "prebidjs.IRubiconBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "rubicon",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IRubiconParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IRubiconParams": {
      "additionalProperties": false,
      "properties": {
        "accountId": {
          "description": "The publisher account ID",
          "examples": [
            "4934"
          ],
          "type": "string"
        },
        "bidonmultiformat": {
          "description": "By default, the Magnite exchange will bid on only one media type in this order: video, banner, native. Setting this flag to true will cause it to bid on all mediatypes.",
          "type": "boolean"
        },
        "floor": {
          "description": "Sets the global floor – no bids will be made under this value.",
          "examples": [
            0.5
          ],
          "type": "number"
        },
        "inventory": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "An object defining arbitrary key-value pairs concerning the page for use in targeting. The values must be arrays.",
          "type": "object"
        },
        "position": {
          "description": "Set the page position. Valid values are “atf” and “btf”.",
          "enum": [
            "atf",
            "btf"
          ],
          "type": "string"
        },
        "siteId": {
          "description": "The site ID",
          "examples": [
            "13945"
          ],
          "type": "string"
        },
        "sizes": {
          "description": "Array of Rubicon Project size IDs. If not specified, the system will try to convert from the AdUnit's mediaTypes.banner.sizes.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "userId": {
          "description": "Site-specific user ID may be reflected back in creatives for analysis. Note that userId needs to be the same for all slots.",
          "type": "string"
        },
        "video": {
          "additionalProperties": false,
          "description": "Video targeting parameters Required for video",
          "properties": {
            "language": {
              "description": "ed\tIndicates the language of the content video, in ISO 639-1/alpha2. Highly recommended for successful monetization for pre-, mid-, and post-roll video ads. Not applicable for interstitial and outstream.",
              "examples": [
                "en"
              ],
              "type": "string"
            },
            "size_id": {
              "description": "203 for outstream and 201 for instream",
              "enum": [
                203,
                201
              ],
              "type": "number"
            }
          },
          "type": "object"
        },
        "visitor": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "An object defining arbitrary key-value pairs concerning the visitor for use in targeting. The values must be arrays.",
          "type": "object"
        },
        "zoneId": {
          "description": "The zone ID",
          "examples": [
            "23948"
          ],
          "type": "string"
        }
      },
      "required": [
        "accountId",
        "siteId",
        "zoneId"
      ],
      "type": "object"
    },
    "prebidjs.ISeedtagBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "seedtag",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.ISeedtagParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.ISeedtagParams": {
      "additionalProperties": false,
      "properties": {
        "adUnitId": {
          "description": "AdUnitID provided by seedtag.",
          "type": "string"
        },
        "placement": {
          "description": "Adunit placement",
          "enum": [
            "inScreen",
            "inArticle",
            "inBanner"
          ],
          "type": "string"
        },
        "publisherId": {
          "description": "PublisherID povided by seedtag.",
          "type": "string"
        }
      },
      "required": [
        "publisherId",
        "adUnitId",
        "placement"
      ],
      "type": "object"
    },
    "prebidjs.IShowHeroesBid": {
      "additionalProperties": false,
      "description": "ShowHeroes bid object\n\nRequest are being made to `https://bs1.showheroes.com/api/v1/bid`",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "showheroesBs",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IShowHeroesParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IShowHeroesParams": {
      "additionalProperties": false,
      "properties": {
        "playerId": {
          "description": "ShowHeroes player ID",
          "examples": [
            "0151f985-fb1a-4f37-bb26-cfc62e43ec05"
          ],
          "type": "string"
        },
        "vpaidMode": {
          "description": "Vpaid wrapper\n\ndefault: `false`",
          "type": "boolean"
        }
      },
      "required": [
        "playerId"
      ],
      "type": "object"
    },
    "prebidjs.ISmartAdServerBid": {
      "additionalProperties": false,
      "description": "Smart bid object",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "smartadserver",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "anyOf": [
            {
              "$ref": "#/definitions/prebidjs.ISmartAdServerParams"
            },
            {
              "$ref": "#/definitions/prebidjs.ISmartAdServerPrebidServerParams"
            }
          ],
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.ISmartAdServerParams": {
      "additionalProperties": false,
      "description": "Smart bid parameters",
      "properties": {
        "bidfloor": {
          "description": "Bid floor for this placement in USD or in the currency specified by the currency parameter. (Default: 0.0)",
          "type": "number"
        },
        "currency": {
          "description": "Override the default currency code (ISO 4217) of the ad request. (Default: 'USD')",
          "enum": [
            "EUR",
            "USD"
          ],
          "type": "string"
        },
        "domain": {
          "description": "The network domain example: \"https://prg.smartadserver.com\"",
          "type": "string"
        },
        "formatId": {
          "description": "The placement format ID example: 1234",
          "type": "number"
        },
        "pageId": {
          "description": "The placement page ID examples: 1234",
          "type": "number"
        },
        "siteId": {
          "description": "The placement site ID example: 1234",
          "type": "number"
        },
        "video": {
          "additionalProperties": false,
          "description": "Parameter object for instream video.\n\nThis is also required for outstream",
          "properties": {
            "protocol": {
              "description": "Maximum open RTB video protocol supported.\n\nDespite being marked as optionl, this is required for ad slots with mediaType `video`",
              "type": "number"
            },
            "startDelay": {
              "description": "Allowed values:  - 1 (generic pre-roll, default)  - 2 (generic mid-roll)  - 3 (generic post-roll)",
              "enum": [
                1,
                2,
                3
              ],
              "type": "number"
            }
          },
          "required": [
            "protocol"
          ],
          "type": "object"
        }
      },
      "required": [
        "domain",
        "siteId",
        "pageId",
        "formatId"
      ],
      "type": "object"
    },
    "prebidjs.ISmartAdServerPrebidServerParams": {
      "additionalProperties": false,
      "properties": {
        "formatId": {
          "description": "The placement format ID Optional, but must be filled along with pageId and formatId.",
          "examples": [
            1234
          ],
          "type": "number"
        },
        "networkId": {
          "description": "The network ID.",
          "type": "number"
        },
        "pageId": {
          "description": "The placement page ID Optional, but must be filled along with pageId and formatId.",
          "examples": 1234,
          "type": "number"
        },
        "siteId": {
          "description": "The placement site ID Optional, but must be filled along with pageId and formatId.",
          "examples": [
            1234
          ],
          "type": "number"
        },
        "target": {
          "description": "Keyword targeting.",
          "type": "string"
        }
      },
      "required": [
        "networkId"
      ],
      "type": "object"
    },
    "prebidjs.ISmartxBid": {
      "additionalProperties": false,
      "description": "Smartx bid object",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "smartx",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.ISmartxParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.ISmartxParams": {
      "additionalProperties": false,
      "description": "Smartx (smartclip) bid parameters",
      "properties": {
        "bidfloor": {
          "description": "Value of Bidfloor. This is optional because this defaults to prebid.js's price floors module.",
          "type": "number"
        },
        "bidfloorcur": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency",
          "description": "Used Currency. (e.g. EUR, USD etc.) This is optional because this defaults to 'EUR'."
        },
        "context": {
          "description": "Token that describes which context to play: ‘instream’ or ‘outstream’",
          "type": "string"
        },
        "max_duration": {
          "description": "Maximum video ad duration in seconds",
          "type": "number"
        },
        "mimes": {
          "description": "List of MIME types to allow in ad.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "min_duration": {
          "description": "Minimum video ad duration in seconds",
          "type": "number"
        },
        "outstream_options": {
          "additionalProperties": false,
          "description": "Object to set options on the smartx renderer. (Only required when setting mediaType.video.context = ‘outstream’)",
          "properties": {
            "desiredBitrate": {
              "description": "You can specify a target bitrate for the creative, higher values will increase video quality but will cost bandwidth. Value is given in kpbs. Default is 700",
              "type": "number"
            },
            "endingScreen": {
              "description": "By default the player will not close, but show the ending screen when an advertisement is complete (last frame of the ad and a replay button, if an advertisment comes with an endcard that will be shown). If set to false the player will collapse. Some VPAID creatives can cause issues with ending screen or replay behaviour. Default is true.",
              "type": "string"
            },
            "maxAdWidth": {
              "description": "The player will fill the whole width of the element it gets, to have it narrower a different maximum width can be defined in pixels. Default is 800.",
              "type": "number"
            },
            "minAdWidth": {
              "description": "If the visible area is narrower than this size, no ad will be requested. The value is given in pixels. Default is 280.",
              "type": "number"
            },
            "skipOffset": {
              "description": "In order to enable skipping from the start set the delay to 0, to show the skip button after 5 seconds set it to 5. Setting a general skipOffset is discouraged. Note that linear creatives carrying a skipsoffet attribute will override the general player setting. By default the player does not set a general skipoffset, so a skip button will only be shown, if an ad has a specific skipoffset attached.",
              "type": "number"
            },
            "slot": {
              "description": "ID of element that video ad should be rendered into.",
              "type": "string"
            },
            "startOpen": {
              "description": "Per default the player will start fully expanded, if a valid ad can be played. Setting this option to false will trigger an expand animation instead once the player comes into view. Default is true.",
              "type": "string"
            },
            "title": {
              "description": "The player can show a freely definable text, a macro [remainingTime] in this string will be replaced with the remaining play time of the ad in seconds.",
              "type": "string"
            },
            "visibilityThreshold": {
              "description": "Defines the percentage of the player which has to be in the visible area to play and pause the advertisment. The default is 50.",
              "type": "number"
            }
          },
          "required": [
            "slot"
          ],
          "type": "object"
        },
        "price_floor": {
          "description": "Set the current channel price floor in real time.",
          "type": "number"
        },
        "publisherId": {
          "description": "A unique PublisherID.",
          "type": "string"
        },
        "secure": {
          "description": "Boolean identifying whether the requests should be https or not (used to override the protocol if the page isn’t secure).",
          "type": "boolean"
        },
        "siteId": {
          "description": "A unique SiteID.",
          "type": "string"
        },
        "tagId": {
          "description": "A unique ID.",
          "type": "string"
        }
      },
      "required": [
        "tagId",
        "publisherId",
        "siteId"
      ],
      "type": "object"
    },
    "prebidjs.ISpotXBid": {
      "additionalProperties": false,
      "description": "SpotX bid object.",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "spotx",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.ISpotxParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.ISpotxParams": {
      "additionalProperties": false,
      "description": "Spotx bid parameters.",
      "properties": {
        "ad_unit": {
          "description": "Token that describes which ad unit to play: instream or outstream.",
          "enum": [
            "instream",
            "outstream"
          ],
          "type": "string"
        },
        "ad_volume": {
          "description": "Value between 0 and 1 to denote the volume the ad should start at.",
          "type": "number"
        },
        "channel_id": {
          "description": "A unique 5 digit ID that is generated by the SpotX publisher platform when a channel is created.",
          "type": "string"
        },
        "custom": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ]
          },
          "description": "Configure key-value targeting",
          "type": "object"
        },
        "hide_skin": {
          "description": "Set to true to hide the spotx skin",
          "type": "boolean"
        },
        "outstream_options": {
          "additionalProperties": false,
          "description": "Object to set options on the renderer.",
          "properties": {
            "ad_mute": {
              "description": "Set to true to start the ad with the volume muted.",
              "type": "boolean"
            },
            "custom_override": {
              "additionalProperties": false,
              "description": "Object of script tag attributes to override from the list of EASI Attributes.",
              "properties": {
                "autoplay": {
                  "description": "Autoplay is the default behavior where 1=autoplay and 0=user or publisher initiated.",
                  "enum": [
                    0,
                    1
                  ],
                  "type": "number"
                },
                "content_height": {
                  "description": "The desired height of the video ad placement. Requires content_width to also be set.",
                  "type": "string"
                },
                "content_width": {
                  "description": "The desired width of the video ad placement. Requires `content_height` to also be set.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "in_iframe": {
              "description": "ID of iFrame element to insert EASI script tag.",
              "type": "string"
            },
            "mimes": {
              "description": "List of mimetypes to allow in ad.",
              "items": {
                "enum": [
                  "application/javascript",
                  "video/mp4",
                  "video/webm",
                  "application/x-shockwave-flash"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "playersize_auto_adapt": {
              "description": "Set to true to make video auto-adapt to the ad's dimensions",
              "type": "boolean"
            },
            "secure": {
              "description": "Boolean identifying whether the reqeusts should be https or not (used to override the protocol if the page isn't secure.",
              "type": "boolean"
            },
            "slot": {
              "description": "ID of element that video ad should be rendered into.",
              "type": "string"
            }
          },
          "required": [
            "slot"
          ],
          "type": "object"
        }
      },
      "required": [
        "channel_id",
        "ad_unit",
        "outstream_options"
      ],
      "type": "object"
    },
    "prebidjs.IStroeerCoreBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "stroeerCore",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IStroeerParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IStroeerParams": {
      "additionalProperties": false,
      "description": "Stroeer Core bid params",
      "properties": {
        "sid": {
          "description": "Slot ID",
          "type": "string"
        }
      },
      "required": [
        "sid"
      ],
      "type": "object"
    },
    "prebidjs.ITeadsBid": {
      "additionalProperties": false,
      "description": "Teads bid object",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "teads",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.ITeadsParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.ITeadsParams": {
      "additionalProperties": false,
      "description": "Teads bid parameters",
      "properties": {
        "pageId": {
          "description": "Teads page id.",
          "type": "number"
        },
        "placementId": {
          "description": "Teads placement id.",
          "type": "number"
        }
      },
      "required": [
        "pageId",
        "placementId"
      ],
      "type": "object"
    },
    "prebidjs.ITitleAssetParams": {
      "additionalProperties": false,
      "properties": {
        "len": {
          "description": "Maximum length of the text in the title element. Recommended to be 25, 90, or 140.",
          "type": "number"
        }
      },
      "required": [
        "len"
      ],
      "type": "object"
    },
    "prebidjs.IUnrulyBid": {
      "additionalProperties": false,
      "description": "Unruly bid object",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "unruly",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IUnrulyParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IUnrulyParams": {
      "additionalProperties": false,
      "description": "Unruly bid parameters",
      "properties": {
        "siteId": {
          "description": "The site ID from Unruly.",
          "type": "number"
        },
        "targetingUUID": {
          "deprecated": "this field is still marked as required in the docs, but is never used nor provided by unruly",
          "description": "The targeting UUID from Unruly.",
          "type": "string"
        }
      },
      "required": [
        "siteId"
      ],
      "type": "object"
    },
    "prebidjs.IUspConfig": {
      "additionalProperties": false,
      "description": "This consent management module is designed to support the California Consumer Privacy Act (CCPA). The IAB has generalized these guidelines to cover future regulations, referring to the feature as \"US Privacy\".",
      "properties": {
        "cmpApi": {
          "const": "iab",
          "default": "`iab`",
          "description": "The USP-API interface that is in use. Supported values are `iab` or `static`. Static allows integrations where IAB-formatted strings are provided in a non-standard way.",
          "type": "string"
        },
        "timeout": {
          "default": 50,
          "description": "Length of time (in milliseconds) to allow the USP-API to obtain the CCPA string.",
          "type": "number"
        }
      },
      "required": [
        "cmpApi"
      ],
      "type": "object"
    },
    "prebidjs.IVisxBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "visx",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IVisxParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IVisxParams": {
      "additionalProperties": false,
      "properties": {
        "uid": {
          "description": "The publisher's ad unit ID in VIS.X\n\nFor prebid.js it should be string (number is probably fine too) For prebid server it must be number",
          "type": [
            "string",
            "number"
          ]
        }
      },
      "required": [
        "uid"
      ],
      "type": "object"
    },
    "prebidjs.IVlybyBid": {
      "additionalProperties": false,
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "vlyby",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IVlybyParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IVlybyParams": {
      "additionalProperties": false,
      "properties": {
        "placement": {
          "description": "Optional placement id.",
          "type": "string"
        },
        "publisherId": {
          "description": "VLYBY PublisherId",
          "type": "string"
        }
      },
      "required": [
        "publisherId"
      ],
      "type": "object"
    },
    "prebidjs.IXaxisBid": {
      "additionalProperties": false,
      "description": "Xaxis / GroupM bid object\n\nRequest are being made to `https://ib.adnxs.com/ut/v3/prebid` (App Nexus Ad Server).\n\n`Deal ID` Ad Server Key: `hb_deal_xhb`",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "xhb",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IXaxisParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IXaxisParams": {
      "additionalProperties": false,
      "properties": {
        "keywords": {
          "$ref": "#/definitions/prebidjs.IAppNexusASTKeyword",
          "description": "A set of key-value pairs applied to all ad slots on the page. Mapped to query string segments for buy-side targeting.\n\n**Example:**\n\n```js keywords: { genre: ['rock', 'pop'] } ```"
        },
        "placementId": {
          "description": "placement id",
          "type": "string"
        },
        "reserve": {
          "description": "Sets a floor price for the bid that is returned.",
          "type": "number"
        }
      },
      "required": [
        "placementId"
      ],
      "type": "object"
    },
    "prebidjs.IYieldlabBid": {
      "additionalProperties": false,
      "description": "Yieldlab bid object",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "Only available with the s2sTesting module. Overrides the global bidSource configuration"
        },
        "bidder": {
          "const": "yieldlab",
          "description": "Unique code identifying the bidder. For bidder codes, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html).",
          "type": "string"
        },
        "labelAll": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelAny": {
          "description": "Used for [conditional ads](https://prebid.org/dev-docs/conditional-ad-units.html). Works with sizeConfig argument to [pbjs.setConfig](https://prebid.org/dev-docs/publisher-api-reference.html#setConfig-Configure-Responsive-Ads).\n\nNote: will be removed by the ad tag and thus hidden for prebid",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.IYieldlabParams",
          "description": "Bid request parameters for a given bidder. For allowed params, see the [bidder param reference](https://prebid.org/dev-docs/bidders.html)."
        }
      },
      "required": [
        "bidder",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.IYieldlabParams": {
      "additionalProperties": false,
      "properties": {
        "adSize": {
          "description": "Override the default prebid size.\n\nThe current implementation takes the the first size from the sizes array and uses it. As we have a mulit-size setup, this doesn't work. So this parameter is required for us.",
          "type": "string"
        },
        "adslotId": {
          "description": "Yieldlab Adslot ID",
          "type": "string"
        },
        "supplyId": {
          "description": "Yieldlab Supply ID. Please reach out to your account management for more information.",
          "type": "string"
        },
        "targeting": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A simple key-value map",
          "type": "object"
        }
      },
      "required": [
        "adslotId",
        "supplyId"
      ],
      "type": "object"
    },
    "prebidjs.NativeAssetOrtb": {
      "anyOf": [
        {
          "$ref": "#/definitions/prebidjs.INativeImgAssetOrtb"
        },
        {
          "$ref": "#/definitions/prebidjs.INativeDataAssetOrtb"
        },
        {
          "$ref": "#/definitions/prebidjs.INativeTitleAssetOrtb"
        }
      ]
    },
    "prebidjs.activitycontrols.IActivity": {
      "additionalProperties": false,
      "properties": {
        "default": {
          "description": "Whether the activity should be allowed if no other rule applies.",
          "type": "boolean"
        },
        "rules": {
          "description": "`Rules` is an array of objects that a publisher can construct to provide fine-grained control over a given activity. For instance, you could set up a series of rules that says:\n\n- Amongst the bid adapters, BidderA is always allowed to receive user first-party data\n- Always let analytics adapters receive user first-party data\n- Otherwise, let the active privacy modules decide\n- if they refuse to decide, then the overall default is to allow the transmitting of user first-party data",
          "items": {
            "$ref": "#/definitions/prebidjs.activitycontrols.IActivityRule%3Cstructure-248365657-180187-180190-248365657-180180-180190-248365657-180148-180976-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224%3E"
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "prebidjs.activitycontrols.IActivity<(alias-248365657-179091-179261-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241149092559&alias-248365657-179261-179394-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241210238678)>": {
      "additionalProperties": false,
      "properties": {
        "default": {
          "description": "Whether the activity should be allowed if no other rule applies.",
          "type": "boolean"
        },
        "rules": {
          "description": "`Rules` is an array of objects that a publisher can construct to provide fine-grained control over a given activity. For instance, you could set up a series of rules that says:\n\n- Amongst the bid adapters, BidderA is always allowed to receive user first-party data\n- Always let analytics adapters receive user first-party data\n- Otherwise, let the active privacy modules decide\n- if they refuse to decide, then the overall default is to allow the transmitting of user first-party data",
          "items": {
            "$ref": "#/definitions/prebidjs.activitycontrols.IActivityRule%3C(alias-248365657-179091-179261-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241149092559%26alias-248365657-179261-179394-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241210238678)%3E"
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "prebidjs.activitycontrols.IActivity<alias-248365657-178664-178850-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-19322498888365>": {
      "additionalProperties": false,
      "properties": {
        "default": {
          "description": "Whether the activity should be allowed if no other rule applies.",
          "type": "boolean"
        },
        "rules": {
          "description": "`Rules` is an array of objects that a publisher can construct to provide fine-grained control over a given activity. For instance, you could set up a series of rules that says:\n\n- Amongst the bid adapters, BidderA is always allowed to receive user first-party data\n- Always let analytics adapters receive user first-party data\n- Otherwise, let the active privacy modules decide\n- if they refuse to decide, then the overall default is to allow the transmitting of user first-party data",
          "items": {
            "$ref": "#/definitions/prebidjs.activitycontrols.IActivityRule%3Calias-248365657-178664-178850-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-19322498888365%3E"
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "prebidjs.activitycontrols.IActivity<alias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090>": {
      "additionalProperties": false,
      "properties": {
        "default": {
          "description": "Whether the activity should be allowed if no other rule applies.",
          "type": "boolean"
        },
        "rules": {
          "description": "`Rules` is an array of objects that a publisher can construct to provide fine-grained control over a given activity. For instance, you could set up a series of rules that says:\n\n- Amongst the bid adapters, BidderA is always allowed to receive user first-party data\n- Always let analytics adapters receive user first-party data\n- Otherwise, let the active privacy modules decide\n- if they refuse to decide, then the overall default is to allow the transmitting of user first-party data",
          "items": {
            "$ref": "#/definitions/prebidjs.activitycontrols.IActivityRule%3Calias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090%3E"
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "prebidjs.activitycontrols.IActivityRule<(alias-248365657-179091-179261-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241149092559&alias-248365657-179261-179394-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241210238678)>": {
      "additionalProperties": false,
      "properties": {
        "allow": {
          "description": "Whether the activity should be allowed when this rule applies.",
          "type": "boolean"
        },
        "condition": {
          "$comment": "(param: Param & IActivityRuleDefaultParams) => boolean",
          "description": "Condition function to use for this rule; the rule applies only if this returns true. Receives a single object that contains activity parameters as input. If omitted, the rule always applies.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "param": {
                  "additionalProperties": false,
                  "properties": {
                    "component": {
                      "type": "string"
                    },
                    "componentName": {
                      "type": "string"
                    },
                    "componentType": {
                      "type": "string"
                    },
                    "syncType": {
                      "enum": [
                        "iframe",
                        "pixel"
                      ],
                      "type": "string"
                    },
                    "syncUrl": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "component",
                    "componentName",
                    "componentType",
                    "syncType",
                    "syncUrl"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "param"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "priority": {
          "default": "is 1",
          "description": "Priority of this rule compared to other rules; a lower number means higher priority. See note on rule priority below.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.activitycontrols.IActivityRule<alias-248365657-178664-178850-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-19322498888365>": {
      "additionalProperties": false,
      "properties": {
        "allow": {
          "description": "Whether the activity should be allowed when this rule applies.",
          "type": "boolean"
        },
        "condition": {
          "$comment": "(param: Param & IActivityRuleDefaultParams) => boolean",
          "description": "Condition function to use for this rule; the rule applies only if this returns true. Receives a single object that contains activity parameters as input. If omitted, the rule always applies.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "param": {
                  "additionalProperties": false,
                  "properties": {
                    "component": {
                      "type": "string"
                    },
                    "componentName": {
                      "type": "string"
                    },
                    "componentType": {
                      "type": "string"
                    },
                    "storageType": {
                      "enum": [
                        "html5",
                        "cookie"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "component",
                    "componentName",
                    "componentType",
                    "storageType"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "param"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "priority": {
          "default": "is 1",
          "description": "Priority of this rule compared to other rules; a lower number means higher priority. See note on rule priority below.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.activitycontrols.IActivityRule<alias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090>": {
      "additionalProperties": false,
      "properties": {
        "allow": {
          "description": "Whether the activity should be allowed when this rule applies.",
          "type": "boolean"
        },
        "condition": {
          "$comment": "(param: Param & IActivityRuleDefaultParams) => boolean",
          "description": "Condition function to use for this rule; the rule applies only if this returns true. Receives a single object that contains activity parameters as input. If omitted, the rule always applies.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "param": {
                  "additionalProperties": false,
                  "properties": {
                    "component": {
                      "type": "string"
                    },
                    "componentName": {
                      "type": "string"
                    },
                    "componentType": {
                      "type": "string"
                    },
                    "configName": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "component",
                    "componentName",
                    "componentType",
                    "configName"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "param"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "priority": {
          "default": "is 1",
          "description": "Priority of this rule compared to other rules; a lower number means higher priority. See note on rule priority below.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.activitycontrols.IActivityRule<structure-248365657-180187-180190-248365657-180180-180190-248365657-180148-180976-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224>": {
      "additionalProperties": false,
      "properties": {
        "allow": {
          "description": "Whether the activity should be allowed when this rule applies.",
          "type": "boolean"
        },
        "condition": {
          "$comment": "(param: Param & IActivityRuleDefaultParams) => boolean",
          "description": "Condition function to use for this rule; the rule applies only if this returns true. Receives a single object that contains activity parameters as input. If omitted, the rule always applies.",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "param": {
                  "additionalProperties": false,
                  "properties": {
                    "component": {
                      "type": "string"
                    },
                    "componentName": {
                      "type": "string"
                    },
                    "componentType": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "component",
                    "componentName",
                    "componentType"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "param"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "priority": {
          "default": "is 1",
          "description": "Priority of this rule compared to other rules; a lower number means higher priority. See note on rule priority below.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.activitycontrols.IAllowActivities": {
      "additionalProperties": false,
      "description": "Starting with version 7.52, Prebid.js introduced a centralized control mechanism for privacy-sensitive activities\n- such as accessing device storage or sharing data with partners.  These controls are intended to serve as building blocks for privacy protection mechanisms, allowing module developers or publishers to directly specify what should be permitted or avoided in any given regulatory environment.",
      "properties": {
        "accessDevice": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity%3Calias-248365657-178664-178850-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-19322498888365%3E",
          "description": "A component wants to use device storage.\n\nEffect when denied: Storage is disabled"
        },
        "enrichEids": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity",
          "description": "A user ID or RTD submodule wants to add user IDs to outgoing requests\n\nEffect when denied: User IDs are discarded"
        },
        "enrichUfpd": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity",
          "description": "A Real-Time Data (RTD) submodule wants to add user first-party data to outgoing requests (`user.data` in ORTB)\n\nEffect when denied: User FPD is discarded"
        },
        "fetchBids": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity%3Calias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090%3E",
          "description": "A bid adapter wants to participate in an auction\n\nEffect when denied: Bidder is removed from the auction"
        },
        "reportAnalytics": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity",
          "description": "An analytics adapter is being enabled through `pbjs.enableAnalytics`\n\nEffect when denied: Adapter remains disabled"
        },
        "syncUser": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity%3C(alias-248365657-179091-179261-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241149092559%26alias-248365657-179261-179394-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-1932241210238678)%3E",
          "description": "A bid adapter wants to fetch a [user sync](https://docs.prebid.org/dev-docs/publisher-api-reference/setConfig.html#setConfig-Configure-User-Syncing)\n\nEffect when denied: User sync is skipped"
        },
        "transmitEids": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity%3Calias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090%3E",
          "description": "A bid adapter or RTD submodule wants to access and/or transmit user IDs to their endpoint.\n\nEffect when denied: User IDs are hidden from the component"
        },
        "transmitPreciseGeo": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity%3Calias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090%3E",
          "description": "A bid adapter or RTD submodule wants to access and/or transmit precise geolocation data to their endpoint.\n\nEffect when denied: Component is allowed only 2-digit precision for latitude and longitude"
        },
        "transmitTid": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity%3Calias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090%3E",
          "description": "A bid adapter or RTD submodule wants to access and/or transmit globally unique transaction IDs to their endpoint.\n\nEffect when denied: Transaction IDs are hidden from the component"
        },
        "transmitUfpd": {
          "$ref": "#/definitions/prebidjs.activitycontrols.IActivity%3Calias-248365657-178850-179091-248365657-178083-184158-248365657-177968-184158-248365657-190-193223-248365657-163-193223-248365657-0-193224187177090%3E",
          "description": "A bid adapter or RTD submodule wants to access and/or transmit user FPD to their endpoint.\n\nEffect when denied: User FPD is hidden from the component"
        }
      },
      "type": "object"
    },
    "prebidjs.consent.IConsentManagementConfig": {
      "additionalProperties": false,
      "properties": {
        "gdpr": {
          "$ref": "#/definitions/prebidjs.consent.IGdprConfig"
        },
        "usp": {
          "$ref": "#/definitions/prebidjs.IUspConfig"
        }
      },
      "type": "object"
    },
    "prebidjs.consent.IGdprConfig": {
      "additionalProperties": false,
      "description": "A page needs to define configuration rules about how Prebid.js should enforce each in-scope activity",
      "properties": {
        "allowAuctionWithoutConsent": {
          "description": "A setting to determine what will happen when obtaining consent information from the CMP fails; either allow the auction to proceed (true) or cancel the auction (false). Default is true",
          "type": "boolean"
        },
        "cmpApi": {
          "const": "iab",
          "description": "The ID for the CMP in use on the page. Default is 'iab'",
          "type": "string"
        },
        "defaultGdprScope": {
          "default": "`false`",
          "description": "Defines what the gdprApplies flag should be when the CMP doesn’t respond in time or the static data doesn’t supply. D",
          "type": "boolean"
        },
        "rules": {
          "description": "Lets the publisher override the default behavior.",
          "items": {
            "$ref": "#/definitions/prebidjs.consent.IGdprConfigRule"
          },
          "type": "array"
        },
        "timeout": {
          "default": "`10000` ms",
          "description": "Length of time (in milliseconds) to allow the CMP to perform its tasks before aborting the process.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.consent.IGdprConfigRule": {
      "additionalProperties": false,
      "properties": {
        "enforcePurpose": {
          "description": "Determines whether to enforce the purpose consent or not. The default in Prebid.js 3.x is not to enforce purposes. The plan for Prebid.js 4.0 is to enforce consent for Purpose 1 and no others.",
          "type": "boolean"
        },
        "enforceVendor": {
          "description": "Determines whether to enforce vendor signals for this purpose or not. The default in Prebid.js 3.x is not to enforce vendor signals. The plan for Prebid.js 4.0 to enforce signals for Purpose 1 and no others.",
          "type": "boolean"
        },
        "purpose": {
          "description": "Supported values:\n- \"storage\" (Purpose 1)\n- \"basicAds\" (Purpose 2)\n- \"measurement\" (Purpose 7)",
          "enum": [
            "storage",
            "basicAds",
            "measurement"
          ],
          "type": "string"
        },
        "vendorExceptions": {
          "description": "Defines a list of biddercodes or module names that are exempt from the enforcement of this Purpose.\n\nThe vendorExceptions list is based on Prebid.js biddercodes instead of Global Vendor List (GVL) IDs, i.e. \"rubicon\" instead of \"52\". This was done to accomodate Prebid.js modules and adapters that don't have GVL IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "purpose",
        "enforcePurpose",
        "enforceVendor"
      ],
      "type": "object"
    },
    "prebidjs.currency.IBidderCurrencyDefault": {
      "additionalProperties": false,
      "properties": {
        "adagio": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "adf": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "aduptech": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "amx": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "appnexus": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "appnexusAst": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "connectad": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "criteo": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "dspx": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "gumgum": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "improvedigital": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "invibes": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "ix": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "nanointeractive": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "ogury": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "onetag": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "openx": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "orbidder": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "pubmatic": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "rads": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "rubicon": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "seedtag": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "showheroesBs": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "smartadserver": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "smartx": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "spotx": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "stroeerCore": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "teads": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "triplelift": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "unruly": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "visx": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "vlyby": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "xhb": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        },
        "yieldlab": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency"
        }
      },
      "required": [
        "adagio",
        "amx",
        "aduptech",
        "adf",
        "connectad",
        "criteo",
        "appnexusAst",
        "appnexus",
        "gumgum",
        "improvedigital",
        "ix",
        "invibes",
        "nanointeractive",
        "pubmatic",
        "ogury",
        "onetag",
        "openx",
        "smartadserver",
        "smartx",
        "unruly",
        "teads",
        "triplelift",
        "yieldlab",
        "seedtag",
        "spotx",
        "showheroesBs",
        "stroeerCore",
        "xhb",
        "dspx",
        "rubicon",
        "rads",
        "visx",
        "vlyby",
        "orbidder"
      ],
      "type": "object"
    },
    "prebidjs.currency.ICurrency": {
      "description": "All supported currencies",
      "enum": [
        "EUR",
        "USD",
        "GBP"
      ],
      "type": "string"
    },
    "prebidjs.currency.ICurrencyConfig": {
      "additionalProperties": false,
      "properties": {
        "adServerCurrency": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency",
          "description": "ISO 4217 3-letter currency code. If this value is present, the currency conversion feature is activated."
        },
        "bidderCurrencyDefault": {
          "$ref": "#/definitions/prebidjs.currency.IBidderCurrencyDefault",
          "description": "configure bidder specific currencies.\n\nSSPs that make use of this feature\n- Visx\n- ..."
        },
        "defaultRates": {
          "additionalProperties": false,
          "description": "An optional parameter that defines a default rate that can be used if the currency file cannot be loaded. This option isn't used when the rates parameter is supplied.\n\nPrebid hosts a conversion file here: https://currency.prebid.org/latest.json",
          "properties": {
            "USD": {
              "additionalProperties": false,
              "properties": {
                "EUR": {
                  "type": "number"
                }
              },
              "required": [
                "EUR"
              ],
              "type": "object"
            }
          },
          "required": [
            "USD"
          ],
          "type": "object"
        },
        "granularityMultiplier": {
          "const": 1,
          "description": "How much to scale the price granularity calculations. Defaults to 1. Note: The multiplier may not make sense for markets where the currency value is close to USD, e.g. GBP and EUR. In those scenarios, just leave the granularityMultiplier at 1.",
          "type": "number"
        }
      },
      "required": [
        "adServerCurrency",
        "granularityMultiplier",
        "defaultRates"
      ],
      "type": "object"
    },
    "prebidjs.firstpartydata.ContentQuality": {
      "enum": [
        0,
        1,
        2,
        3
      ],
      "type": "number"
    },
    "prebidjs.firstpartydata.CriteoOpenRtb2UserExtEids": {
      "additionalProperties": false,
      "properties": {
        "source": {
          "description": "domain here",
          "type": "string"
        },
        "uids": {
          "items": {
            "$ref": "#/definitions/prebidjs.firstpartydata.CriteoOpenRtb2UserExtUid"
          },
          "type": "array"
        }
      },
      "required": [
        "source",
        "uids"
      ],
      "type": "object"
    },
    "prebidjs.firstpartydata.CriteoOpenRtb2UserExtUid": {
      "additionalProperties": false,
      "properties": {
        "atype": {
          "const": 3,
          "description": "always 3",
          "type": "number"
        },
        "ext": {
          "additionalProperties": false,
          "properties": {
            "stype": {
              "description": "hashing algorithm for the id (email)",
              "enum": [
                "cleartextemail",
                "hemsha256",
                "hemmd5",
                "hemsha256md5"
              ],
              "type": "string"
            }
          },
          "required": [
            "stype"
          ],
          "type": "object"
        },
        "id": {
          "description": "hashed email value.\n\n## Example\n\nOriginal Email: [john.doe@gmail.com]\n\n- `SHA256`: 375320dd9ae7ed408002f3768e16cb5f28c861062fd50dff9a3bff62e9dce4ef\n- `MD5`: e13743a7f1db7f4246badd6fd6ff54ff\n- `SHA256 of MD5`: 000e3171a5110c35c69d060112bd0ba55d9631c7c2ec93f1840e4570095b263a",
          "type": "string"
        }
      },
      "required": [
        "id",
        "atype",
        "ext"
      ],
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2Data": {
      "additionalProperties": false,
      "description": "Data segment that allos additional data about the related object (e.g. content).",
      "properties": {
        "ext": {
          "description": "Placeholder for exchange-specific extensions to OpenRTB."
        },
        "id": {
          "description": "Exchange-specific ID for the data provider.",
          "type": "string"
        },
        "name": {
          "description": "Exchange-specific name for the data provider.",
          "type": "string"
        },
        "segment": {
          "description": "Array of OpenRtb2Segment objects that contain the actual data values.",
          "items": {
            "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2Segment"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "segment"
      ],
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2Publisher": {
      "additionalProperties": false,
      "properties": {
        "cat": {
          "description": "Array of IAB content categories that describe the publisher.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ext": {
          "description": "Placeholder for exchange-specific extensions to OpenRTB"
        }
      },
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2Regs": {
      "additionalProperties": false,
      "properties": {
        "ext": {
          "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2RegsExtDsa",
          "description": "Placeholder for exchange-specific extensions to OpenRTB"
        }
      },
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2RegsExtDsa": {
      "additionalProperties": false,
      "description": "Extension for DSA transparency information",
      "properties": {
        "dsa": {
          "additionalProperties": false,
          "properties": {
            "datatopub": {
              "description": "Independent of pubrender, the publisher may need the transparency data for audit purposes.\n\n0 = do not send transparency data 1 = optional to send transparency data 2 = send transparency data",
              "enum": [
                0,
                1,
                2
              ],
              "type": "number"
            },
            "pubrender": {
              "description": "Flag to indicate if the publisher will render the DSA Transparency info. This will signal if the publisher is able to and intends to render an icon or other appropriate user-facing symbol and display the DSA transparency info to the end user.\n\n0 = Publisher can't render 1 = Publisher could render depending on adrender 2 = Publisher will render",
              "enum": [
                0,
                1,
                2
              ],
              "type": "number"
            },
            "required": {
              "description": "Flag to indicate if DSA information should be made available. This will signal if the bid request belongs to an Online Platform/VLOP, such that a buyer should respond with DSA Transparency information based on the pubrender value.\n\n0 = Not required 1 = Supported, bid responses with or without DSA object will be accepted 2 = Required, bid responses without DSA object will not be accepted 3 = Required, bid responses without DSA object will not be accepted, Publisher is an Online Platform",
              "enum": [
                0,
                1,
                2,
                3
              ],
              "type": "number"
            },
            "transparency": {
              "description": "Array of objects of the entities that applied user parameters and the parameters they applied.",
              "items": {
                "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2RegsExtDsaTransparency"
              },
              "type": "array"
            }
          },
          "required": [
            "required",
            "pubrender",
            "datatopub",
            "transparency"
          ],
          "type": "object"
        }
      },
      "required": [
        "dsa"
      ],
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2RegsExtDsaTransparency": {
      "additionalProperties": false,
      "description": "Entity that applied user parameters and the parameters they applied.",
      "properties": {
        "domain": {
          "description": "Domain of the entity that applied user parameters",
          "type": "string"
        },
        "params": {
          "description": "Array for platform or sell-side use of any user parameters (using the list provided by DSA Transparency Taskforce). Note: See definition and list of possible user parameters as listed here, applied consistently in both bid      request and/or bid response.",
          "items": {
            "enum": [
              1,
              2,
              3
            ],
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "domain",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2Segment": {
      "additionalProperties": false,
      "description": "Segment objects are essentially key-value pairs that convey specific units of data.",
      "properties": {
        "ext": {
          "description": "Placeholder for exchange-specific extensions to OpenRTB."
        },
        "id": {
          "description": "ID of the data segment specific to the data provider.",
          "type": "string"
        },
        "name": {
          "description": "Name of the data segment specific to the data provider.",
          "type": "string"
        },
        "value": {
          "description": "String representation of the data segment value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2Site": {
      "additionalProperties": false,
      "properties": {
        "cat": {
          "description": "Array of IAB content categories of the site.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "content": {
          "additionalProperties": false,
          "description": "Details about the Content (Section 3.2.16) within the site.",
          "properties": {
            "data": {
              "description": "Additional content data. Each object represents a different data source.",
              "items": {
                "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2Data"
              },
              "type": "array"
            },
            "keywords": {
              "description": "Comma separated list of keywords describing the content.",
              "type": "string"
            },
            "language": {
              "description": "Content language using ISO-639-1-alpha-2.",
              "type": "string"
            },
            "prodq": {
              "$ref": "#/definitions/prebidjs.firstpartydata.ContentQuality"
            },
            "title": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "userrating": {
              "description": "User rating of the content (e.g., number of stars, likes, etc.).",
              "type": "number"
            }
          },
          "type": "object"
        },
        "ext": {
          "description": "Placeholder for exchange-specific extensions to OpenRTB"
        },
        "keywords": {
          "description": "Comma separated list of keywords about the site.",
          "type": "string"
        },
        "mobile": {
          "description": "Indicates if the site has been programmed to optimize layout when viewed on mobile devices, where 0 = no, 1 = yes.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        },
        "page": {
          "description": "URL of the page where the impression will be shown.",
          "type": "string"
        },
        "pagecat": {
          "description": "Array of IAB content categories that describe the current page or view of the site.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privacypolicy": {
          "description": "Indicates if the site has a privacy policy, where 0 = no, 1 = yes.",
          "enum": [
            0,
            1
          ],
          "type": "number"
        },
        "sectioncat": {
          "description": "Array of IAB content categories that describe the current section of the site.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "prebidjs.firstpartydata.OpenRtb2User": {
      "additionalProperties": false,
      "properties": {
        "ext": {
          "properties": {
            "data": {
              "additionalProperties": false,
              "properties": {
                "eids": {
                  "items": {
                    "$ref": "#/definitions/prebidjs.firstpartydata.CriteoOpenRtb2UserExtEids"
                  },
                  "type": "array"
                }
              },
              "required": [
                "eids"
              ],
              "type": "object"
            },
            "deviceid": {
              "description": "always set `deviceidtype` along.",
              "type": "string"
            },
            "deviceidtype": {
              "enum": [
                "gaid",
                "idfa"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "gender": {
          "description": "\"O\" = known to be other (i.e., omitted is unknown).",
          "enum": [
            "M",
            "F",
            "O"
          ],
          "type": "string"
        },
        "keywords": {
          "description": "Comma separated list of keywords, interests, or intent.",
          "type": "string"
        },
        "yob": {
          "description": "Year of birth as a 4-digit integer.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.firstpartydata.PrebidFirstPartyData": {
      "additionalProperties": false,
      "properties": {
        "publisher": {
          "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2Publisher"
        },
        "regs": {
          "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2Regs",
          "description": "This object contains any legal, governmental, or industry regulations that apply to the request. The coppa flag signals whether or not the request falls under the United States Federal Trade Commission’s regulations for the United States Children’s Online Privacy Protection Act (“COPPA”)"
        },
        "site": {
          "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2Site"
        },
        "user": {
          "$ref": "#/definitions/prebidjs.firstpartydata.OpenRtb2User"
        }
      },
      "type": "object"
    },
    "prebidjs.floors.IFloorConfig": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "$ref": "#/definitions/prebidjs.floors.IFloorsData",
          "description": "## Package-Level Floors\n\nThis approach is intended for scenarios where the Publisher or their Prebid managed service provider periodically appends updated floor data to the Prebid.js package. In this model, there could be more floor data present to cover AdUnits across many pages.\n\nBy defining floor data with setConfig, the Price Floors Module will map GPT ad slots to AdUnits as needed. It does this in the same way as the `setTargetingForGPTAsync()` function – first looking for an `AdUnit.code` that matches the slot name, then looking for an `AdUnit.code` that matches the div id of the named GPT slot."
        },
        "enabled": {
          "default": true,
          "description": "Disable floor price module",
          "type": "boolean"
        },
        "enforcement": {
          "$ref": "#/definitions/prebidjs.floors.IFloorEnforcementConfig",
          "description": "Configure the  floor price enforcement behaviour."
        },
        "floorMin": {
          "description": "The mimimum CPM floor used by the Price Floors Module (as of 4.13). The Price Floors Module will take the greater of floorMin and the matched rule CPM when evaluating `getFloor()` and enforcing floors.",
          "type": "number"
        },
        "floorProvider": {
          "description": "Optional atribute (as of prebid version 4.1) used to signal to the Floor Provider’s Analytics adapter their floors are being applied. They can opt to log only floors that are applied when they are the provider. If floorProvider is supplied in both the top level of the floors object and within the data object, the data object’s configuration shall prevail.",
          "type": "string"
        },
        "skipRate": {
          "default": 0,
          "description": "`skipRate` is a random function whose input value is any integer 0 through 100 to determine when to skip all floor logic, where 0 is always use floor data and 100 is always skip floor data. The use case is for publishers or floor providers to learn bid behavior when floors are applied or skipped. Analytics adapters will have access to model version (if defined) when skipped is true to signal the Price Floors Module is in floors mode. If skipRate is supplied in both the root level of the floors object and within the data object, the skipRate configuration within the data object shall prevail.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.floors.IFloorEndpoint": {
      "additionalProperties": false,
      "properties": {
        "url": {
          "description": "URL of endpoint to retrieve dynamic floor data.",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "prebidjs.floors.IFloorEnforcementConfig": {
      "additionalProperties": false,
      "properties": {
        "auctionDelay": {
          "default": 0,
          "description": "If an endpoint URL (a Dynamic Floor) is defined, the Price Floors Module will attempt to fetch floor data from the Floor Provider’s endpoint. When requestBids is called, the Price Floors Module will delay the auction up to the supplied amount of time in floors.auctionDelay or as soon as the dynamic endpoint returns data, whichever is first",
          "type": "number"
        },
        "bidAdjustment": {
          "default": true,
          "description": "If `true`, the Price Floors Module will use the bidAdjustment function to adjust the floor per bidder. If `false` (or no bidAdjustment function is provided), floors will not be adjusted. Note: Setting this parameter to false may have unexpected results, such as signaling a gross floor when expecting net or vice versa.",
          "type": "boolean"
        },
        "endpoint": {
          "$ref": "#/definitions/prebidjs.floors.IFloorEndpoint",
          "description": "Controls behavior for dynamically retrieving floors.\n\nMake sure to set an `auctionDelay` if you use a floor price provider."
        },
        "enforceJS": {
          "default": true,
          "description": "If set to `true`, the Price Floors Module will provide floors to bid adapters for bid request matched rules and suppress any bids not exceeding a matching floor. If set to `false`, the Price Floors Module will still provide floors for bid adapters, there will be no floor enforcement.",
          "type": "boolean"
        },
        "enforcePBS": {
          "default": false,
          "description": "If set to `true`, the Price Floors Module will signal to Prebid Server to pass floors to it’s bid adapters and enforce floors. If set to `false`, the pbjs should still pass matched bid request floor data to PBS, however no enforcement will take place.",
          "type": "boolean"
        },
        "floorDeals": {
          "default": false,
          "description": "Enforce floors for deal bid requests.",
          "type": "boolean"
        },
        "floorMin": {
          "description": "The mimimum CPM floor used by the Price Floors Module (as of 4.13). The Price Floors Module will take the greater of floorMin and the matched rule CPM when evaluating getFloor() and enforcing floors.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.floors.IFloorSchema": {
      "additionalProperties": false,
      "description": "## Floor price schema\n\nConfigure under what conditions which floor price applies. This can be arbitrarily complex or super simple.",
      "properties": {
        "delimiter": {
          "default": "`|`",
          "description": "configure the delimiter that separates the keys in the values properties and converts them into fields.",
          "type": "string"
        },
        "fields": {
          "description": "A list of fields tha appear in the `values` key. Allows to configure floor prices on different dimensions.\n\nSupported values are: `gptSlot`, `adUnitCode`, `mediaType`, `size`, `domain`",
          "items": {
            "$ref": "#/definitions/prebidjs.floors.IFloorSchemaFields"
          },
          "type": "array"
        }
      },
      "required": [
        "delimiter",
        "fields"
      ],
      "type": "object"
    },
    "prebidjs.floors.IFloorSchemaFields": {
      "enum": [
        "gptSlot",
        "adUnitCode",
        "mediaType",
        "size",
        "domain"
      ],
      "type": "string"
    },
    "prebidjs.floors.IFloorValues": {
      "additionalProperties": {
        "description": "key: Delimited field of attribute values that define a floor. value: The floor value for this key.",
        "type": "number"
      },
      "description": "## Floor values\n\nThe values are a map from \"condition\" to \"floor price\". Conditions are configured in the `schema`. The key must be separated by the `separator` property value.\n\n`*` is a special key that acts as a wildcard as is used in case no schema matches.",
      "type": "object"
    },
    "prebidjs.floors.IFloorsData": {
      "additionalProperties": false,
      "description": "IFloor module for adUnit.",
      "properties": {
        "currency": {
          "$ref": "#/definitions/prebidjs.currency.ICurrency",
          "description": "Currency of floor data. Floor Module will convert currency where necessary. See Currency section for more details."
        },
        "default": {
          "description": "Floor used if no matching rules are found.",
          "type": "number"
        },
        "floorProvider": {
          "description": "Optional atribute (as of prebid version 4.2) used to signal to the Floor Provider’s Analytics adapter their floors are being applied. They can opt to log only floors that are applied when they are the provider. If floorProvider is supplied in both the top level of the floors object and within the data object, the data object’s configuration shall prevail.",
          "type": "string"
        },
        "floorsSchemaVersion": {
          "default": 1,
          "description": "The module supports two versions of the data schema. Version 1 allows for only one model to be applied in a given data set, whereas Version 2 allows you to sample multiple models selected by supplied weights. If no schema version is provided, the module will assume version 1 for the sake of backwards compatibility.",
          "enum": [
            1,
            2
          ],
          "type": "number"
        },
        "modelVersion": {
          "description": "Used by floor providers to train on model version performance. The expectation is a floor provider’s analytics adapter will pass the model verson back for algorithm training.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/prebidjs.floors.IFloorSchema",
          "description": "allows for flexible definition of how floor data is formatted."
        },
        "skipRate": {
          "default": 0,
          "description": "`skipRate` is a random function whose input value is any integer 0 through 100 to determine when to skip all floor logic, where 0 is always use floor data and 100 is always skip floor data. The use case is for publishers or floor providers to learn bid behavior when floors are applied or skipped. Analytics adapters will have access to model version (if defined) when skipped is true to signal the Price Floors Module is in floors mode.\n\nIf `skipRate` is supplied in both the root level of the floors object and within the data object, the skipRate configuration within the data object shall prevail.",
          "type": "number"
        },
        "values": {
          "$ref": "#/definitions/prebidjs.floors.IFloorValues",
          "description": "A series of attributes representing a hash of floor data in a format defined by the schema object."
        }
      },
      "type": "object"
    },
    "prebidjs.gptPreAuction.GptPreAuctionConfig": {
      "additionalProperties": false,
      "properties": {
        "customGptSlotMatching": {
          "$comment": "(gptSlotObj: any) => boolean",
          "description": "GPT slot matching function should match the customSlotMatching function sent to `setTargetingForGptAsync`",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "gptSlotObj": {}
              },
              "required": [
                "gptSlotObj"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "customPbAdSlot": {
          "$comment": "(adUnitCode: string, adServerSlot: string) => string",
          "description": "Custom PB AdSlot function",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "adServerSlot": {
                  "type": "string"
                },
                "adUnitCode": {
                  "type": "string"
                }
              },
              "required": [
                "adUnitCode",
                "adServerSlot"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "enabled": {
          "description": "allows turning off of module. Default value is true",
          "type": "boolean"
        },
        "mcmEnabled": {
          "description": "Removes extra network IDs when Multiple Customer Management is active. Default is false.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "prebidjs.priceGranularity.ICustomPriceGranularityConfig": {
      "additionalProperties": false,
      "description": "This configuration defines the price bucket granularity setting that will be used for the hb_pb keyword.",
      "properties": {
        "buckets": {
          "items": {
            "$ref": "#/definitions/prebidjs.priceGranularity.IPriceBucketConfig"
          },
          "type": "array"
        }
      },
      "required": [
        "buckets"
      ],
      "type": "object"
    },
    "prebidjs.priceGranularity.IMediaTypePriceGranularityConfig": {
      "additionalProperties": false,
      "description": "The default Prebid price granularities cap out at $20, which isn't always convenient for video ads, which can command more than $20. One solution is to just set up a custom price granularity as described above. Another approach is mediaTypePriceGranularity config that may be set to define granularities for each of five media types: banner, video, video-instream, video-outstream, and native.",
      "properties": {
        "banner": {
          "$ref": "#/definitions/prebidjs.priceGranularity.PriceGranularityConfig"
        },
        "native": {
          "$ref": "#/definitions/prebidjs.priceGranularity.PriceGranularityConfig"
        },
        "video": {
          "$ref": "#/definitions/prebidjs.priceGranularity.PriceGranularityConfig"
        },
        "video-outstream": {
          "$ref": "#/definitions/prebidjs.priceGranularity.PriceGranularityConfig"
        }
      },
      "required": [
        "video",
        "video-outstream",
        "banner",
        "native"
      ],
      "type": "object"
    },
    "prebidjs.priceGranularity.IPriceBucketConfig": {
      "additionalProperties": false,
      "properties": {
        "increment": {
          "description": "Increment steps in publisher currency",
          "type": "number"
        },
        "max": {
          "description": "Upper limit for this price bucket",
          "type": "number"
        },
        "precision": {
          "description": "default is 2 if omitted - means 2.1234 rounded to 2 decimal places = 2.12",
          "type": "number"
        }
      },
      "required": [
        "max",
        "increment"
      ],
      "type": "object"
    },
    "prebidjs.priceGranularity.PriceGranularityConfig": {
      "anyOf": [
        {
          "const": "low",
          "type": "string"
        },
        {
          "const": "medium",
          "type": "string"
        },
        {
          "const": "high",
          "type": "string"
        },
        {
          "const": "auto",
          "type": "string"
        },
        {
          "const": "dense",
          "type": "string"
        },
        {
          "$ref": "#/definitions/prebidjs.priceGranularity.ICustomPriceGranularityConfig"
        }
      ]
    },
    "prebidjs.realtimedata.IConfiantDataProviderModule": {
      "additionalProperties": false,
      "description": "Confiant’s module provides comprehensive detection of security, quality, and privacy threats across your ad stack. Confiant is the industry leader in real-time detecting and blocking of bad ads when it comes to protecting your users and brand reputation.",
      "properties": {
        "name": {
          "const": "confiant",
          "type": "string"
        },
        "params": {
          "additionalProperties": false,
          "properties": {
            "prebidExcludeBidders": {
              "description": "comma separated list of bidders to exclude from Confiant's prebid.js integration",
              "type": "string"
            },
            "prebidNameSpace": {
              "description": "namespace for prebid.js integration",
              "type": "string"
            },
            "propertyId": {
              "type": "string"
            },
            "shouldEmitBillableEvent": {
              "description": "upon being set to true enables firing of the BillableEvent upon Confiant's impression scanning",
              "type": "boolean"
            }
          },
          "required": [
            "propertyId"
          ],
          "type": "object"
        },
        "waitForIt": {
          "default": "`false`",
          "description": "Setting this value to true flags this RTD module as “important” enough to wait the full auction delay period. Once all such RTD modules have returned, the auction will proceed even if there are other RTD modules that have not yet responded.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "params",
        "waitForIt"
      ],
      "type": "object"
    },
    "prebidjs.realtimedata.IGeolocationDataProviderModule": {
      "additionalProperties": false,
      "description": "The Geolocation module lets publishers get user’s precise location with their permissions. The first permission that is needed is directly asked from site’s navigator alert. Then if site has installed a CMP (Consent Management Platform), this module checks the geolocation permission from consent data.\n\nThe module provides Geolocation coords using the [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API).",
      "properties": {
        "name": {
          "const": "geolocation",
          "type": "string"
        },
        "params": {
          "additionalProperties": false,
          "properties": {
            "requestPermission": {
              "description": "If the module should ask for permission to access geo data",
              "type": "boolean"
            }
          },
          "required": [
            "requestPermission"
          ],
          "type": "object"
        },
        "waitForIt": {
          "default": "`false`",
          "description": "Setting this value to true flags this RTD module as “important” enough to wait the full auction delay period. Once all such RTD modules have returned, the auction will proceed even if there are other RTD modules that have not yet responded.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "params",
        "waitForIt"
      ],
      "type": "object"
    },
    "prebidjs.realtimedata.IIntersectionDataProviderModule": {
      "additionalProperties": false,
      "description": "The Intersection module provides intersection for ad slots on the page using Intersection Observer API.",
      "properties": {
        "name": {
          "const": "intersection",
          "type": "string"
        },
        "waitForIt": {
          "default": "`false`",
          "description": "Setting this value to true flags this RTD module as “important” enough to wait the full auction delay period. Once all such RTD modules have returned, the auction will proceed even if there are other RTD modules that have not yet responded.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "waitForIt"
      ],
      "type": "object"
    },
    "prebidjs.realtimedata.IRealTimeDataConfig": {
      "additionalProperties": false,
      "properties": {
        "auctionDelay": {
          "description": "Defines the maximum amount of time, in milliseconds, the header bidding auction will be delayed while waiting for a response from the RTD modules as a whole group. The default is 0 ms delay, which means that RTD modules need to obtain their data when the page initializes.",
          "type": "number"
        },
        "dataProviders": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/prebidjs.realtimedata.IGeolocationDataProviderModule"
              },
              {
                "$ref": "#/definitions/prebidjs.realtimedata.ITimeoutDataProviderModule"
              },
              {
                "$ref": "#/definitions/prebidjs.realtimedata.IIntersectionDataProviderModule"
              },
              {
                "$ref": "#/definitions/prebidjs.realtimedata.IConfiantDataProviderModule"
              }
            ]
          },
          "type": "array"
        }
      },
      "required": [
        "auctionDelay",
        "dataProviders"
      ],
      "type": "object"
    },
    "prebidjs.realtimedata.ITimeoutDataProviderModule": {
      "additionalProperties": false,
      "description": "The timeout RTD module enables publishers to set rules that determine the timeout based on certain features. It supports rules dynamically retrieved from a timeout provider as well as rules set directly via configuration.",
      "properties": {
        "name": {
          "const": "timeout",
          "type": "string"
        },
        "params": {
          "additionalProperties": false,
          "properties": {
            "endpoint": {
              "additionalProperties": false,
              "properties": {
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          },
          "required": [
            "endpoint"
          ],
          "type": "object"
        },
        "waitForIt": {
          "default": "`false`",
          "description": "Setting this value to true flags this RTD module as “important” enough to wait the full auction delay period. Once all such RTD modules have returned, the auction will proceed even if there are other RTD modules that have not yet responded.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "params",
        "waitForIt"
      ],
      "type": "object"
    },
    "prebidjs.schain.ISupplyChainConfig": {
      "additionalProperties": false,
      "properties": {
        "config": {
          "$ref": "#/definitions/SupplyChainObject.ISupplyChainObject",
          "description": "This is the full Supply Chain object sent to bidders conforming to the IAB OpenRTB SupplyChain Object Specification."
        },
        "validation": {
          "description": "'strict': In this mode, schain object will not be passed to adapters if it is invalid. Errors are thrown for invalid schain object. 'relaxed': Errors are thrown for an invalid schain object but the invalid schain object is still passed to adapters. 'off': No validations are performed and schain object is passed as-is to adapters.\n\nThe default value is 'strict'",
          "enum": [
            "strict",
            "relaxed",
            "off"
          ],
          "type": "string"
        }
      },
      "required": [
        "validation",
        "config"
      ],
      "type": "object"
    },
    "prebidjs.server.AdapterOptions": {
      "additionalProperties": false,
      "description": "Arguments will be added to resulting OpenRTB payload to Prebid Server in every impression object at `request.imp[].ext.BIDDER`.",
      "properties": {
        "adagio": {},
        "adf": {},
        "aduptech": {},
        "amx": {},
        "appnexus": {},
        "appnexusAst": {},
        "connectad": {},
        "criteo": {},
        "dspx": {},
        "gumgum": {},
        "improvedigital": {},
        "invibes": {},
        "ix": {},
        "nanointeractive": {},
        "ogury": {},
        "onetag": {},
        "openx": {},
        "orbidder": {},
        "pubmatic": {},
        "rads": {},
        "rubicon": {},
        "seedtag": {},
        "showheroesBs": {},
        "smartadserver": {},
        "smartx": {},
        "spotx": {},
        "stroeerCore": {},
        "teads": {},
        "triplelift": {},
        "unruly": {},
        "visx": {},
        "vlyby": {},
        "xhb": {},
        "yieldlab": {}
      },
      "type": "object"
    },
    "prebidjs.server.BidSource": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "client": {
              "description": "a number between 0 and 100",
              "type": "number"
            },
            "server": {
              "description": "a number between 0 and 100",
              "type": "number"
            }
          },
          "required": [
            "client",
            "server"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "client": {
              "const": 100,
              "description": "if client should have 100% of the traffic, no server share is necessary",
              "type": "number"
            }
          },
          "required": [
            "client"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "server": {
              "const": 100,
              "description": "if server should have 100% of the traffic, no server share is necessary",
              "type": "number"
            }
          },
          "required": [
            "server"
          ],
          "type": "object"
        }
      ],
      "description": "control the ratio between client and server. `client` and `server` must add up to `100`."
    },
    "prebidjs.server.BidderControl": {
      "additionalProperties": false,
      "description": "Configure the A/B test between client and server",
      "properties": {
        "bidSource": {
          "$ref": "#/definitions/prebidjs.server.BidSource",
          "description": "control the ratio between client and server. `client` and `server` must add up to `100`."
        },
        "includeSourceKvp": {
          "description": "As a Publisher, I'd like to run tests on one part or my site per one of the other use cases above. I'll use the test KVP to confirm relative responses, so would like to have the hb_source test KVP coming in even on pages where the server test isn't running.",
          "type": "boolean"
        }
      },
      "required": [
        "bidSource",
        "includeSourceKvp"
      ],
      "type": "object"
    },
    "prebidjs.server.Endpoint": {
      "additionalProperties": false,
      "description": "Endpoint definition",
      "properties": {
        "noP1Consent": {
          "description": "Endpoint that works without cookies",
          "type": "string"
        },
        "p1Consent": {
          "description": "Endpoint that supports cookies",
          "type": "string"
        }
      },
      "required": [
        "p1Consent"
      ],
      "type": "object"
    },
    "prebidjs.server.ExtPrebid": {
      "additionalProperties": false,
      "properties": {
        "analytics": {
          "additionalProperties": false,
          "description": "Custom properties that will be passed to analytics adapters.",
          "properties": {
            "h5v": {
              "additionalProperties": false,
              "description": "Meta info about the versions of moli and of the publisher ad tag in use.",
              "properties": {
                "adTagVersion": {
                  "type": "string"
                },
                "moliVersion": {
                  "type": "string"
                }
              },
              "required": [
                "moliVersion"
              ],
              "type": "object"
            }
          },
          "required": [
            "h5v"
          ],
          "type": "object"
        },
        "cache": {
          "additionalProperties": false,
          "properties": {
            "vastxml": {
              "additionalProperties": false,
              "properties": {
                "returnCreative": {
                  "type": "boolean"
                }
              },
              "required": [
                "returnCreative"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "returnallbidstatus": {
          "description": "Prebid Server can be instructed to return additional SeatNonBid information about why bidders might not have bid on certain adunits. You can get this extra information by setting `extPrebid.returnallbidstatus` equal to `true`.\n\nNote that client-side analytics adapters can receive this data by listening to the seatNonBid event.",
          "type": "boolean"
        },
        "storedrequest": {
          "$ref": "#/definitions/prebidjs.server.StoredRequest",
          "description": "Stored Requests are also allowed on the BidRequest. These work exactly the same way, but support storing properties like timeouts and price granularity."
        },
        "targeting": {
          "additionalProperties": false,
          "description": "Targeting refers to strings which are sent to the adserver to make header bidding possible.\n\n`request.ext.prebid.targeting` is an optional property which causes Prebid Server to set these params on the response at `response.seatbid[i].bid[j].ext.prebid.targeting`.",
          "properties": {
            "includebidderkeys": {
              "description": "Whether to include targeting for the best bid from each bidder in `response.seatbid[].bid[]`",
              "type": "boolean"
            },
            "includeformat": {
              "description": "Whether to include the \"hb_format\" targeting key.",
              "type": "boolean"
            },
            "includewinners": {
              "description": "Whether to include targeting for the winning bids in `response.seatbid[].bid[]`.",
              "type": "boolean"
            },
            "preferdeals": {
              "default": false,
              "description": "If targeting is returned and this is true, PBS will choose the highest value deal before choosing the highest value non-deal.",
              "type": "boolean"
            },
            "pricegranularity": {
              "additionalProperties": false,
              "description": "Defines how PBS quantizes bid prices into buckets",
              "properties": {
                "ranges": {
                  "additionalProperties": false,
                  "description": "Non-overlapping price bucket definitions",
                  "properties": {
                    "increment": {
                      "description": "Increment steps in publisher currency",
                      "type": "number"
                    },
                    "max": {
                      "description": "Upper limit for this price bucket",
                      "type": "number"
                    },
                    "precision": {
                      "description": "default is 2 if omitted - means 2.1234 rounded to 2 decimal places = 2.12",
                      "type": "number"
                    }
                  },
                  "required": [
                    "max",
                    "increment"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "ranges"
              ],
              "type": "object"
            }
          },
          "required": [
            "pricegranularity"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "prebidjs.server.S2SConfig": {
      "additionalProperties": false,
      "properties": {
        "accountId": {
          "description": "Your Prebid Server account ID. This is obtained from whoever's hosting your Prebid Server.",
          "type": "string"
        },
        "adapter": {
          "const": "prebidServer",
          "description": "Adapter to use to connect to Prebid Server.\n\nDefaults to 'prebidServer'",
          "type": "string"
        },
        "adapterOptions": {
          "$ref": "#/definitions/prebidjs.server.AdapterOptions",
          "description": "Arguments will be added to resulting OpenRTB payload to Prebid Server in every impression object at `request.imp[].ext.BIDDER`."
        },
        "allowUnknownBidderCodes": {
          "default": false,
          "description": "Allow Prebid Server to bid on behalf of bidders that are not explicitly listed in the adUnit.",
          "type": "boolean"
        },
        "bidderControl": {
          "additionalProperties": false,
          "description": "Configure the client/server share for every bidder\n\nOnly available with the s2sTesting module",
          "properties": {
            "adagio": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "adf": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "aduptech": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "amx": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "appnexus": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "appnexusAst": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "connectad": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "criteo": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "dspx": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "gumgum": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "improvedigital": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "invibes": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "ix": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "nanointeractive": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "ogury": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "onetag": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "openx": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "orbidder": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "pubmatic": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "rads": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "rubicon": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "seedtag": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "showheroesBs": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "smartadserver": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "smartx": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "spotx": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "stroeerCore": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "teads": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "triplelift": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "unruly": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "visx": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "vlyby": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "xhb": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            },
            "yieldlab": {
              "$ref": "#/definitions/prebidjs.server.BidderControl"
            }
          },
          "type": "object"
        },
        "bidders": {
          "description": "Which bidders auctions should take place on the server side",
          "items": {
            "$ref": "#/definitions/prebidjs.BidderCode"
          },
          "type": "array"
        },
        "coopSync": {
          "default": "is true.",
          "description": "Whether or not PBS is allowed to perform “cooperative syncing” for bidders not on this page. Publishers help each other improve match rates by allowing this.",
          "type": "boolean"
        },
        "defaultTtl": {
          "description": "Configures the default TTL in the Prebid Server adapter to use when Prebid Server does not return a bid TTL - 60 if not set",
          "type": "number"
        },
        "defaultVendor": {
          "$ref": "#/definitions/prebidjs.BidderCode",
          "description": "Automatically includes all following options in the config with vendor's default values. Individual properties can be overridden by including them in the config along with this setting."
        },
        "enabled": {
          "description": "Enables this s2sConfig block - defaults to false",
          "type": "boolean"
        },
        "endpoint": {
          "$ref": "#/definitions/prebidjs.server.Endpoint",
          "description": "Defines the auction endpoint for the Prebid Server cluster"
        },
        "extPrebid": {
          "$ref": "#/definitions/prebidjs.server.ExtPrebid",
          "description": "Arguments will be added to resulting OpenRTB payload to Prebid Server in `request.ext.prebid`."
        },
        "name": {
          "description": "An optional name for this configuration. This is necessary if you have multiple configurations and want to reference them in a `BidObject` via the `module` property.",
          "type": "string"
        },
        "syncEndpoint": {
          "$ref": "#/definitions/prebidjs.server.Endpoint",
          "description": "Defines the cookie_sync endpoint for the Prebid Server cluster"
        },
        "syncTimeout": {
          "default": "is 1000.",
          "description": "Maximum number of milliseconds allowed for each server-side userSync to load.",
          "type": "number"
        },
        "syncUrlModifier": {
          "description": "Function to modify a bidder's sync url before the actual call to the sync endpoint. Bidder must be enabled for s2sConfig."
        },
        "testServerOnly": {
          "description": "Using the `testServerOnly` flag means that all client requests will be suppressed (those requests will not be made) whenever any bid requests from the 'A/B test group' result in a 'server' bid request. The 'A/B test group' includes any requests whose source is controled by 's2sConfig.bidderControl' or 'bidSource' at the adUnit level. This may give a clearer picture of how s2s performs without interference from client bid requests.\n\nOnly available with the s2sTesting module",
          "type": "boolean"
        },
        "testing": {
          "description": "This attribute is required to enable the bidderControl and bidSource features. This shouldn't be confused with the enabled: true flag which enables the entire server-to-server feature.\n\nOnly available with the s2sTesting module",
          "type": "boolean"
        },
        "timeout": {
          "description": "number of milliseconds allowed for the server-side auctions. This should be approximately 200ms-300ms less than your Prebid.js timeout to allow for all bids to be returned in a timely manner.\n\nSee the Additional Notes below for more information.",
          "type": "number"
        },
        "userSyncLimit": {
          "description": "Max number of userSync URLs that can be executed by Prebid Server cookie_sync per request. If not defined, PBS will execute all userSync URLs included in the request.",
          "type": "number"
        }
      },
      "required": [
        "accountId",
        "adapter",
        "bidders",
        "enabled",
        "endpoint",
        "syncEndpoint",
        "timeout"
      ],
      "type": "object"
    },
    "prebidjs.server.StoredRequest": {
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "prebidjs.targetingcontrols.ITargetingControls": {
      "additionalProperties": false,
      "properties": {
        "addTargetingKeys": {
          "description": "Selects targeting keys to be supported in addition to the default ones",
          "items": {
            "$ref": "#/definitions/prebidjs.targetingcontrols.TargetingKeys"
          },
          "type": "array"
        },
        "allowSendAllBidsTargetingKeys": {
          "description": "Selects supported default targeting keys.",
          "items": {
            "$ref": "#/definitions/prebidjs.targetingcontrols.TargetingKeys"
          },
          "type": "array"
        },
        "allowTargetingKeys": {
          "description": "Selects supported default targeting keys.",
          "items": {
            "$ref": "#/definitions/prebidjs.targetingcontrols.TargetingKeys"
          },
          "type": "array"
        },
        "alwaysIncludeDeals": {
          "description": "To make sure that deal bids are sent along with the winning bid in the `enableSendAllBids:false` scenario, use the alwaysIncludeDeals flag that's part of targetingControls",
          "type": "boolean"
        },
        "auctionKeyMaxChars": {
          "description": "Specifies the maximum number of characters the system can add to ad server targeting.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "prebidjs.targetingcontrols.TargetingKeys": {
      "description": "List of available targeting keys from prebid",
      "enum": [
        "BIDDER",
        "AD_ID",
        "PRICE_BUCKET",
        "SIZE",
        "DEAL",
        "SOURCE",
        "FORMAT",
        "UUID",
        "CACHE_ID",
        "CACHE_HOST",
        "ADOMAIN",
        "title",
        "body",
        "body2",
        "privacyLink",
        "privacyIcon",
        "sponsoredBy",
        "image",
        "icon",
        "clickUrl",
        "displayUrl",
        "cta",
        "rating",
        "address",
        "downloads",
        "likes",
        "phone",
        "price",
        "salePrice"
      ],
      "type": "string"
    },
    "prebidjs.userSync.EIDSource": {
      "enum": [
        "33across.com",
        "trustpid.com",
        "adserver.org",
        "navegg.com",
        "justtag.com",
        "id5-sync.com",
        "flashtalking.com",
        "parrable.com",
        "liveramp.com",
        "liveintent.com",
        "merkleinc.com",
        "britepool.com",
        "hcn.health",
        "criteo.com",
        "netid.de",
        "zeotap.com",
        "audigent.com",
        "quantcast.com",
        "verizonmedia.com",
        "mediawallahscript.com",
        "tapad.com",
        "novatiq.com",
        "uidapi.com",
        "admixer.net",
        "deepintent.com",
        "kpuid.com",
        "yahoo.com",
        "thenewco.it",
        "pubcid.org"
      ],
      "type": "string"
    },
    "prebidjs.userSync.ICriteoProvider": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "criteo",
          "description": "the provider name",
          "type": "string"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IDigitTrustProvider": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "digitrust",
          "description": "the provider name",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.userSync.IDigitTrustProviderParams",
          "description": "provider specific params"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IDigitTrustProviderParams": {
      "additionalProperties": false,
      "properties": {
        "callback": {
          "$comment": "(result: any) => void",
          "description": "Allows init error handling",
          "properties": {
            "namedArgs": {
              "additionalProperties": false,
              "properties": {
                "result": {}
              },
              "required": [
                "result"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "init": {
          "additionalProperties": false,
          "properties": {
            "member": {
              "type": "string"
            },
            "site": {
              "type": "string"
            }
          },
          "required": [
            "member",
            "site"
          ],
          "type": "object"
        }
      },
      "required": [
        "init"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IEncryptedSignalSource": {
      "additionalProperties": false,
      "properties": {
        "customFunc": {
          "$comment": "() => any",
          "description": "This function will be defined for custom sources only and called which will return the custom data set from the page"
        },
        "encrypt": {
          "description": "Should be set to false by default.",
          "type": "boolean"
        },
        "source": {
          "description": "An array of sources for which signals needs to be registered",
          "items": {
            "$ref": "#/definitions/prebidjs.userSync.EIDSource"
          },
          "type": "array"
        }
      },
      "required": [
        "source",
        "encrypt"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IEncryptedSignalSourcesConfig": {
      "additionalProperties": false,
      "description": "Google now supports Encrypted Signals for Publishers(ESP), a program that allows publishers can explicitly share encrypted signals on bid requests with third-party bidders. User ID modules now support code which will register the signal sources and encrypted signal are created and is sent to GAM request in a3p parameter. ‘encryptedSignal’ configuration under userSync Module will help to configure signal sources.",
      "properties": {
        "registerDelay": {
          "description": "The amount of time (in seconds) after which registering of signals will happen. Default value 0 is considered if ‘registerDelay’ is not provided.",
          "type": "number"
        },
        "sources": {
          "description": "An array of Object consist of sources list and encryption flag",
          "items": {
            "$ref": "#/definitions/prebidjs.userSync.IEncryptedSignalSource"
          },
          "type": "array"
        }
      },
      "required": [
        "sources"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IFilterSetting": {
      "additionalProperties": false,
      "properties": {
        "bidders": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/definitions/prebidjs.BidderCode"
              },
              "type": "array"
            },
            {
              "const": "*",
              "type": "string"
            }
          ],
          "description": "Array of bidders that should be filtered. '*' means all."
        },
        "filter": {
          "enum": [
            "include",
            "exclude"
          ],
          "type": "string"
        }
      },
      "required": [
        "bidders",
        "filter"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IFilterSettingsConfig": {
      "additionalProperties": false,
      "properties": {
        "all": {
          "$ref": "#/definitions/prebidjs.userSync.IFilterSetting",
          "description": "From the documentation: If you want to apply the same bidder inclusion/exclusion rules for both types of sync pixels, you can use the all object instead specifying both image and iframe objects like so"
        },
        "iframe": {
          "$ref": "#/definitions/prebidjs.userSync.IFilterSetting",
          "description": "Allow iframe-based syncs (the presence of a valid filterSettings.iframe object automatically enables iframe type user-syncing).\n\nNote - iframe-based syncing is disabled by default."
        },
        "image": {
          "$ref": "#/definitions/prebidjs.userSync.IFilterSetting",
          "description": "Image-based syncing is enabled by default; it can be disabled by excluding all/certain bidders via the filterSettings object."
        }
      },
      "type": "object"
    },
    "prebidjs.userSync.IID5Provider": {
      "additionalProperties": false,
      "description": "The ID5 Universal ID that is delivered to Prebid will be encrypted by ID5 with a rotating key to avoid unauthorized usage and to enforce privacy requirements. Therefore, we strongly recommend setting `storage.refreshInSeconds` to 8 hours (8*3600 seconds) to ensure all demand partners receive an ID that has been encrypted with the latest key, has up-to-date privacy signals, and allows them to transact against it.",
      "properties": {
        "name": {
          "const": "id5Id",
          "description": "the provider name",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.userSync.IID5ProviderParams",
          "description": "provider specific params"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IID5ProviderParams": {
      "additionalProperties": false,
      "properties": {
        "partner": {
          "description": "This is the ID5 Partner Number obtained from registering with ID5.",
          "examples": [
            173
          ],
          "type": "number"
        },
        "pd": {
          "description": "The pd field (short for Publisher Data) is an optional, base64 encoded string that contains any deterministic user data the publisher has access to. The data will be used strictly to provide better linking of ID5 IDs across domains for improved user identification. If the user has not provided ID5 with a legal basis to process data, the information sent to ID5 will be ignored and neither used nor saved for future requests.",
          "type": "string"
        }
      },
      "required": [
        "partner"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IIdentityLinkProvider": {
      "additionalProperties": false,
      "description": "IdentityLink, provided by LiveRamp is a single person-based identifier which allows marketers, platforms and publishers to perform personalized segmentation, targeting and measurement use cases that require a consistent, cross-channel view of the user in anonymous spaces.",
      "properties": {
        "name": {
          "const": "identityLink",
          "description": "the provider name",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.userSync.IIdentityLinkProviderParams",
          "description": "provider specific params"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IIdentityLinkProviderParams": {
      "additionalProperties": false,
      "properties": {
        "notUse3P": {
          "description": "Property for choosing if a cookieable RampID envelope (RTIS) should be set and stored until the user authenticates which then will be replaced by an authenticated RampID envelope (ATS) (either true or false).",
          "type": "boolean"
        },
        "pid": {
          "description": "This is the placementId, value needed for obtaining user's IdentityLink envelope.",
          "type": "string"
        }
      },
      "required": [
        "pid",
        "notUse3P"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IPairIdParams": {
      "additionalProperties": false,
      "description": "Container of all module params.",
      "properties": {
        "liveramp": {
          "additionalProperties": false,
          "description": "Container of all liveramp cleanroom specified params.",
          "properties": {
            "storageKey": {
              "description": "storage key to fetch liveramp provided PAIR Id, the default value is \"_lr_pairId\"",
              "examples": [
                "_lr_pairId_custom"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "prebidjs.userSync.IPairIdProvider": {
      "additionalProperties": false,
      "description": "Developed by and for use with Display and Video 360, PAIR (Publisher Advertiser Identity Reconciliation) is a secure and privacy-forward way for enabling advertisers and publishers to reconcile their first-party data for marketing use cases via advanced data encryption methods without the reliance on third-party cookies. PAIR can help advertisers and publishers maintain control of first-party data while ensuring there is no pooling of data, no leakage of data, no leakage of insights, durability for the future using secure encryption methods, and no user tracking across publishers.",
      "properties": {
        "name": {
          "const": "pairId",
          "description": "the provider name",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.userSync.IPairIdParams",
          "description": "provider specific params"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IPubCommonIdProvider": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "pubCommonId",
          "description": "the provider name",
          "type": "string"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "prebidjs.userSync.ISharedIdParams": {
      "additionalProperties": false,
      "properties": {
        "create": {
          "description": "For publisher server support only. If true, the publisher’s server will create the (pubcid) cookie. Default is true.",
          "type": "boolean"
        },
        "extend": {
          "description": "If true, the expiration time of the stored IDs will be refreshed during each page load. Default is false.",
          "type": "boolean"
        },
        "pixelUrl": {
          "description": "For publisher server support only. Where to call out to for a server cookie – see Prebid Identity for more information.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "prebidjs.userSync.ISharedIdProvider": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "sharedId",
          "description": "the provider name",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.userSync.ISharedIdParams",
          "description": "provider specific params"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IUnifiedIdProvider": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "const": "unifiedId",
          "description": "the provider name",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.userSync.IUnifiedIdProviderParams",
          "description": "provider specific params"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IUnifiedIdProviderParams": {
      "additionalProperties": false,
      "properties": {
        "partner": {
          "description": "This is the partner ID value obtained from registering with The Trade Desk or working with a Prebid.js managed services provider.",
          "examples": [
            "myTtdPid"
          ],
          "type": "string"
        },
        "url": {
          "description": "If specified for UnifiedId, overrides the default Trade Desk URL.",
          "examples": [
            "https://unifiedid.org/somepath?args"
          ],
          "type": "string"
        },
        "value": {
          "additionalProperties": false,
          "description": "Used only if the page has a separate mechanism for storing the Unified ID. The value is an object containing the values to be sent to the adapters. In this scenario, no URL is called and nothing is added to local storage",
          "properties": {
            "tdid": {
              "type": "string"
            }
          },
          "required": [
            "tdid"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "prebidjs.userSync.IUserIdStorage": {
      "additionalProperties": false,
      "properties": {
        "expires": {
          "description": "How long (in **days**) the user ID information will be stored. If this parameter isn't specified, session cookies are used in cookie-mode, and local storage mode will create new IDs on every page.\n\nNote: This field is optional, but prebid strongly requires it so we make it mandatory.",
          "type": "number"
        },
        "name": {
          "description": "The name of the cookie or html5 local storage where the user ID will be stored.",
          "examples": [
            "_unifiedId"
          ],
          "type": "string"
        },
        "refreshInSeconds": {
          "description": "NOT APPLICABLE FOR SharedId The amount of time (in **seconds**) the user ID should be cached in storage before calling the provider again to retrieve a potentially updated value for their user ID. If set, this value should equate to a time period less than the number of days defined in `storage.expires`.\n\nBy default the ID will not be refreshed until it expires.",
          "type": "number"
        },
        "type": {
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage",
          "enum": [
            "cookie",
            "html5"
          ],
          "type": "string"
        },
        "value": {
          "description": "NOT APPLICABLE FOR SharedId Used only if the page has a separate mechanism for storing a User ID. The value is an object containing the values to be sent to the adapters."
        }
      },
      "required": [
        "type",
        "name",
        "expires"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IUserSyncConfig": {
      "additionalProperties": false,
      "description": "## Configure User Syncing\n\nThe user sync configuration options described in this section give publishers control over how adapters behave with respect to dropping pixels or scripts to cookie users with IDs. This practice is called “user syncing” because the aim is to let the bidders match IDs between their cookie space and the DSP's cookie space. There's a good reason for bidders to be doing this – DSPs are more likely to bid on impressions where they know something about the history of the user. However, there are also good reasons why publishers may want to control the use of these practices:\n\n- Page performance: Publishers may wish to move ad-related cookie work to much later in the page load after ads                     and content have loaded.\n- User privacy:     Some publishers may want to opt out of these practices even though it limits their users'                     values on the open market.\n- Security:         Publishers may want to control which bidders are trusted to inject images and JavaScript into                     their pages.\n\nUser syncing default behavior If you don't tweak any of the settings described in this section, the default behavior of Prebid.js is to wait 3 seconds after the auction ends, and then allow every adapter to drop up to 5 image-based user syncs.",
      "properties": {
        "auctionDelay": {
          "description": "Delay in milliseconds of the auction to retrieve user ids via the userId module before the auction starts. Continues auction once all IDs are retrieved or delay times out. Does not apply to bid adapter user sync pixels.\n\nDefault: 0.",
          "type": "number"
        },
        "enableOverride": {
          "description": "Enable/disable publisher to trigger user syncs by calling pbjs.triggerUserSyncs(). Default: false.",
          "type": "boolean"
        },
        "encryptedSignalSources": {
          "$ref": "#/definitions/prebidjs.userSync.IEncryptedSignalSourcesConfig",
          "description": "Google now supports Encrypted Signals for Publishers(ESP), a program that allows publishers can explicitly share encrypted signals on bid requests with third-party bidders. User ID modules now support code which will register the signal sources and encrypted signal are created and is sent to GAM request in a3p parameter. ‘encryptedSignal’ configuration under userSync Module will help to configure signal sources."
        },
        "filterSettings": {
          "$ref": "#/definitions/prebidjs.userSync.IFilterSettingsConfig",
          "description": "Configure lists of adapters to include or exclude their user syncing based on the pixel type (image/iframe)."
        },
        "ppid": {
          "$ref": "#/definitions/prebidjs.userSync.EIDSource",
          "description": "Publishers using Google AdManager may want to sync one of the identifiers as their Google PPID for frequency capping or reporting. The PPID in GAM (which is unrelated to the PPID UserId Submodule) has strict rules; refer to [Google AdManager documentation](https://support.google.com/admanager/answer/2880055?hl=en) for them. Please note, Prebid uses a [GPT command](https://developers.google.com/publisher-tag/reference#googletag.PubAdsService) to sync identifiers for publisher convenience. It doesn’t currently work for instream video requests, as Prebid typically interacts with the player, which in turn may interact with IMA. IMA does have [a similar method](https://developers.google.com/interactive-media-ads/docs/sdks/html5/client-side/reference/js/google.ima.ImaSdkSettings#setPpid) as GPT, but IMA does not gather this ID from GPT.\n\nMust be a source from the `pbjs.getUserIdsAsEids()` array."
        },
        "syncDelay": {
          "description": "Delay in milliseconds for syncing after the auction ends. Default: 3000.",
          "type": "number"
        },
        "syncEnabled": {
          "description": "Enable/disable the user syncing feature. Default: true.",
          "type": "boolean"
        },
        "syncsPerBidder": {
          "default": 5,
          "description": "Number of registered syncs allowed per adapter. Default: 5. To allow all, set to 0.",
          "type": "number"
        },
        "userIds": {
          "items": {
            "$ref": "#/definitions/prebidjs.userSync.UserIdProvider"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "prebidjs.userSync.IUtiqIdProvider": {
      "additionalProperties": false,
      "properties": {
        "bidders": {
          "description": "An array of bidder codes to which this user ID may be sent. Currently, required and supporting AdformOpenRTB",
          "items": {
            "$ref": "#/definitions/prebidjs.BidderCode"
          },
          "type": "array"
        },
        "name": {
          "const": "utiq",
          "description": "the provider name",
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/prebidjs.userSync.IUtiqIdProviderParams",
          "description": "provider specific params"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "bidders",
        "name",
        "params"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IUtiqIdProviderParams": {
      "additionalProperties": false,
      "properties": {
        "maxDelayTime": {
          "description": "Max amount of time (in seconds) before looking into storage for data",
          "type": "number"
        }
      },
      "required": [
        "maxDelayTime"
      ],
      "type": "object"
    },
    "prebidjs.userSync.IZeotapIdPlusIdProvider": {
      "additionalProperties": false,
      "description": "ID+, powered by zeotap, enables the marketing ecosystem to overcome challenges posed by the demise of identifiers and a fast-changing regulatory landscape. ID+ is an open invitation to the entire industry to build the future of identity together.",
      "properties": {
        "name": {
          "const": "zeotapIdPlus",
          "description": "the provider name",
          "type": "string"
        },
        "storage": {
          "$ref": "#/definitions/prebidjs.userSync.IUserIdStorage",
          "description": "The publisher can specify some kind of local storage in which to store the results of the call to get the user ID. This can be either cookie or HTML5 storage. This is not needed when value is specified or the ID system is managing its own storage"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "prebidjs.userSync.UserIdProvider": {
      "anyOf": [
        {
          "$ref": "#/definitions/prebidjs.userSync.IUnifiedIdProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.IDigitTrustProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.ICriteoProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.IID5Provider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.IIdentityLinkProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.IPubCommonIdProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.IZeotapIdPlusIdProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.IUtiqIdProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.ISharedIdProvider"
        },
        {
          "$ref": "#/definitions/prebidjs.userSync.IPairIdProvider"
        }
      ],
      "description": "All supported id providers"
    },
    "prebidjs.video.Api": {
      "description": "Open RTB Spec 2.5 Section 5.6 Playback Methods",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "type": "number"
    },
    "prebidjs.video.CreativeAttributes": {
      "description": "Open RTB Spec 2.5 Section 5.3 Creative Attributes",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "type": "number"
    },
    "prebidjs.video.Linearity": {
      "description": "Open RTB Spec 2.5 Section 5.7 Video Linearity",
      "enum": [
        1,
        2
      ],
      "type": "number"
    },
    "prebidjs.video.MimeType": {
      "enum": [
        "video/mp4",
        "video/webm",
        "video/flv",
        "video/H264",
        "video/ogg",
        "video/MPV"
      ],
      "type": "string"
    },
    "prebidjs.video.Placement": {
      "description": "Video placement type.\n\n  1: In-Stream      Played before, during or after the streaming video content that the consumer has requested      (e.g., Pre-roll, Mid-roll, Post-roll).   2: In-Banner      Exists within a web banner that leverages the banner space to deliver a video experience as      opposed to another static or rich media format. The format relies on the existence of display      ad inventory on the page for its deliver   3: In-Article      Loads and plays dynamically between paragraphs of editorial content; existing as a standalone      branded message   4: In-Feed      Found in content, social, or product feeds   5: Interstitial/Slider/Floating\n\n *Highly recommended* because some bidders require more than context=outstream.",
      "enum": [
        1,
        2,
        3,
        4,
        5
      ],
      "type": "number"
    },
    "prebidjs.video.PlaybackMethod": {
      "description": "Open RTB Spec 2.5 Section 5.10 Playback Methods",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "type": "number"
    },
    "prebidjs.video.Plcmt": {
      "enum": [
        1,
        2,
        3,
        4
      ],
      "type": "number"
    },
    "prebidjs.video.Protocol": {
      "description": "Open RTB Spec 2.5 Section 5.8 Protocols",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "type": "number"
    },
    "prebidjs.video.Skip": {
      "enum": [
        0,
        1
      ],
      "type": "number"
    },
    "schain.SupplyChainConfig": {
      "additionalProperties": false,
      "description": "Config object for the supply chain",
      "properties": {
        "supplyChainStartNode": {
          "$ref": "#/definitions/SupplyChainObject.ISupplyChainNode",
          "description": "All supply chain object node arrays will start with this node. This should be the saleshouse or publisher that triggers the bid requests."
        }
      },
      "required": [
        "supplyChainStartNode"
      ],
      "type": "object"
    }
  }
}